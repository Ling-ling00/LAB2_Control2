
LAB2_Control2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009408  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009620  08009620  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009628  08009628  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000018  08009644  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08009644  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181fb  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbb  00000000  00000000  00038282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001098  00000000  00000000  0003c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028daf  00000000  00000000  0003d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bd9  00000000  00000000  000662bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011419f  00000000  00000000  0007ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d8c  00000000  00000000  00193038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00198dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080095c8 	.word	0x080095c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080095c8 	.word	0x080095c8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b970 	b.w	8000ddc <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9e08      	ldr	r6, [sp, #32]
 8000b1a:	460d      	mov	r5, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	460f      	mov	r7, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4694      	mov	ip, r2
 8000b28:	d965      	bls.n	8000bf6 <__udivmoddi4+0xe2>
 8000b2a:	fab2 f382 	clz	r3, r2
 8000b2e:	b143      	cbz	r3, 8000b42 <__udivmoddi4+0x2e>
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	f1c3 0220 	rsb	r2, r3, #32
 8000b38:	409f      	lsls	r7, r3
 8000b3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	409c      	lsls	r4, r3
 8000b42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b46:	fa1f f58c 	uxth.w	r5, ip
 8000b4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b4e:	0c22      	lsrs	r2, r4, #16
 8000b50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b58:	fb01 f005 	mul.w	r0, r1, r5
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b60:	eb1c 0202 	adds.w	r2, ip, r2
 8000b64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b68:	f080 811c 	bcs.w	8000da4 <__udivmoddi4+0x290>
 8000b6c:	4290      	cmp	r0, r2
 8000b6e:	f240 8119 	bls.w	8000da4 <__udivmoddi4+0x290>
 8000b72:	3902      	subs	r1, #2
 8000b74:	4462      	add	r2, ip
 8000b76:	1a12      	subs	r2, r2, r0
 8000b78:	b2a4      	uxth	r4, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b86:	fb00 f505 	mul.w	r5, r0, r5
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x90>
 8000b8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b96:	f080 8107 	bcs.w	8000da8 <__udivmoddi4+0x294>
 8000b9a:	42a5      	cmp	r5, r4
 8000b9c:	f240 8104 	bls.w	8000da8 <__udivmoddi4+0x294>
 8000ba0:	4464      	add	r4, ip
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba8:	1b64      	subs	r4, r4, r5
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11e      	cbz	r6, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40dc      	lsrs	r4, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0xbc>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	f000 80ed 	beq.w	8000d9e <__udivmoddi4+0x28a>
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd0:	fab3 f183 	clz	r1, r3
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	d149      	bne.n	8000c6c <__udivmoddi4+0x158>
 8000bd8:	42ab      	cmp	r3, r5
 8000bda:	d302      	bcc.n	8000be2 <__udivmoddi4+0xce>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	f200 80f8 	bhi.w	8000dd2 <__udivmoddi4+0x2be>
 8000be2:	1a84      	subs	r4, r0, r2
 8000be4:	eb65 0203 	sbc.w	r2, r5, r3
 8000be8:	2001      	movs	r0, #1
 8000bea:	4617      	mov	r7, r2
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d0e2      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bf4:	e7df      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf6:	b902      	cbnz	r2, 8000bfa <__udivmoddi4+0xe6>
 8000bf8:	deff      	udf	#255	; 0xff
 8000bfa:	fab2 f382 	clz	r3, r2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 8090 	bne.w	8000d24 <__udivmoddi4+0x210>
 8000c04:	1a8a      	subs	r2, r1, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2101      	movs	r1, #1
 8000c10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c14:	fb07 2015 	mls	r0, r7, r5, r2
 8000c18:	0c22      	lsrs	r2, r4, #16
 8000c1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c1e:	fb0e f005 	mul.w	r0, lr, r5
 8000c22:	4290      	cmp	r0, r2
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x124>
 8000c26:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x122>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2b8>
 8000c36:	4645      	mov	r5, r8
 8000c38:	1a12      	subs	r2, r2, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c40:	fb07 2210 	mls	r2, r7, r0, r2
 8000c44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x14e>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x14c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2c2>
 8000c60:	4610      	mov	r0, r2
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c6a:	e79f      	b.n	8000bac <__udivmoddi4+0x98>
 8000c6c:	f1c1 0720 	rsb	r7, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c82:	40fd      	lsrs	r5, r7
 8000c84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c88:	4323      	orrs	r3, r4
 8000c8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c8e:	fa1f fe8c 	uxth.w	lr, ip
 8000c92:	fb09 5518 	mls	r5, r9, r8, r5
 8000c96:	0c1c      	lsrs	r4, r3, #16
 8000c98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca6:	fa00 f001 	lsl.w	r0, r0, r1
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b0>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2b4>
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2b4>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4464      	add	r4, ip
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	b29d      	uxth	r5, r3
 8000cc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ccc:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd8:	45a6      	cmp	lr, r4
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1da>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2ac>
 8000ce6:	45a6      	cmp	lr, r4
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2ac>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	4464      	add	r4, ip
 8000cee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cf2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	42ac      	cmp	r4, r5
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46ae      	mov	lr, r5
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x29c>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x298>
 8000d04:	b156      	cbz	r6, 8000d1c <__udivmoddi4+0x208>
 8000d06:	ebb0 0208 	subs.w	r2, r0, r8
 8000d0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d12:	40ca      	lsrs	r2, r1
 8000d14:	40cc      	lsrs	r4, r1
 8000d16:	4317      	orrs	r7, r2
 8000d18:	e9c6 7400 	strd	r7, r4, [r6]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	f1c3 0120 	rsb	r1, r3, #32
 8000d28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d30:	fa25 f101 	lsr.w	r1, r5, r1
 8000d34:	409d      	lsls	r5, r3
 8000d36:	432a      	orrs	r2, r5
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1510 	mls	r5, r7, r0, r1
 8000d48:	0c11      	lsrs	r1, r2, #16
 8000d4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d52:	428d      	cmp	r5, r1
 8000d54:	fa04 f403 	lsl.w	r4, r4, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x258>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d64:	428d      	cmp	r5, r1
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4461      	add	r1, ip
 8000d6c:	1b49      	subs	r1, r1, r5
 8000d6e:	b292      	uxth	r2, r2
 8000d70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d74:	fb07 1115 	mls	r1, r7, r5, r1
 8000d78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d80:	4291      	cmp	r1, r2
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x282>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2a8>
 8000d8e:	4291      	cmp	r1, r2
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2a8>
 8000d92:	3d02      	subs	r5, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a52      	subs	r2, r2, r1
 8000d98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0xfc>
 8000d9e:	4631      	mov	r1, r6
 8000da0:	4630      	mov	r0, r6
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000da4:	4639      	mov	r1, r7
 8000da6:	e6e6      	b.n	8000b76 <__udivmoddi4+0x62>
 8000da8:	4610      	mov	r0, r2
 8000daa:	e6fb      	b.n	8000ba4 <__udivmoddi4+0x90>
 8000dac:	4548      	cmp	r0, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f0>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000db8:	3b01      	subs	r3, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f0>
 8000dbc:	4645      	mov	r5, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dc0:	462b      	mov	r3, r5
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1da>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x258>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b0>
 8000dcc:	3d02      	subs	r5, #2
 8000dce:	4462      	add	r2, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x124>
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e70a      	b.n	8000bec <__udivmoddi4+0xd8>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x14e>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f001 fc00 	bl	80025ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 fb07 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f000 fe49 	bl	8001a84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df2:	f000 fe15 	bl	8001a20 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000df6:	f000 fc2b 	bl	8001650 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000dfa:	f000 fb4b 	bl	8001494 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dfe:	f000 fcf3 	bl	80017e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e02:	f000 fc6f 	bl	80016e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e06:	f000 fd67 	bl	80018d8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e0a:	f000 fdbb 	bl	8001984 <MX_TIM5_Init>
  MX_ADC2_Init();
 8000e0e:	f000 fbb9 	bl	8001584 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //ADC for poten motor
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e12:	217f      	movs	r1, #127	; 0x7f
 8000e14:	48bc      	ldr	r0, [pc, #752]	; (8001108 <main+0x328>)
 8000e16:	f002 ff67 	bl	8003ce8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000e1a:	2228      	movs	r2, #40	; 0x28
 8000e1c:	49bb      	ldr	r1, [pc, #748]	; (800110c <main+0x32c>)
 8000e1e:	48ba      	ldr	r0, [pc, #744]	; (8001108 <main+0x328>)
 8000e20:	f002 f854 	bl	8002ecc <HAL_ADC_Start_DMA>

  //UART
  HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8000e24:	2204      	movs	r2, #4
 8000e26:	49ba      	ldr	r1, [pc, #744]	; (8001110 <main+0x330>)
 8000e28:	48ba      	ldr	r0, [pc, #744]	; (8001114 <main+0x334>)
 8000e2a:	f006 fb1d 	bl	8007468 <HAL_UART_Receive_IT>

  //PWM motor and direction pin
  HAL_TIM_Base_Start(&htim3);
 8000e2e:	48ba      	ldr	r0, [pc, #744]	; (8001118 <main+0x338>)
 8000e30:	f004 ff4c 	bl	8005ccc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e34:	2100      	movs	r1, #0
 8000e36:	48b8      	ldr	r0, [pc, #736]	; (8001118 <main+0x338>)
 8000e38:	f005 f892 	bl	8005f60 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f003 fe7e 	bl	8004b44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	48b3      	ldr	r0, [pc, #716]	; (800111c <main+0x33c>)
 8000e4e:	f003 fe79 	bl	8004b44 <HAL_GPIO_WritePin>

  //Encoder fualhaber
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000e52:	213c      	movs	r1, #60	; 0x3c
 8000e54:	48b2      	ldr	r0, [pc, #712]	; (8001120 <main+0x340>)
 8000e56:	f005 fa3b 	bl	80062d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000e5a:	48b2      	ldr	r0, [pc, #712]	; (8001124 <main+0x344>)
 8000e5c:	f004 ffa6 	bl	8005dac <HAL_TIM_Base_Start_IT>

  //PWM motor faulhaber
  HAL_TIM_Base_Start(&htim2);
 8000e60:	48b1      	ldr	r0, [pc, #708]	; (8001128 <main+0x348>)
 8000e62:	f004 ff33 	bl	8005ccc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e66:	2100      	movs	r1, #0
 8000e68:	48af      	ldr	r0, [pc, #700]	; (8001128 <main+0x348>)
 8000e6a:	f005 f879 	bl	8005f60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e6e:	2104      	movs	r1, #4
 8000e70:	48ad      	ldr	r0, [pc, #692]	; (8001128 <main+0x348>)
 8000e72:	f005 f875 	bl	8005f60 <HAL_TIM_PWM_Start>

  PID.Kp = 1;
 8000e76:	4bad      	ldr	r3, [pc, #692]	; (800112c <main+0x34c>)
 8000e78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e7c:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.00000001;
 8000e7e:	4bab      	ldr	r3, [pc, #684]	; (800112c <main+0x34c>)
 8000e80:	4aab      	ldr	r2, [pc, #684]	; (8001130 <main+0x350>)
 8000e82:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000e84:	4ba9      	ldr	r3, [pc, #676]	; (800112c <main+0x34c>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	48a7      	ldr	r0, [pc, #668]	; (800112c <main+0x34c>)
 8000e90:	f008 fb38 	bl	8009504 <arm_pid_init_f32>

  //ADC set position
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000e94:	217f      	movs	r1, #127	; 0x7f
 8000e96:	48a7      	ldr	r0, [pc, #668]	; (8001134 <main+0x354>)
 8000e98:	f002 ff26 	bl	8003ce8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, ADC_RawRead2, 40);
 8000e9c:	2228      	movs	r2, #40	; 0x28
 8000e9e:	49a6      	ldr	r1, [pc, #664]	; (8001138 <main+0x358>)
 8000ea0:	48a4      	ldr	r0, [pc, #656]	; (8001134 <main+0x354>)
 8000ea2:	f002 f813 	bl	8002ecc <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  setposition = Average_ADC2()/4095.0*2*M_PI;
 8000ea6:	f000 fe9b 	bl	8001be0 <Average_ADC2>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb05 	bl	80004bc <__aeabi_i2d>
 8000eb2:	a391      	add	r3, pc, #580	; (adr r3, 80010f8 <main+0x318>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fc94 	bl	80007e4 <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	f7ff f9ac 	bl	8000224 <__adddf3>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	a38a      	add	r3, pc, #552	; (adr r3, 8001100 <main+0x320>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fb59 	bl	8000590 <__aeabi_dmul>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fdad 	bl	8000a44 <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a93      	ldr	r2, [pc, #588]	; (800113c <main+0x35c>)
 8000eee:	6013      	str	r3, [r2, #0]
	  if(mode == 3){
 8000ef0:	4b93      	ldr	r3, [pc, #588]	; (8001140 <main+0x360>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d12c      	bne.n	8000f52 <main+0x172>
		  static uint32_t TimeStamp = 0;
		  if( HAL_GetTick()>=TimeStamp){
 8000ef8:	f001 fbdc 	bl	80026b4 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b91      	ldr	r3, [pc, #580]	; (8001144 <main+0x364>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d325      	bcc.n	8000f52 <main+0x172>
			  TimeStamp = HAL_GetTick()+5;
 8000f06:	f001 fbd5 	bl	80026b4 <HAL_GetTick>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	3305      	adds	r3, #5
 8000f0e:	4a8d      	ldr	r2, [pc, #564]	; (8001144 <main+0x364>)
 8000f10:	6013      	str	r3, [r2, #0]
			  angle = Average_ADC();
 8000f12:	f000 fe3b 	bl	8001b8c <Average_ADC>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b8b      	ldr	r3, [pc, #556]	; (8001148 <main+0x368>)
 8000f1c:	801a      	strh	r2, [r3, #0]

			  TxBuffer[0] = 69; // header
 8000f1e:	4b8b      	ldr	r3, [pc, #556]	; (800114c <main+0x36c>)
 8000f20:	2245      	movs	r2, #69	; 0x45
 8000f22:	701a      	strb	r2, [r3, #0]
			  TxBuffer[1] = angle & 0xff;
 8000f24:	4b88      	ldr	r3, [pc, #544]	; (8001148 <main+0x368>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b88      	ldr	r3, [pc, #544]	; (800114c <main+0x36c>)
 8000f2c:	705a      	strb	r2, [r3, #1]
			  TxBuffer[2] = (angle & 0xff00) >> 8;
 8000f2e:	4b86      	ldr	r3, [pc, #536]	; (8001148 <main+0x368>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b84      	ldr	r3, [pc, #528]	; (800114c <main+0x36c>)
 8000f3a:	709a      	strb	r2, [r3, #2]
			  TxBuffer[3] = 10; // \n
 8000f3c:	4b83      	ldr	r3, [pc, #524]	; (800114c <main+0x36c>)
 8000f3e:	220a      	movs	r2, #10
 8000f40:	70da      	strb	r2, [r3, #3]

			  HAL_UART_Transmit(&hlpuart1,TxBuffer, 4, 10);
 8000f42:	230a      	movs	r3, #10
 8000f44:	2204      	movs	r2, #4
 8000f46:	4981      	ldr	r1, [pc, #516]	; (800114c <main+0x36c>)
 8000f48:	4872      	ldr	r0, [pc, #456]	; (8001114 <main+0x334>)
 8000f4a:	f006 f9ff 	bl	800734c <HAL_UART_Transmit>

			  setMotor();
 8000f4e:	f000 fe93 	bl	8001c78 <setMotor>
		  }
	  }
	  if(mode == 2){
 8000f52:	4b7b      	ldr	r3, [pc, #492]	; (8001140 <main+0x360>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	f040 8174 	bne.w	8001244 <main+0x464>
		  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8000f5c:	4b70      	ldr	r3, [pc, #448]	; (8001120 <main+0x340>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f62:	4a7b      	ldr	r2, [pc, #492]	; (8001150 <main+0x370>)
 8000f64:	6013      	str	r3, [r2, #0]
		  realdegree = (QEIReadRaw*360)/3071;
 8000f66:	4b7a      	ldr	r3, [pc, #488]	; (8001150 <main+0x370>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	4a78      	ldr	r2, [pc, #480]	; (8001154 <main+0x374>)
 8000f74:	fba2 2303 	umull	r2, r3, r2, r3
 8000f78:	0a9b      	lsrs	r3, r3, #10
 8000f7a:	4a77      	ldr	r2, [pc, #476]	; (8001158 <main+0x378>)
 8000f7c:	6013      	str	r3, [r2, #0]
		  degree = (((QEIReadRaw*360)/3071)*64);
 8000f7e:	4b74      	ldr	r3, [pc, #464]	; (8001150 <main+0x370>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4a72      	ldr	r2, [pc, #456]	; (8001154 <main+0x374>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	0a9b      	lsrs	r3, r3, #10
 8000f92:	019b      	lsls	r3, r3, #6
 8000f94:	4a71      	ldr	r2, [pc, #452]	; (800115c <main+0x37c>)
 8000f96:	6013      	str	r3, [r2, #0]

		  //Call every 0.1 s
		  static uint64_t timestamp =0;
		  int64_t currentTime = micros();
 8000f98:	f000 ff9a 	bl	8001ed0 <micros>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		  if(currentTime > timestamp)
 8000fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fa8:	496d      	ldr	r1, [pc, #436]	; (8001160 <main+0x380>)
 8000faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fae:	4290      	cmp	r0, r2
 8000fb0:	eb71 0303 	sbcs.w	r3, r1, r3
 8000fb4:	d23e      	bcs.n	8001034 <main+0x254>
		  {
			  timestamp =currentTime + 100000;//us
 8000fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fba:	496a      	ldr	r1, [pc, #424]	; (8001164 <main+0x384>)
 8000fbc:	1854      	adds	r4, r2, r1
 8000fbe:	f143 0500 	adc.w	r5, r3, #0
 8000fc2:	4622      	mov	r2, r4
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	4966      	ldr	r1, [pc, #408]	; (8001160 <main+0x380>)
 8000fc8:	e9c1 2300 	strd	r2, r3, [r1]
		 	  QEIEncoderPosVel_Update();
 8000fcc:	f000 ff9c 	bl	8001f08 <QEIEncoderPosVel_Update>
		 	  w = QEIdata.QEIAngularVelocity;
 8000fd0:	4b65      	ldr	r3, [pc, #404]	; (8001168 <main+0x388>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	4a65      	ldr	r2, [pc, #404]	; (800116c <main+0x38c>)
 8000fd6:	6013      	str	r3, [r2, #0]
		 	  rpm = (w *60)/3072;
 8000fd8:	4b64      	ldr	r3, [pc, #400]	; (800116c <main+0x38c>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001170 <main+0x390>
 8000fe2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fe6:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001174 <main+0x394>
 8000fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fee:	4b62      	ldr	r3, [pc, #392]	; (8001178 <main+0x398>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
		 	  rad = rpm*2*M_PI/60;
 8000ff4:	4b60      	ldr	r3, [pc, #384]	; (8001178 <main+0x398>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ffe:	ee17 0a90 	vmov	r0, s15
 8001002:	f7ff fa6d 	bl	80004e0 <__aeabi_f2d>
 8001006:	a33e      	add	r3, pc, #248	; (adr r3, 8001100 <main+0x320>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff fac0 	bl	8000590 <__aeabi_dmul>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4610      	mov	r0, r2
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b57      	ldr	r3, [pc, #348]	; (800117c <main+0x39c>)
 800101e:	f7ff fbe1 	bl	80007e4 <__aeabi_ddiv>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd0b 	bl	8000a44 <__aeabi_d2f>
 800102e:	4603      	mov	r3, r0
 8001030:	4a53      	ldr	r2, [pc, #332]	; (8001180 <main+0x3a0>)
 8001032:	6013      	str	r3, [r2, #0]
		  }
		  position = (realdegree)*M_PI/180;
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <main+0x378>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa2f 	bl	800049c <__aeabi_ui2d>
 800103e:	a330      	add	r3, pc, #192	; (adr r3, 8001100 <main+0x320>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff faa4 	bl	8000590 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <main+0x3a4>)
 8001056:	f7ff fbc5 	bl	80007e4 <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fcef 	bl	8000a44 <__aeabi_d2f>
 8001066:	4603      	mov	r3, r0
 8001068:	4a47      	ldr	r2, [pc, #284]	; (8001188 <main+0x3a8>)
 800106a:	6013      	str	r3, [r2, #0]
		  Wrapselect();
 800106c:	f000 fe64 	bl	8001d38 <Wrapselect>
		  Vfeedback = arm_pid_f32(&PID, Error);
 8001070:	4b46      	ldr	r3, [pc, #280]	; (800118c <main+0x3ac>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <main+0x34c>)
 8001076:	617a      	str	r2, [r7, #20]
 8001078:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	ed93 7a00 	vldr	s14, [r3]
 8001080:	edd7 7a04 	vldr	s15, [r7, #16]
 8001084:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	edd3 6a01 	vldr	s13, [r3, #4]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	edd3 7a03 	vldr	s15, [r3, #12]
 8001094:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001098:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	edd3 6a02 	vldr	s13, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <main+0x3b0>)
 80010d6:	6013      	str	r3, [r2, #0]
		  if (Vfeedback > 5)
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <main+0x3b0>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80010e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	dd55      	ble.n	8001198 <main+0x3b8>
			  Vfeedback = 5;
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <main+0x3b0>)
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <main+0x3b4>)
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e05e      	b.n	80011b2 <main+0x3d2>
 80010f4:	f3af 8000 	nop.w
 80010f8:	00000000 	.word	0x00000000
 80010fc:	40affe00 	.word	0x40affe00
 8001100:	54442d18 	.word	0x54442d18
 8001104:	400921fb 	.word	0x400921fb
 8001108:	20000034 	.word	0x20000034
 800110c:	20000390 	.word	0x20000390
 8001110:	200003e4 	.word	0x200003e4
 8001114:	200001cc 	.word	0x200001cc
 8001118:	200002ac 	.word	0x200002ac
 800111c:	48000400 	.word	0x48000400
 8001120:	200002f8 	.word	0x200002f8
 8001124:	20000344 	.word	0x20000344
 8001128:	20000260 	.word	0x20000260
 800112c:	200003f4 	.word	0x200003f4
 8001130:	322bcc77 	.word	0x322bcc77
 8001134:	200000a0 	.word	0x200000a0
 8001138:	20000480 	.word	0x20000480
 800113c:	2000041c 	.word	0x2000041c
 8001140:	20000000 	.word	0x20000000
 8001144:	200004d0 	.word	0x200004d0
 8001148:	200003e0 	.word	0x200003e0
 800114c:	200003ec 	.word	0x200003ec
 8001150:	20000434 	.word	0x20000434
 8001154:	555c725f 	.word	0x555c725f
 8001158:	2000043c 	.word	0x2000043c
 800115c:	20000438 	.word	0x20000438
 8001160:	200004d8 	.word	0x200004d8
 8001164:	000186a0 	.word	0x000186a0
 8001168:	20000458 	.word	0x20000458
 800116c:	20000448 	.word	0x20000448
 8001170:	42700000 	.word	0x42700000
 8001174:	45400000 	.word	0x45400000
 8001178:	20000440 	.word	0x20000440
 800117c:	404e0000 	.word	0x404e0000
 8001180:	20000444 	.word	0x20000444
 8001184:	40668000 	.word	0x40668000
 8001188:	20000418 	.word	0x20000418
 800118c:	20000430 	.word	0x20000430
 8001190:	20000420 	.word	0x20000420
 8001194:	40a00000 	.word	0x40a00000
		  else if (Vfeedback < -5)
 8001198:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <main+0x5d8>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80011a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	d502      	bpl.n	80011b2 <main+0x3d2>
			  Vfeedback = -5;
 80011ac:	4b82      	ldr	r3, [pc, #520]	; (80013b8 <main+0x5d8>)
 80011ae:	4a83      	ldr	r2, [pc, #524]	; (80013bc <main+0x5dc>)
 80011b0:	601a      	str	r2, [r3, #0]
		  if(Vfeedback > 0){
 80011b2:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <main+0x5d8>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	dd12      	ble.n	80011e8 <main+0x408>
			  PWM1 = Vfeedback*19999/5.0;
 80011c2:	4b7d      	ldr	r3, [pc, #500]	; (80013b8 <main+0x5d8>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80013c0 <main+0x5e0>
 80011cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011d0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80011d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d8:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <main+0x5e4>)
 80011da:	edc3 7a00 	vstr	s15, [r3]
			  PWM2 = 0;
 80011de:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <main+0x5e8>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e019      	b.n	800121c <main+0x43c>
		  }
		  else if(Vfeedback < 0){
 80011e8:	4b73      	ldr	r3, [pc, #460]	; (80013b8 <main+0x5d8>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	d511      	bpl.n	800121c <main+0x43c>
			  PWM1 = 0;
 80011f8:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <main+0x5e4>)
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
			  PWM2 = Vfeedback*-19999/5.0;
 8001200:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <main+0x5d8>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80013cc <main+0x5ec>
 800120a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800120e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001216:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <main+0x5e8>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
		  }
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (int)PWM1);
 800121c:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <main+0x5e4>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <main+0x5f0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	ee17 2a90 	vmov	r2, s15
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (int)PWM2);
 8001230:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <main+0x5e8>)
 8001232:	edd3 7a00 	vldr	s15, [r3]
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <main+0x5f0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	ee17 2a90 	vmov	r2, s15
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
	  }

	  if(mode == 1){
 8001244:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <main+0x5f4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	f47f ae2c 	bne.w	8000ea6 <main+0xc6>
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 800124e:	f001 fa31 	bl	80026b4 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	4b60      	ldr	r3, [pc, #384]	; (80013d8 <main+0x5f8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	f67f ae24 	bls.w	8000ea6 <main+0xc6>
		  {
			  timestamp = HAL_GetTick()+2;
 800125e:	f001 fa29 	bl	80026b4 <HAL_GetTick>
 8001262:	4603      	mov	r3, r0
 8001264:	3302      	adds	r3, #2
 8001266:	4a5c      	ldr	r2, [pc, #368]	; (80013d8 <main+0x5f8>)
 8001268:	6013      	str	r3, [r2, #0]

			  Wrapselect();
 800126a:	f000 fd65 	bl	8001d38 <Wrapselect>
			  Vfeedback = arm_pid_f32(&PID, Error);
 800126e:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <main+0x5fc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a5b      	ldr	r2, [pc, #364]	; (80013e0 <main+0x600>)
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	607b      	str	r3, [r7, #4]
    out = (S->A0 * in) +
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	ed93 7a00 	vldr	s14, [r3]
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	edd3 6a01 	vldr	s13, [r3, #4]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001292:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001296:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	edd3 6a02 	vldr	s13, [r3, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	615a      	str	r2, [r3, #20]
    return (out);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4a39      	ldr	r2, [pc, #228]	; (80013b8 <main+0x5d8>)
 80012d4:	6013      	str	r3, [r2, #0]
			  position = Average_ADC()/4095.0*2*M_PI;
 80012d6:	f000 fc59 	bl	8001b8c <Average_ADC>
 80012da:	4603      	mov	r3, r0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8ed 	bl	80004bc <__aeabi_i2d>
 80012e2:	a32f      	add	r3, pc, #188	; (adr r3, 80013a0 <main+0x5c0>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fa7c 	bl	80007e4 <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	f7fe ff94 	bl	8000224 <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	a328      	add	r3, pc, #160	; (adr r3, 80013a8 <main+0x5c8>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff f941 	bl	8000590 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fb95 	bl	8000a44 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <main+0x604>)
 800131e:	6013      	str	r3, [r2, #0]
			  if (Vfeedback > 12)
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <main+0x5d8>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800132a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	dd03      	ble.n	800133c <main+0x55c>
				  Vfeedback = 12;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <main+0x5d8>)
 8001336:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <main+0x608>)
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e00c      	b.n	8001356 <main+0x576>
			  else if (Vfeedback < -12)
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <main+0x5d8>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	d502      	bpl.n	8001356 <main+0x576>
				  Vfeedback = -12;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <main+0x5d8>)
 8001352:	4a26      	ldr	r2, [pc, #152]	; (80013ec <main+0x60c>)
 8001354:	601a      	str	r2, [r3, #0]
			  PWM = Vfeedback*32767.0/12.0;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <main+0x5d8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8c0 	bl	80004e0 <__aeabi_f2d>
 8001360:	a313      	add	r3, pc, #76	; (adr r3, 80013b0 <main+0x5d0>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff f913 	bl	8000590 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <main+0x610>)
 8001378:	f7ff fa34 	bl	80007e4 <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fb16 	bl	80009b4 <__aeabi_d2iz>
 8001388:	4603      	mov	r3, r0
 800138a:	b21a      	sxth	r2, r3
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <main+0x614>)
 800138e:	801a      	strh	r2, [r3, #0]
			  setMotor();
 8001390:	f000 fc72 	bl	8001c78 <setMotor>
			  a++;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <main+0x618>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <main+0x618>)
 800139c:	6013      	str	r3, [r2, #0]
	  setposition = Average_ADC2()/4095.0*2*M_PI;
 800139e:	e582      	b.n	8000ea6 <main+0xc6>
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40affe00 	.word	0x40affe00
 80013a8:	54442d18 	.word	0x54442d18
 80013ac:	400921fb 	.word	0x400921fb
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40dfffc0 	.word	0x40dfffc0
 80013b8:	20000420 	.word	0x20000420
 80013bc:	c0a00000 	.word	0xc0a00000
 80013c0:	469c3e00 	.word	0x469c3e00
 80013c4:	2000044c 	.word	0x2000044c
 80013c8:	20000450 	.word	0x20000450
 80013cc:	c69c3e00 	.word	0xc69c3e00
 80013d0:	20000260 	.word	0x20000260
 80013d4:	20000000 	.word	0x20000000
 80013d8:	200004e0 	.word	0x200004e0
 80013dc:	20000430 	.word	0x20000430
 80013e0:	200003f4 	.word	0x200003f4
 80013e4:	20000418 	.word	0x20000418
 80013e8:	41400000 	.word	0x41400000
 80013ec:	c1400000 	.word	0xc1400000
 80013f0:	40280000 	.word	0x40280000
 80013f4:	200003f2 	.word	0x200003f2
 80013f8:	20000004 	.word	0x20000004

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2238      	movs	r2, #56	; 0x38
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f008 f8b0 	bl	8009570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800141e:	2000      	movs	r0, #0
 8001420:	f003 fbcc 	bl	8004bbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142e:	2340      	movs	r3, #64	; 0x40
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800143a:	2304      	movs	r3, #4
 800143c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800143e:	2355      	movs	r3, #85	; 0x55
 8001440:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001442:	2302      	movs	r3, #2
 8001444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001446:	2302      	movs	r3, #2
 8001448:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144a:	2302      	movs	r3, #2
 800144c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fc66 	bl	8004d24 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800145e:	f000 fdc9 	bl	8001ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2303      	movs	r3, #3
 8001468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2104      	movs	r1, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f003 ff64 	bl	8005348 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001486:	f000 fdb5 	bl	8001ff4 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3750      	adds	r7, #80	; 0x50
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2220      	movs	r2, #32
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f008 f85f 	bl	8009570 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <MX_ADC1_Init+0xe8>)
 80014b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <MX_ADC1_Init+0xe8>)
 80014bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <MX_ADC1_Init+0xe8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <MX_ADC1_Init+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_ADC1_Init+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <MX_ADC1_Init+0xe8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_ADC1_Init+0xe8>)
 80014dc:	2204      	movs	r2, #4
 80014de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_ADC1_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <MX_ADC1_Init+0xe8>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <MX_ADC1_Init+0xe8>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_ADC1_Init+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_ADC1_Init+0xe8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_ADC1_Init+0xe8>)
 8001502:	2200      	movs	r2, #0
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_ADC1_Init+0xe8>)
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_ADC1_Init+0xe8>)
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_ADC1_Init+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151c:	4817      	ldr	r0, [pc, #92]	; (800157c <MX_ADC1_Init+0xe8>)
 800151e:	f001 fb19 	bl	8002b54 <HAL_ADC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001528:	f000 fd64 	bl	8001ff4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_ADC1_Init+0xe8>)
 8001538:	f002 fc38 	bl	8003dac <HAL_ADCEx_MultiModeConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001542:	f000 fd57 	bl	8001ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_ADC1_Init+0xec>)
 8001548:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154a:	2306      	movs	r3, #6
 800154c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001552:	237f      	movs	r3, #127	; 0x7f
 8001554:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001556:	2304      	movs	r3, #4
 8001558:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_ADC1_Init+0xe8>)
 8001564:	f001 fda4 	bl	80030b0 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800156e:	f000 fd41 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3730      	adds	r7, #48	; 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000034 	.word	0x20000034
 8001580:	04300002 	.word	0x04300002

08001584 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2220      	movs	r2, #32
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f007 ffed 	bl	8009570 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_ADC2_Init+0xc0>)
 8001598:	4a2b      	ldr	r2, [pc, #172]	; (8001648 <MX_ADC2_Init+0xc4>)
 800159a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_ADC2_Init+0xc0>)
 800159e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015be:	2204      	movs	r2, #4
 80015c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_ADC2_Init+0xc0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_ADC2_Init+0xc0>)
 8001600:	f001 faa8 	bl	8002b54 <HAL_ADC_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800160a:	f000 fcf3 	bl	8001ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_ADC2_Init+0xc8>)
 8001610:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001612:	2306      	movs	r3, #6
 8001614:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161a:	237f      	movs	r3, #127	; 0x7f
 800161c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800161e:	2304      	movs	r3, #4
 8001620:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_ADC2_Init+0xc0>)
 800162c:	f001 fd40 	bl	80030b0 <HAL_ADC_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001636:	f000 fcdd 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200000a0 	.word	0x200000a0
 8001648:	50000100 	.word	0x50000100
 800164c:	47520000 	.word	0x47520000

08001650 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 8001656:	4a22      	ldr	r2, [pc, #136]	; (80016e0 <MX_LPUART1_UART_Init+0x90>)
 8001658:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001692:	4812      	ldr	r0, [pc, #72]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 8001694:	f005 fe0a 	bl	80072ac <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800169e:	f000 fca9 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a2:	2100      	movs	r1, #0
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 80016a6:	f007 fe62 	bl	800936e <HAL_UARTEx_SetTxFifoThreshold>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016b0:	f000 fca0 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 80016b8:	f007 fe97 	bl	80093ea <HAL_UARTEx_SetRxFifoThreshold>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016c2:	f000 fc97 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_LPUART1_UART_Init+0x8c>)
 80016c8:	f007 fe18 	bl	80092fc <HAL_UARTEx_DisableFifoMode>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016d2:	f000 fc8f 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001cc 	.word	0x200001cc
 80016e0:	40008000 	.word	0x40008000

080016e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08e      	sub	sp, #56	; 0x38
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <MX_TIM2_Init+0x100>)
 8001718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <MX_TIM2_Init+0x100>)
 8001720:	22a9      	movs	r2, #169	; 0xa9
 8001722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <MX_TIM2_Init+0x100>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_TIM2_Init+0x100>)
 800172c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001730:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <MX_TIM2_Init+0x100>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <MX_TIM2_Init+0x100>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800173e:	4829      	ldr	r0, [pc, #164]	; (80017e4 <MX_TIM2_Init+0x100>)
 8001740:	f004 fa6c 	bl	8005c1c <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800174a:	f000 fc53 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001758:	4619      	mov	r1, r3
 800175a:	4822      	ldr	r0, [pc, #136]	; (80017e4 <MX_TIM2_Init+0x100>)
 800175c:	f004 ff5a 	bl	8006614 <HAL_TIM_ConfigClockSource>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001766:	f000 fc45 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800176a:	481e      	ldr	r0, [pc, #120]	; (80017e4 <MX_TIM2_Init+0x100>)
 800176c:	f004 fb96 	bl	8005e9c <HAL_TIM_PWM_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001776:	f000 fc3d 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4816      	ldr	r0, [pc, #88]	; (80017e4 <MX_TIM2_Init+0x100>)
 800178a:	f005 fcf9 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001794:	f000 fc2e 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001798:	2360      	movs	r3, #96	; 0x60
 800179a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <MX_TIM2_Init+0x100>)
 80017b0:	f004 fe1c 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017ba:	f000 fc1b 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	2204      	movs	r2, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM2_Init+0x100>)
 80017c6:	f004 fe11 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80017d0:	f000 fc10 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM2_Init+0x100>)
 80017d6:	f000 fe23 	bl	8002420 <HAL_TIM_MspPostInit>

}
 80017da:	bf00      	nop
 80017dc:	3738      	adds	r7, #56	; 0x38
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000260 	.word	0x20000260

080017e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001808:	463b      	mov	r3, r7
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <MX_TIM3_Init+0xe8>)
 800181c:	4a2d      	ldr	r2, [pc, #180]	; (80018d4 <MX_TIM3_Init+0xec>)
 800181e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <MX_TIM3_Init+0xe8>)
 8001822:	22a9      	movs	r2, #169	; 0xa9
 8001824:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <MX_TIM3_Init+0xe8>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <MX_TIM3_Init+0xe8>)
 800182e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001832:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001834:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <MX_TIM3_Init+0xe8>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183a:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <MX_TIM3_Init+0xe8>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001840:	4823      	ldr	r0, [pc, #140]	; (80018d0 <MX_TIM3_Init+0xe8>)
 8001842:	f004 f9eb 	bl	8005c1c <HAL_TIM_Base_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800184c:	f000 fbd2 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185a:	4619      	mov	r1, r3
 800185c:	481c      	ldr	r0, [pc, #112]	; (80018d0 <MX_TIM3_Init+0xe8>)
 800185e:	f004 fed9 	bl	8006614 <HAL_TIM_ConfigClockSource>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001868:	f000 fbc4 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800186c:	4818      	ldr	r0, [pc, #96]	; (80018d0 <MX_TIM3_Init+0xe8>)
 800186e:	f004 fb15 	bl	8005e9c <HAL_TIM_PWM_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001878:	f000 fbbc 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4811      	ldr	r0, [pc, #68]	; (80018d0 <MX_TIM3_Init+0xe8>)
 800188c:	f005 fc78 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001896:	f000 fbad 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189a:	2360      	movs	r3, #96	; 0x60
 800189c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <MX_TIM3_Init+0xe8>)
 80018b2:	f004 fd9b 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018bc:	f000 fb9a 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <MX_TIM3_Init+0xe8>)
 80018c2:	f000 fdad 	bl	8002420 <HAL_TIM_MspPostInit>

}
 80018c6:	bf00      	nop
 80018c8:	3738      	adds	r7, #56	; 0x38
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002ac 	.word	0x200002ac
 80018d4:	40000400 	.word	0x40000400

080018d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2224      	movs	r2, #36	; 0x24
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f007 fe42 	bl	8009570 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	463b      	mov	r3, r7
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <MX_TIM4_Init+0xa4>)
 80018f8:	4a21      	ldr	r2, [pc, #132]	; (8001980 <MX_TIM4_Init+0xa8>)
 80018fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <MX_TIM4_Init+0xa4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_TIM4_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64511;
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <MX_TIM4_Init+0xa4>)
 800190a:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800190e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_TIM4_Init+0xa4>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <MX_TIM4_Init+0xa4>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800191c:	2303      	movs	r3, #3
 800191e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001934:	2301      	movs	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4619      	mov	r1, r3
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <MX_TIM4_Init+0xa4>)
 8001948:	f004 fc1c 	bl	8006184 <HAL_TIM_Encoder_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001952:	f000 fb4f 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800195e:	463b      	mov	r3, r7
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <MX_TIM4_Init+0xa4>)
 8001964:	f005 fc0c 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800196e:	f000 fb41 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	3730      	adds	r7, #48	; 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200002f8 	.word	0x200002f8
 8001980:	40000800 	.word	0x40000800

08001984 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <MX_TIM5_Init+0x94>)
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <MX_TIM5_Init+0x98>)
 80019a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <MX_TIM5_Init+0x94>)
 80019aa:	22a9      	movs	r2, #169	; 0xa9
 80019ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MX_TIM5_Init+0x94>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <MX_TIM5_Init+0x94>)
 80019b6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <MX_TIM5_Init+0x94>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <MX_TIM5_Init+0x94>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019c8:	4813      	ldr	r0, [pc, #76]	; (8001a18 <MX_TIM5_Init+0x94>)
 80019ca:	f004 f927 	bl	8005c1c <HAL_TIM_Base_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80019d4:	f000 fb0e 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <MX_TIM5_Init+0x94>)
 80019e6:	f004 fe15 	bl	8006614 <HAL_TIM_ConfigClockSource>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80019f0:	f000 fb00 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_TIM5_Init+0x94>)
 8001a02:	f005 fbbd 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a0c:	f000 faf2 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000344 	.word	0x20000344
 8001a1c:	40000c00 	.word	0x40000c00

08001a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_DMA_Init+0x60>)
 8001a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <MX_DMA_Init+0x60>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6493      	str	r3, [r2, #72]	; 0x48
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_DMA_Init+0x60>)
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <MX_DMA_Init+0x60>)
 8001a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a42:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <MX_DMA_Init+0x60>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6493      	str	r3, [r2, #72]	; 0x48
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <MX_DMA_Init+0x60>)
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	200b      	movs	r0, #11
 8001a5c:	f002 fb89 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a60:	200b      	movs	r0, #11
 8001a62:	f002 fba0 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	200c      	movs	r0, #12
 8001a6c:	f002 fb81 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a70:	200c      	movs	r0, #12
 8001a72:	f002 fb98 	bl	80041a6 <HAL_NVIC_EnableIRQ>

}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a38      	ldr	r2, [pc, #224]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab2:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a2c      	ldr	r2, [pc, #176]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <MX_GPIO_Init+0xfc>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	21a0      	movs	r1, #160	; 0xa0
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b02:	f003 f81f 	bl	8004b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2140      	movs	r1, #64	; 0x40
 8001b0a:	481e      	ldr	r0, [pc, #120]	; (8001b84 <MX_GPIO_Init+0x100>)
 8001b0c:	f003 f81a 	bl	8004b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4818      	ldr	r0, [pc, #96]	; (8001b88 <MX_GPIO_Init+0x104>)
 8001b28:	f002 fe8a 	bl	8004840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b2c:	23a0      	movs	r3, #160	; 0xa0
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f002 fe7b 	bl	8004840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b4a:	2340      	movs	r3, #64	; 0x40
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4808      	ldr	r0, [pc, #32]	; (8001b84 <MX_GPIO_Init+0x100>)
 8001b62:	f002 fe6d 	bl	8004840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2028      	movs	r0, #40	; 0x28
 8001b6c:	f002 fb01 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b70:	2028      	movs	r0, #40	; 0x28
 8001b72:	f002 fb18 	bl	80041a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800

08001b8c <Average_ADC>:

/* USER CODE BEGIN 4 */
uint16_t Average_ADC()
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
	uint16_t average = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i<40; i++){
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	e00a      	b.n	8001bb6 <Average_ADC+0x2a>
		sum+=ADC_RawRead[i];
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <Average_ADC+0x4c>)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<40; i++){
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b27      	cmp	r3, #39	; 0x27
 8001bba:	ddf1      	ble.n	8001ba0 <Average_ADC+0x14>
	}
	average = sum/40;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <Average_ADC+0x50>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	80fb      	strh	r3, [r7, #6]
	return average;
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000390 	.word	0x20000390
 8001bdc:	cccccccd 	.word	0xcccccccd

08001be0 <Average_ADC2>:

uint16_t Average_ADC2()
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
	uint16_t average = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i<40; i++){
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	e00a      	b.n	8001c0a <Average_ADC2+0x2a>
		sum+=ADC_RawRead2[i];
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <Average_ADC2+0x4c>)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<40; i++){
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b27      	cmp	r3, #39	; 0x27
 8001c0e:	ddf1      	ble.n	8001bf4 <Average_ADC2+0x14>
	}
	average = sum/40;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <Average_ADC2+0x50>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	095b      	lsrs	r3, r3, #5
 8001c1a:	80fb      	strh	r3, [r7, #6]
	return average;
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000480 	.word	0x20000480
 8001c30:	cccccccd 	.word	0xcccccccd

08001c34 <HAL_UART_RxCpltCallback>:
	//start UART in Interrupt Mode
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	//interupt
	if(huart == &hlpuart1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_UART_RxCpltCallback+0x38>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d10f      	bne.n	8001c64 <HAL_UART_RxCpltCallback+0x30>
	{
		PWM = RxBuffer[1] | (RxBuffer[2] << 8);
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_UART_RxCpltCallback+0x3c>)
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_UART_RxCpltCallback+0x3c>)
 8001c4c:	789b      	ldrb	r3, [r3, #2]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_UART_RxCpltCallback+0x40>)
 8001c58:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <HAL_UART_RxCpltCallback+0x3c>)
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <HAL_UART_RxCpltCallback+0x38>)
 8001c60:	f005 fc02 	bl	8007468 <HAL_UART_Receive_IT>
	}
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200001cc 	.word	0x200001cc
 8001c70:	200003e4 	.word	0x200003e4
 8001c74:	200003f2 	.word	0x200003f2

08001c78 <setMotor>:

void setMotor()
{
 8001c78:	b598      	push	{r3, r4, r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	if(PWM > 0){
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <setMotor+0xb0>)
 8001c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	dd25      	ble.n	8001cd2 <setMotor+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f002 ff59 	bl	8004b44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	2140      	movs	r1, #64	; 0x40
 8001c96:	4825      	ldr	r0, [pc, #148]	; (8001d2c <setMotor+0xb4>)
 8001c98:	f002 ff54 	bl	8004b44 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*19999/32767.0);
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <setMotor+0xb0>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc05 	bl	80004bc <__aeabi_i2d>
 8001cb2:	a31b      	add	r3, pc, #108	; (adr r3, 8001d20 <setMotor+0xa8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fd94 	bl	80007e4 <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	491b      	ldr	r1, [pc, #108]	; (8001d30 <setMotor+0xb8>)
 8001cc2:	680c      	ldr	r4, [r1, #0]
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe fe9c 	bl	8000a04 <__aeabi_d2uiz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	6363      	str	r3, [r4, #52]	; 0x34
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*(-19999)/32767.0);
	}
}
 8001cd0:	e023      	b.n	8001d1a <setMotor+0xa2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2140      	movs	r1, #64	; 0x40
 8001cd6:	4815      	ldr	r0, [pc, #84]	; (8001d2c <setMotor+0xb4>)
 8001cd8:	f002 ff34 	bl	8004b44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce4:	f002 ff2e 	bl	8004b44 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*(-19999)/32767.0);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <setMotor+0xb0>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <setMotor+0xbc>)
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fbe0 	bl	80004bc <__aeabi_i2d>
 8001cfc:	a308      	add	r3, pc, #32	; (adr r3, 8001d20 <setMotor+0xa8>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fd6f 	bl	80007e4 <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4909      	ldr	r1, [pc, #36]	; (8001d30 <setMotor+0xb8>)
 8001d0c:	680c      	ldr	r4, [r1, #0]
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe fe77 	bl	8000a04 <__aeabi_d2uiz>
 8001d16:	4603      	mov	r3, r0
 8001d18:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001d1a:	bf00      	nop
 8001d1c:	bd98      	pop	{r3, r4, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40dfffc0 	.word	0x40dfffc0
 8001d28:	200003f2 	.word	0x200003f2
 8001d2c:	48000400 	.word	0x48000400
 8001d30:	200002ac 	.word	0x200002ac
 8001d34:	ffffb1e1 	.word	0xffffb1e1

08001d38 <Wrapselect>:

void Wrapselect()
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	ErrorNormal = setposition - position;
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <Wrapselect+0x180>)
 8001d3e:	ed93 7a00 	vldr	s14, [r3]
 8001d42:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <Wrapselect+0x184>)
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4c:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <Wrapselect+0x188>)
 8001d4e:	edc3 7a00 	vstr	s15, [r3]
	ErrorWrapPlus = setposition - (2*M_PI + position);
 8001d52:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <Wrapselect+0x180>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbc2 	bl	80004e0 <__aeabi_f2d>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	460d      	mov	r5, r1
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <Wrapselect+0x184>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbbb 	bl	80004e0 <__aeabi_f2d>
 8001d6a:	a351      	add	r3, pc, #324	; (adr r3, 8001eb0 <Wrapselect+0x178>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fa58 	bl	8000224 <__adddf3>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fa50 	bl	8000220 <__aeabi_dsub>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe fe5c 	bl	8000a44 <__aeabi_d2f>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <Wrapselect+0x18c>)
 8001d90:	6013      	str	r3, [r2, #0]
	ErrorWrapMinus = setposition - (2*M_PI - position);
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <Wrapselect+0x180>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fba2 	bl	80004e0 <__aeabi_f2d>
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	460d      	mov	r5, r1
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <Wrapselect+0x184>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fb9b 	bl	80004e0 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	a140      	add	r1, pc, #256	; (adr r1, 8001eb0 <Wrapselect+0x178>)
 8001db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001db4:	f7fe fa34 	bl	8000220 <__aeabi_dsub>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fa2e 	bl	8000220 <__aeabi_dsub>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fe3a 	bl	8000a44 <__aeabi_d2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <Wrapselect+0x190>)
 8001dd4:	6013      	str	r3, [r2, #0]
	if(fabsf(ErrorNormal) <= fabsf(ErrorWrapPlus) && fabsf(ErrorNormal) <= fabsf(ErrorWrapMinus))
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <Wrapselect+0x188>)
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	eeb0 7ae7 	vabs.f32	s14, s15
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <Wrapselect+0x18c>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eef0 7ae7 	vabs.f32	s15, s15
 8001dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d813      	bhi.n	8001e1c <Wrapselect+0xe4>
 8001df4:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <Wrapselect+0x188>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	eeb0 7ae7 	vabs.f32	s14, s15
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <Wrapselect+0x190>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	eef0 7ae7 	vabs.f32	s15, s15
 8001e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d804      	bhi.n	8001e1c <Wrapselect+0xe4>
	{
		Error = ErrorNormal;
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <Wrapselect+0x188>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <Wrapselect+0x194>)
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e047      	b.n	8001eac <Wrapselect+0x174>
	}
	else if(fabsf(ErrorWrapPlus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapPlus) <= fabsf(ErrorWrapMinus))
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <Wrapselect+0x18c>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <Wrapselect+0x188>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	eef0 7ae7 	vabs.f32	s15, s15
 8001e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d813      	bhi.n	8001e62 <Wrapselect+0x12a>
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <Wrapselect+0x18c>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <Wrapselect+0x190>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	eef0 7ae7 	vabs.f32	s15, s15
 8001e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	d804      	bhi.n	8001e62 <Wrapselect+0x12a>
	{
		Error = ErrorWrapPlus;
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <Wrapselect+0x18c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <Wrapselect+0x194>)
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e024      	b.n	8001eac <Wrapselect+0x174>
	}
	else if(fabsf(ErrorWrapMinus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapMinus) <= fabsf(ErrorWrapPlus))
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <Wrapselect+0x190>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <Wrapselect+0x188>)
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	eef0 7ae7 	vabs.f32	s15, s15
 8001e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d900      	bls.n	8001e82 <Wrapselect+0x14a>
	{
		Error = ErrorWrapMinus;
	}
}
 8001e80:	e014      	b.n	8001eac <Wrapselect+0x174>
	else if(fabsf(ErrorWrapMinus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapMinus) <= fabsf(ErrorWrapPlus))
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <Wrapselect+0x190>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <Wrapselect+0x18c>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	eef0 7ae7 	vabs.f32	s15, s15
 8001e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d900      	bls.n	8001ea2 <Wrapselect+0x16a>
}
 8001ea0:	e004      	b.n	8001eac <Wrapselect+0x174>
		Error = ErrorWrapMinus;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <Wrapselect+0x190>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <Wrapselect+0x194>)
 8001ea8:	6013      	str	r3, [r2, #0]
}
 8001eaa:	e7ff      	b.n	8001eac <Wrapselect+0x174>
 8001eac:	bf00      	nop
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	54442d18 	.word	0x54442d18
 8001eb4:	401921fb 	.word	0x401921fb
 8001eb8:	2000041c 	.word	0x2000041c
 8001ebc:	20000418 	.word	0x20000418
 8001ec0:	20000424 	.word	0x20000424
 8001ec4:	20000428 	.word	0x20000428
 8001ec8:	2000042c 	.word	0x2000042c
 8001ecc:	20000430 	.word	0x20000430

08001ed0 <micros>:
		_micros += UINT32_MAX;
	}
}

uint64_t micros()
{
 8001ed0:	b4b0      	push	{r4, r5, r7}
 8001ed2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <micros+0x2c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2200      	movs	r2, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <micros+0x30>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	1884      	adds	r4, r0, r2
 8001ee8:	eb41 0503 	adc.w	r5, r1, r3
 8001eec:	4622      	mov	r2, r4
 8001eee:	462b      	mov	r3, r5
}
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bcb0      	pop	{r4, r5, r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000344 	.word	0x20000344
 8001f00:	20000478 	.word	0x20000478
 8001f04:	00000000 	.word	0x00000000

08001f08 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8001f0e:	f7ff ffdf 	bl	8001ed0 <micros>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4934      	ldr	r1, [pc, #208]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001f18:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim4);
 8001f1c:	4b33      	ldr	r3, [pc, #204]	; (8001fec <QEIEncoderPosVel_Update+0xe4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	4a31      	ldr	r2, [pc, #196]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001f24:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 3072;
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <QEIEncoderPosVel_Update+0xe8>)
 8001f2c:	fba3 2301 	umull	r2, r3, r3, r1
 8001f30:	0ada      	lsrs	r2, r3, #11
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	029b      	lsls	r3, r3, #10
 8001f3a:	1aca      	subs	r2, r1, r3
 8001f3c:	ee07 2a90 	vmov	s15, r2
 8001f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001f46:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001f4a:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > 32256)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 8001f5c:	dd03      	ble.n	8001f66 <QEIEncoderPosVel_Update+0x5e>
		diffPosition -=64512;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8001f64:	607b      	str	r3, [r7, #4]
	if(diffPosition < -32256)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f513 4ffc 	cmn.w	r3, #32256	; 0x7e00
 8001f6c:	da03      	bge.n	8001f76 <QEIEncoderPosVel_Update+0x6e>
		diffPosition +=64512;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8001f74:	607b      	str	r3, [r7, #4]
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001f78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001f7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f82:	1a84      	subs	r4, r0, r2
 8001f84:	eb61 0503 	sbc.w	r5, r1, r3
 8001f88:	4620      	mov	r0, r4
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	f7fe faca 	bl	8000524 <__aeabi_ul2d>
 8001f90:	a313      	add	r3, pc, #76	; (adr r3, 8001fe0 <QEIEncoderPosVel_Update+0xd8>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fafb 	bl	8000590 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fd4f 	bl	8000a44 <__aeabi_d2f>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fb4:	ed97 7a00 	vldr	s14, [r7]
 8001fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001fbe:	edc3 7a07 	vstr	s15, [r3, #28]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001fc8:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001fcc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fd0:	4905      	ldr	r1, [pc, #20]	; (8001fe8 <QEIEncoderPosVel_Update+0xe0>)
 8001fd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	a0b5ed8d 	.word	0xa0b5ed8d
 8001fe4:	3eb0c6f7 	.word	0x3eb0c6f7
 8001fe8:	20000458 	.word	0x20000458
 8001fec:	200002f8 	.word	0x200002f8
 8001ff0:	aaaaaaab 	.word	0xaaaaaaab

08001ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff8:	b672      	cpsid	i
}
 8001ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <Error_Handler+0x8>
	...

08002000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_MspInit+0x44>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_MspInit+0x44>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6613      	str	r3, [r2, #96]	; 0x60
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_MspInit+0x44>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_MspInit+0x44>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_MspInit+0x44>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6593      	str	r3, [r2, #88]	; 0x58
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_MspInit+0x44>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002036:	f002 fe65 	bl	8004d04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0a0      	sub	sp, #128	; 0x80
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002060:	f107 0318 	add.w	r3, r7, #24
 8002064:	2254      	movs	r2, #84	; 0x54
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f007 fa81 	bl	8009570 <memset>
  if(hadc->Instance==ADC1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002076:	d169      	bne.n	800214c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800207c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800207e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002082:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002084:	f107 0318 	add.w	r3, r7, #24
 8002088:	4618      	mov	r0, r3
 800208a:	f003 fb79 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002094:	f7ff ffae 	bl	8001ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_ADC_MspInit+0x1e8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_ADC_MspInit+0x1e8>)
 80020a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <HAL_ADC_MspInit+0x1e8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10b      	bne.n	80020c2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020aa:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	4a61      	ldr	r2, [pc, #388]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80020b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a5b      	ldr	r2, [pc, #364]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020da:	2301      	movs	r3, #1
 80020dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020de:	2303      	movs	r3, #3
 80020e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f0:	f002 fba6 	bl	8004840 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 80020f6:	4a51      	ldr	r2, [pc, #324]	; (800223c <HAL_ADC_MspInit+0x1f4>)
 80020f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 80020fc:	2205      	movs	r2, #5
 80020fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002100:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002106:	4b4c      	ldr	r3, [pc, #304]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800210c:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002112:	4b49      	ldr	r3, [pc, #292]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 8002114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002118:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 800211c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002120:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002122:	4b45      	ldr	r3, [pc, #276]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 8002124:	2220      	movs	r2, #32
 8002126:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800212e:	4842      	ldr	r0, [pc, #264]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 8002130:	f002 f854 	bl	80041dc <HAL_DMA_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800213a:	f7ff ff5b 	bl	8001ff4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
 8002144:	4a3c      	ldr	r2, [pc, #240]	; (8002238 <HAL_ADC_MspInit+0x1f0>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800214a:	e06d      	b.n	8002228 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <HAL_ADC_MspInit+0x1f8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d168      	bne.n	8002228 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800215c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002160:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fb0a 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8002172:	f7ff ff3f 	bl	8001ff4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <HAL_ADC_MspInit+0x1e8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a2c      	ldr	r2, [pc, #176]	; (8002230 <HAL_ADC_MspInit+0x1e8>)
 800217e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_ADC_MspInit+0x1e8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10b      	bne.n	80021a0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218c:	4a29      	ldr	r2, [pc, #164]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 800218e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	4a23      	ldr	r2, [pc, #140]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_ADC_MspInit+0x1ec>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021b8:	2310      	movs	r3, #16
 80021ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021bc:	2303      	movs	r3, #3
 80021be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ce:	f002 fb37 	bl	8004840 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_ADC_MspInit+0x200>)
 80021d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 80021f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 80021fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 8002202:	2220      	movs	r2, #32
 8002204:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 800220e:	f001 ffe5 	bl	80041dc <HAL_DMA_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8002218:	f7ff feec 	bl	8001ff4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_ADC_MspInit+0x1fc>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002228:	bf00      	nop
 800222a:	3780      	adds	r7, #128	; 0x80
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200004e4 	.word	0x200004e4
 8002234:	40021000 	.word	0x40021000
 8002238:	2000010c 	.word	0x2000010c
 800223c:	40020008 	.word	0x40020008
 8002240:	50000100 	.word	0x50000100
 8002244:	2000016c 	.word	0x2000016c
 8002248:	4002001c 	.word	0x4002001c

0800224c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b09e      	sub	sp, #120	; 0x78
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	2254      	movs	r2, #84	; 0x54
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f007 f97f 	bl	8009570 <memset>
  if(huart->Instance==LPUART1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a23      	ldr	r2, [pc, #140]	; (8002304 <HAL_UART_MspInit+0xb8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d13e      	bne.n	80022fa <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800227c:	2320      	movs	r3, #32
 800227e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002280:	2300      	movs	r3, #0
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fa79 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002294:	f7ff feae 	bl	8001ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_UART_MspInit+0xbc>)
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_UART_MspInit+0xbc>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_UART_MspInit+0xbc>)
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_UART_MspInit+0xbc>)
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_UART_MspInit+0xbc>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_UART_MspInit+0xbc>)
 80022be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80022c8:	230c      	movs	r3, #12
 80022ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80022d8:	230c      	movs	r3, #12
 80022da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022e0:	4619      	mov	r1, r3
 80022e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e6:	f002 faab 	bl	8004840 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	205b      	movs	r0, #91	; 0x5b
 80022f0:	f001 ff3f 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80022f4:	205b      	movs	r0, #91	; 0x5b
 80022f6:	f001 ff56 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3778      	adds	r7, #120	; 0x78
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40008000 	.word	0x40008000
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d10c      	bne.n	8002338 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	4a1a      	ldr	r2, [pc, #104]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6593      	str	r3, [r2, #88]	; 0x58
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002336:	e022      	b.n	800237e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_TIM_Base_MspInit+0x84>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10c      	bne.n	800235c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6593      	str	r3, [r2, #88]	; 0x58
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
}
 800235a:	e010      	b.n	800237e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <HAL_TIM_Base_MspInit+0x88>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10b      	bne.n	800237e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_TIM_Base_MspInit+0x80>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	40000400 	.word	0x40000400
 8002394:	40000c00 	.word	0x40000c00

08002398 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <HAL_TIM_Encoder_MspInit+0x80>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d129      	bne.n	800240e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_TIM_Encoder_MspInit+0x84>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_TIM_Encoder_MspInit+0x84>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6593      	str	r3, [r2, #88]	; 0x58
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_TIM_Encoder_MspInit+0x84>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_TIM_Encoder_MspInit+0x84>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_TIM_Encoder_MspInit+0x84>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_TIM_Encoder_MspInit+0x84>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80023fc:	230a      	movs	r3, #10
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240a:	f002 fa19 	bl	8004840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800240e:	bf00      	nop
 8002410:	3728      	adds	r7, #40	; 0x28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40000800 	.word	0x40000800
 800241c:	40021000 	.word	0x40021000

08002420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002440:	d11e      	bne.n	8002480 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <HAL_TIM_MspPostInit+0xac>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	4a21      	ldr	r2, [pc, #132]	; (80024cc <HAL_TIM_MspPostInit+0xac>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244e:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_TIM_MspPostInit+0xac>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800245a:	f248 0302 	movw	r3, #32770	; 0x8002
 800245e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800246c:	2301      	movs	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247a:	f002 f9e1 	bl	8004840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800247e:	e021      	b.n	80024c4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_TIM_MspPostInit+0xb0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d11c      	bne.n	80024c4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_TIM_MspPostInit+0xac>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <HAL_TIM_MspPostInit+0xac>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_TIM_MspPostInit+0xac>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024a2:	2340      	movs	r3, #64	; 0x40
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024b2:	2302      	movs	r3, #2
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c0:	f002 f9be 	bl	8004840 <HAL_GPIO_Init>
}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40000400 	.word	0x40000400

080024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d8:	e7fe      	b.n	80024d8 <NMI_Handler+0x4>

080024da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <HardFault_Handler+0x4>

080024e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <MemManage_Handler+0x4>

080024e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <BusFault_Handler+0x4>

080024ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <UsageFault_Handler+0x4>

080024f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002520:	f000 f8b6 	bl	8002690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <DMA1_Channel1_IRQHandler+0x10>)
 800252e:	f002 f838 	bl	80045a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000010c 	.word	0x2000010c

0800253c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <DMA1_Channel2_IRQHandler+0x10>)
 8002542:	f002 f82e 	bl	80045a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000016c 	.word	0x2000016c

08002550 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002554:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002558:	f002 fb0c 	bl	8004b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <LPUART1_IRQHandler+0x10>)
 8002566:	f004 ffcb 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200001cc 	.word	0x200001cc

08002574 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <SystemInit+0x20>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <SystemInit+0x20>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800259a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800259c:	f7ff ffea 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a2:	490d      	ldr	r1, [pc, #52]	; (80025d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <LoopForever+0xe>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b8:	4c0a      	ldr	r4, [pc, #40]	; (80025e4 <LoopForever+0x16>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c6:	f006 ffdb 	bl	8009580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ca:	f7fe fc09 	bl	8000de0 <main>

080025ce <LoopForever>:

LoopForever:
    b LoopForever
 80025ce:	e7fe      	b.n	80025ce <LoopForever>
  ldr   r0, =_estack
 80025d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80025dc:	08009630 	.word	0x08009630
  ldr r2, =_sbss
 80025e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80025e4:	200004ec 	.word	0x200004ec

080025e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC1_2_IRQHandler>

080025ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f001 fdb1 	bl	800415c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025fa:	2000      	movs	r0, #0
 80025fc:	f000 f80e 	bl	800261c <HAL_InitTick>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	71fb      	strb	r3, [r7, #7]
 800260a:	e001      	b.n	8002610 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800260c:	f7ff fcf8 	bl	8002000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002610:	79fb      	ldrb	r3, [r7, #7]

}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_InitTick+0x68>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d022      	beq.n	8002676 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_InitTick+0x6c>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_InitTick+0x68>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800263c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fdbc 	bl	80041c2 <HAL_SYSTICK_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	d809      	bhi.n	800266a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002656:	2200      	movs	r2, #0
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	f04f 30ff 	mov.w	r0, #4294967295
 800265e:	f001 fd88 	bl	8004172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_InitTick+0x70>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e007      	b.n	800267a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e004      	b.n	800267a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e001      	b.n	800267a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000010 	.word	0x20000010
 8002688:	20000008 	.word	0x20000008
 800268c:	2000000c 	.word	0x2000000c

08002690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x1c>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_IncTick+0x20>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4413      	add	r3, r2
 800269e:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_IncTick+0x1c>)
 80026a0:	6013      	str	r3, [r2, #0]
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	200004e8 	.word	0x200004e8
 80026b0:	20000010 	.word	0x20000010

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_GetTick+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	200004e8 	.word	0x200004e8

080026cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3360      	adds	r3, #96	; 0x60
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <LL_ADC_SetOffset+0x44>)
 8002756:	4013      	ands	r3, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	4313      	orrs	r3, r2
 8002764:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800276c:	bf00      	nop
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	03fff000 	.word	0x03fff000

0800277c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3360      	adds	r3, #96	; 0x60
 800278a:	461a      	mov	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3360      	adds	r3, #96	; 0x60
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	431a      	orrs	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002808:	bf00      	nop
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3360      	adds	r3, #96	; 0x60
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	431a      	orrs	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	615a      	str	r2, [r3, #20]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002896:	b480      	push	{r7}
 8002898:	b087      	sub	sp, #28
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3330      	adds	r3, #48	; 0x30
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	4413      	add	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	211f      	movs	r1, #31
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	401a      	ands	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	f003 011f 	and.w	r1, r3, #31
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	431a      	orrs	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b087      	sub	sp, #28
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3314      	adds	r3, #20
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	0e5b      	lsrs	r3, r3, #25
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0d1b      	lsrs	r3, r3, #20
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2107      	movs	r1, #7
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	401a      	ands	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	0d1b      	lsrs	r3, r3, #20
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	431a      	orrs	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0318 	and.w	r3, r3, #24
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002968:	40d9      	lsrs	r1, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	400b      	ands	r3, r1
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	431a      	orrs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	0007ffff 	.word	0x0007ffff

0800298c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 031f 	and.w	r3, r3, #31
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6093      	str	r3, [r2, #8]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a30:	d101      	bne.n	8002a36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a80:	f043 0202 	orr.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_IsEnabled+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_IsEnabled+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_IsDisableOngoing+0x18>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_IsDisableOngoing+0x1a>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1a9      	b.n	8002ec2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff fa63 	bl	8002048 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff19 	bl	80029cc <LL_ADC_IsDeepPowerDownEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff feff 	bl	80029a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff34 	bl	8002a1c <LL_ADC_IsInternalRegulatorEnabled>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff18 	bl	80029f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bc4:	4b9c      	ldr	r3, [pc, #624]	; (8002e38 <HAL_ADC_Init+0x2e4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	4a9c      	ldr	r2, [pc, #624]	; (8002e3c <HAL_ADC_Init+0x2e8>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bd8:	e002      	b.n	8002be0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f9      	bne.n	8002bda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff16 	bl	8002a1c <LL_ADC_IsInternalRegulatorEnabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff76 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 8002c1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 8142 	bne.w	8002eb0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 813e 	bne.w	8002eb0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c3c:	f043 0202 	orr.w	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff23 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d141      	bne.n	8002cd8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_Init+0x114>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a77      	ldr	r2, [pc, #476]	; (8002e40 <HAL_ADC_Init+0x2ec>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10f      	bne.n	8002c88 <HAL_ADC_Init+0x134>
 8002c68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c6c:	f7ff ff12 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c70:	4604      	mov	r4, r0
 8002c72:	4873      	ldr	r0, [pc, #460]	; (8002e40 <HAL_ADC_Init+0x2ec>)
 8002c74:	f7ff ff0e 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e012      	b.n	8002cae <HAL_ADC_Init+0x15a>
 8002c88:	486e      	ldr	r0, [pc, #440]	; (8002e44 <HAL_ADC_Init+0x2f0>)
 8002c8a:	f7ff ff03 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	486d      	ldr	r0, [pc, #436]	; (8002e48 <HAL_ADC_Init+0x2f4>)
 8002c92:	f7ff feff 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c96:	4603      	mov	r3, r0
 8002c98:	431c      	orrs	r4, r3
 8002c9a:	486c      	ldr	r0, [pc, #432]	; (8002e4c <HAL_ADC_Init+0x2f8>)
 8002c9c:	f7ff fefa 	bl	8002a94 <LL_ADC_IsEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_Init+0x172>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a5f      	ldr	r2, [pc, #380]	; (8002e40 <HAL_ADC_Init+0x2ec>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_Init+0x176>
 8002cc6:	4a62      	ldr	r2, [pc, #392]	; (8002e50 <HAL_ADC_Init+0x2fc>)
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_Init+0x178>
 8002cca:	4a62      	ldr	r2, [pc, #392]	; (8002e54 <HAL_ADC_Init+0x300>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f7ff fcfa 	bl	80026cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7f5b      	ldrb	r3, [r3, #29]
 8002cdc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ce2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ce8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d106      	bne.n	8002d14 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	045b      	lsls	r3, r3, #17
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <HAL_ADC_Init+0x304>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fee5 	bl	8002b2e <LL_ADC_INJ_IsConversionOngoing>
 8002d64:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d17f      	bne.n	8002e6c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d17c      	bne.n	8002e6c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d76:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d7e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d8e:	f023 0302 	bic.w	r3, r3, #2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	69b9      	ldr	r1, [r7, #24]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d017      	beq.n	8002dd4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002db2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dbc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6911      	ldr	r1, [r2, #16]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002dd2:	e013      	b.n	8002dfc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002de2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d12a      	bne.n	8002e5c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e1c:	4311      	orrs	r1, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	611a      	str	r2, [r3, #16]
 8002e36:	e019      	b.n	8002e6c <HAL_ADC_Init+0x318>
 8002e38:	20000008 	.word	0x20000008
 8002e3c:	053e2d63 	.word	0x053e2d63
 8002e40:	50000100 	.word	0x50000100
 8002e44:	50000400 	.word	0x50000400
 8002e48:	50000500 	.word	0x50000500
 8002e4c:	50000600 	.word	0x50000600
 8002e50:	50000300 	.word	0x50000300
 8002e54:	50000700 	.word	0x50000700
 8002e58:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d10c      	bne.n	8002e8e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f023 010f 	bic.w	r1, r3, #15
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8c:	e007      	b.n	8002e9e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 020f 	bic.w	r2, r2, #15
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eae:	e007      	b.n	8002ec0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd90      	pop	{r4, r7, pc}
 8002eca:	bf00      	nop

08002ecc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee0:	d004      	beq.n	8002eec <HAL_ADC_Start_DMA+0x20>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5a      	ldr	r2, [pc, #360]	; (8003050 <HAL_ADC_Start_DMA+0x184>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_Start_DMA+0x24>
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_ADC_Start_DMA+0x188>)
 8002eee:	e000      	b.n	8002ef2 <HAL_ADC_Start_DMA+0x26>
 8002ef0:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_ADC_Start_DMA+0x18c>)
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fd4a 	bl	800298c <LL_ADC_GetMultimode>
 8002ef8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fe02 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 809b 	bne.w	8003042 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_Start_DMA+0x4e>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e096      	b.n	8003048 <HAL_ADC_Start_DMA+0x17c>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a4d      	ldr	r2, [pc, #308]	; (800305c <HAL_ADC_Start_DMA+0x190>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d008      	beq.n	8002f3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d002      	beq.n	8002f3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	d17a      	bne.n	8003034 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fcf6 	bl	8003930 <ADC_Enable>
 8002f44:	4603      	mov	r3, r0
 8002f46:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d16d      	bne.n	800302a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <HAL_ADC_Start_DMA+0x184>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_ADC_Start_DMA+0xb4>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_ADC_Start_DMA+0x194>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d002      	beq.n	8002f7c <HAL_ADC_Start_DMA+0xb0>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	e003      	b.n	8002f84 <HAL_ADC_Start_DMA+0xb8>
 8002f7c:	4b39      	ldr	r3, [pc, #228]	; (8003064 <HAL_ADC_Start_DMA+0x198>)
 8002f7e:	e001      	b.n	8002f84 <HAL_ADC_Start_DMA+0xb8>
 8002f80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d002      	beq.n	8002f92 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d006      	beq.n	8002fb8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	f023 0206 	bic.w	r2, r3, #6
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	661a      	str	r2, [r3, #96]	; 0x60
 8002fb6:	e002      	b.n	8002fbe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	4a29      	ldr	r2, [pc, #164]	; (8003068 <HAL_ADC_Start_DMA+0x19c>)
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	4a28      	ldr	r2, [pc, #160]	; (800306c <HAL_ADC_Start_DMA+0x1a0>)
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	4a27      	ldr	r2, [pc, #156]	; (8003070 <HAL_ADC_Start_DMA+0x1a4>)
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	221c      	movs	r2, #28
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0210 	orr.w	r2, r2, #16
 8002ff4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3340      	adds	r3, #64	; 0x40
 8003010:	4619      	mov	r1, r3
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f001 f989 	bl	800432c <HAL_DMA_Start_IT>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fd5c 	bl	8002ae0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003028:	e00d      	b.n	8003046 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003032:	e008      	b.n	8003046 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003040:	e001      	b.n	8003046 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003046:	7dfb      	ldrb	r3, [r7, #23]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	50000100 	.word	0x50000100
 8003054:	50000300 	.word	0x50000300
 8003058:	50000700 	.word	0x50000700
 800305c:	50000600 	.word	0x50000600
 8003060:	50000500 	.word	0x50000500
 8003064:	50000400 	.word	0x50000400
 8003068:	08003b1b 	.word	0x08003b1b
 800306c:	08003bf3 	.word	0x08003bf3
 8003070:	08003c0f 	.word	0x08003c0f

08003074 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0b6      	sub	sp, #216	; 0xd8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d102      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x24>
 80030ce:	2302      	movs	r3, #2
 80030d0:	f000 bc13 	b.w	80038fa <HAL_ADC_ConfigChannel+0x84a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fd11 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 83f3 	bne.w	80038d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f7ff fbcb 	bl	8002896 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fcff 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 800310a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fd0b 	bl	8002b2e <LL_ADC_INJ_IsConversionOngoing>
 8003118:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800311c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 81d9 	bne.w	80034d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003126:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 81d4 	bne.w	80034d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003138:	d10f      	bne.n	800315a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	4619      	mov	r1, r3
 8003146:	f7ff fbd2 	bl	80028ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fb79 	bl	800284a <LL_ADC_SetSamplingTimeCommonConfig>
 8003158:	e00e      	b.n	8003178 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6819      	ldr	r1, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	461a      	mov	r2, r3
 8003168:	f7ff fbc1 	bl	80028ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2100      	movs	r1, #0
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fb69 	bl	800284a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	08db      	lsrs	r3, r3, #3
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b04      	cmp	r3, #4
 8003198:	d022      	beq.n	80031e0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6919      	ldr	r1, [r3, #16]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031aa:	f7ff fac3 	bl	8002734 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f7ff fb0f 	bl	80027de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x126>
 80031d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d4:	e000      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x128>
 80031d6:	2300      	movs	r3, #0
 80031d8:	461a      	mov	r2, r3
 80031da:	f7ff fb1b 	bl	8002814 <LL_ADC_SetOffsetSaturation>
 80031de:	e17b      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fac8 	bl	800277c <LL_ADC_GetOffsetChannel>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_ADC_ConfigChannel+0x15c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fabd 	bl	800277c <LL_ADC_GetOffsetChannel>
 8003202:	4603      	mov	r3, r0
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	f003 021f 	and.w	r2, r3, #31
 800320a:	e01e      	b.n	800324a <HAL_ADC_ConfigChannel+0x19a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fab2 	bl	800277c <LL_ADC_GetOffsetChannel>
 8003218:	4603      	mov	r3, r0
 800321a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800322a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800322e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003232:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800323a:	2320      	movs	r3, #32
 800323c:	e004      	b.n	8003248 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800323e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d105      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x1b2>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0e9b      	lsrs	r3, r3, #26
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	e018      	b.n	8003294 <HAL_ADC_ConfigChannel+0x1e4>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800327a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800327e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003286:	2320      	movs	r3, #32
 8003288:	e004      	b.n	8003294 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800328a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003294:	429a      	cmp	r2, r3
 8003296:	d106      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fa81 	bl	80027a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fa65 	bl	800277c <LL_ADC_GetOffsetChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x222>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fa5a 	bl	800277c <LL_ADC_GetOffsetChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	e01e      	b.n	8003310 <HAL_ADC_ConfigChannel+0x260>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fa4f 	bl	800277c <LL_ADC_GetOffsetChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	e004      	b.n	800330e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x278>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	e018      	b.n	800335a <HAL_ADC_ConfigChannel+0x2aa>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800333c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e004      	b.n	800335a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800335a:	429a      	cmp	r2, r3
 800335c:	d106      	bne.n	800336c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	2101      	movs	r1, #1
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fa1e 	bl	80027a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fa02 	bl	800277c <LL_ADC_GetOffsetChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x2e8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2102      	movs	r1, #2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff f9f7 	bl	800277c <LL_ADC_GetOffsetChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	f003 021f 	and.w	r2, r3, #31
 8003396:	e01e      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x326>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f9ec 	bl	800277c <LL_ADC_GetOffsetChannel>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e004      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80033ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x33e>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	0e9b      	lsrs	r3, r3, #26
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	e016      	b.n	800341c <HAL_ADC_ConfigChannel+0x36c>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003400:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800340e:	2320      	movs	r3, #32
 8003410:	e004      	b.n	800341c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800341c:	429a      	cmp	r2, r3
 800341e:	d106      	bne.n	800342e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2200      	movs	r2, #0
 8003426:	2102      	movs	r1, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff f9bd 	bl	80027a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2103      	movs	r1, #3
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff f9a1 	bl	800277c <LL_ADC_GetOffsetChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_ADC_ConfigChannel+0x3aa>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2103      	movs	r1, #3
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff f996 	bl	800277c <LL_ADC_GetOffsetChannel>
 8003450:	4603      	mov	r3, r0
 8003452:	0e9b      	lsrs	r3, r3, #26
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	e017      	b.n	800348a <HAL_ADC_ConfigChannel+0x3da>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2103      	movs	r1, #3
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff f98b 	bl	800277c <LL_ADC_GetOffsetChannel>
 8003466:	4603      	mov	r3, r0
 8003468:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003474:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800347c:	2320      	movs	r3, #32
 800347e:	e003      	b.n	8003488 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x3f2>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	e011      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x416>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e003      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80034be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d106      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2103      	movs	r1, #3
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff f968 	bl	80027a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fad9 	bl	8002a94 <LL_ADC_IsEnabled>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 813d 	bne.w	8003764 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6819      	ldr	r1, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7ff fa24 	bl	8002944 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4aa2      	ldr	r2, [pc, #648]	; (800378c <HAL_ADC_ConfigChannel+0x6dc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	f040 812e 	bne.w	8003764 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x480>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2b09      	cmp	r3, #9
 8003526:	bf94      	ite	ls
 8003528:	2301      	movls	r3, #1
 800352a:	2300      	movhi	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e019      	b.n	8003564 <HAL_ADC_ConfigChannel+0x4b4>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800353e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003540:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e003      	b.n	8003554 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800354c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3301      	adds	r3, #1
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2b09      	cmp	r3, #9
 800355c:	bf94      	ite	ls
 800355e:	2301      	movls	r3, #1
 8003560:	2300      	movhi	r3, #0
 8003562:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003564:	2b00      	cmp	r3, #0
 8003566:	d079      	beq.n	800365c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x4d4>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	3301      	adds	r3, #1
 800357c:	069b      	lsls	r3, r3, #26
 800357e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003582:	e015      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x500>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003594:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800359c:	2320      	movs	r3, #32
 800359e:	e003      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80035a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	069b      	lsls	r3, r3, #26
 80035ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x520>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	3301      	adds	r3, #1
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2101      	movs	r1, #1
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	e017      	b.n	8003600 <HAL_ADC_ConfigChannel+0x550>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80035ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3301      	adds	r3, #1
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2101      	movs	r1, #1
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	ea42 0103 	orr.w	r1, r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x576>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	3301      	adds	r3, #1
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	051b      	lsls	r3, r3, #20
 8003624:	e018      	b.n	8003658 <HAL_ADC_ConfigChannel+0x5a8>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800363e:	2320      	movs	r3, #32
 8003640:	e003      	b.n	800364a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3301      	adds	r3, #1
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003658:	430b      	orrs	r3, r1
 800365a:	e07e      	b.n	800375a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x5c8>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	3301      	adds	r3, #1
 8003670:	069b      	lsls	r3, r3, #26
 8003672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003676:	e015      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x5f4>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003690:	2320      	movs	r3, #32
 8003692:	e003      	b.n	800369c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	3301      	adds	r3, #1
 800369e:	069b      	lsls	r3, r3, #26
 80036a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x614>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	3301      	adds	r3, #1
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2101      	movs	r1, #1
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	e017      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x644>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	61fb      	str	r3, [r7, #28]
  return result;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	e003      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	ea42 0103 	orr.w	r1, r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x670>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	0e9b      	lsrs	r3, r3, #26
 800370a:	3301      	adds	r3, #1
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	3b1e      	subs	r3, #30
 8003718:	051b      	lsls	r3, r3, #20
 800371a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800371e:	e01b      	b.n	8003758 <HAL_ADC_ConfigChannel+0x6a8>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	613b      	str	r3, [r7, #16]
  return result;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003738:	2320      	movs	r3, #32
 800373a:	e003      	b.n	8003744 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	3b1e      	subs	r3, #30
 8003752:	051b      	lsls	r3, r3, #20
 8003754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003758:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800375e:	4619      	mov	r1, r3
 8003760:	f7ff f8c5 	bl	80028ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_ADC_ConfigChannel+0x6e0>)
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80be 	beq.w	80038ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800377a:	d004      	beq.n	8003786 <HAL_ADC_ConfigChannel+0x6d6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_ADC_ConfigChannel+0x6e4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10a      	bne.n	800379c <HAL_ADC_ConfigChannel+0x6ec>
 8003786:	4b04      	ldr	r3, [pc, #16]	; (8003798 <HAL_ADC_ConfigChannel+0x6e8>)
 8003788:	e009      	b.n	800379e <HAL_ADC_ConfigChannel+0x6ee>
 800378a:	bf00      	nop
 800378c:	407f0000 	.word	0x407f0000
 8003790:	80080000 	.word	0x80080000
 8003794:	50000100 	.word	0x50000100
 8003798:	50000300 	.word	0x50000300
 800379c:	4b59      	ldr	r3, [pc, #356]	; (8003904 <HAL_ADC_ConfigChannel+0x854>)
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe ffba 	bl	8002718 <LL_ADC_GetCommonPathInternalCh>
 80037a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_ADC_ConfigChannel+0x858>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_ADC_ConfigChannel+0x70c>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a55      	ldr	r2, [pc, #340]	; (800390c <HAL_ADC_ConfigChannel+0x85c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d13a      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d134      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d0:	d005      	beq.n	80037de <HAL_ADC_ConfigChannel+0x72e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <HAL_ADC_ConfigChannel+0x860>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	f040 8085 	bne.w	80038e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e6:	d004      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x742>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a49      	ldr	r2, [pc, #292]	; (8003914 <HAL_ADC_ConfigChannel+0x864>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x746>
 80037f2:	4a49      	ldr	r2, [pc, #292]	; (8003918 <HAL_ADC_ConfigChannel+0x868>)
 80037f4:	e000      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x748>
 80037f6:	4a43      	ldr	r2, [pc, #268]	; (8003904 <HAL_ADC_ConfigChannel+0x854>)
 80037f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f7fe ff75 	bl	80026f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003808:	4b44      	ldr	r3, [pc, #272]	; (800391c <HAL_ADC_ConfigChannel+0x86c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	4a44      	ldr	r2, [pc, #272]	; (8003920 <HAL_ADC_ConfigChannel+0x870>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003822:	e002      	b.n	800382a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3b01      	subs	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f9      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003830:	e05a      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a3b      	ldr	r2, [pc, #236]	; (8003924 <HAL_ADC_ConfigChannel+0x874>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d125      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800383c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11f      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <HAL_ADC_ConfigChannel+0x864>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d104      	bne.n	800385c <HAL_ADC_ConfigChannel+0x7ac>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a34      	ldr	r2, [pc, #208]	; (8003928 <HAL_ADC_ConfigChannel+0x878>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d047      	beq.n	80038ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003864:	d004      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x7c0>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2a      	ldr	r2, [pc, #168]	; (8003914 <HAL_ADC_ConfigChannel+0x864>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x7c4>
 8003870:	4a29      	ldr	r2, [pc, #164]	; (8003918 <HAL_ADC_ConfigChannel+0x868>)
 8003872:	e000      	b.n	8003876 <HAL_ADC_ConfigChannel+0x7c6>
 8003874:	4a23      	ldr	r2, [pc, #140]	; (8003904 <HAL_ADC_ConfigChannel+0x854>)
 8003876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7fe ff36 	bl	80026f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003886:	e031      	b.n	80038ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a27      	ldr	r2, [pc, #156]	; (800392c <HAL_ADC_ConfigChannel+0x87c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d12d      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d127      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_ADC_ConfigChannel+0x864>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d022      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b0:	d004      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x80c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_ADC_ConfigChannel+0x864>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x810>
 80038bc:	4a16      	ldr	r2, [pc, #88]	; (8003918 <HAL_ADC_ConfigChannel+0x868>)
 80038be:	e000      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x812>
 80038c0:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_ADC_ConfigChannel+0x854>)
 80038c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f7fe ff10 	bl	80026f2 <LL_ADC_SetCommonPathInternalCh>
 80038d2:	e00c      	b.n	80038ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80038e6:	e002      	b.n	80038ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e8:	bf00      	nop
 80038ea:	e000      	b.n	80038ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	37d8      	adds	r7, #216	; 0xd8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	50000700 	.word	0x50000700
 8003908:	c3210000 	.word	0xc3210000
 800390c:	90c00010 	.word	0x90c00010
 8003910:	50000600 	.word	0x50000600
 8003914:	50000100 	.word	0x50000100
 8003918:	50000300 	.word	0x50000300
 800391c:	20000008 	.word	0x20000008
 8003920:	053e2d63 	.word	0x053e2d63
 8003924:	c7520000 	.word	0xc7520000
 8003928:	50000500 	.word	0x50000500
 800392c:	cb840000 	.word	0xcb840000

08003930 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff f8a7 	bl	8002a94 <LL_ADC_IsEnabled>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d176      	bne.n	8003a3a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	4b3c      	ldr	r3, [pc, #240]	; (8003a44 <ADC_Enable+0x114>)
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00d      	beq.n	8003976 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f043 0210 	orr.w	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e062      	b.n	8003a3c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f862 	bl	8002a44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003988:	d004      	beq.n	8003994 <ADC_Enable+0x64>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2e      	ldr	r2, [pc, #184]	; (8003a48 <ADC_Enable+0x118>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d101      	bne.n	8003998 <ADC_Enable+0x68>
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <ADC_Enable+0x11c>)
 8003996:	e000      	b.n	800399a <ADC_Enable+0x6a>
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <ADC_Enable+0x120>)
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe febc 	bl	8002718 <LL_ADC_GetCommonPathInternalCh>
 80039a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d013      	beq.n	80039d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039aa:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <ADC_Enable+0x124>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <ADC_Enable+0x128>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039c4:	e002      	b.n	80039cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f9      	bne.n	80039c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039d2:	f7fe fe6f 	bl	80026b4 <HAL_GetTick>
 80039d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039d8:	e028      	b.n	8003a2c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff f858 	bl	8002a94 <LL_ADC_IsEnabled>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f828 	bl	8002a44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039f4:	f7fe fe5e 	bl	80026b4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d914      	bls.n	8003a2c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d00d      	beq.n	8003a2c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	f043 0210 	orr.w	r2, r3, #16
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a20:	f043 0201 	orr.w	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e007      	b.n	8003a3c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d1cf      	bne.n	80039da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	8000003f 	.word	0x8000003f
 8003a48:	50000100 	.word	0x50000100
 8003a4c:	50000300 	.word	0x50000300
 8003a50:	50000700 	.word	0x50000700
 8003a54:	20000008 	.word	0x20000008
 8003a58:	053e2d63 	.word	0x053e2d63

08003a5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff f826 	bl	8002aba <LL_ADC_IsDisableOngoing>
 8003a6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff f80d 	bl	8002a94 <LL_ADC_IsEnabled>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d047      	beq.n	8003b10 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d144      	bne.n	8003b10 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030d 	and.w	r3, r3, #13
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10c      	bne.n	8003aae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe ffe7 	bl	8002a6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aa6:	f7fe fe05 	bl	80026b4 <HAL_GetTick>
 8003aaa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aac:	e029      	b.n	8003b02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	f043 0210 	orr.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e023      	b.n	8003b12 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aca:	f7fe fdf3 	bl	80026b4 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d914      	bls.n	8003b02 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1dc      	bne.n	8003aca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d14b      	bne.n	8003bcc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d021      	beq.n	8003b92 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fe8c 	bl	8002870 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d032      	beq.n	8003bc4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d12b      	bne.n	8003bc4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11f      	bne.n	8003bc4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b90:	e018      	b.n	8003bc4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d111      	bne.n	8003bc4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff fa55 	bl	8003074 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bca:	e00e      	b.n	8003bea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff fa5f 	bl	800309c <HAL_ADC_ErrorCallback>
}
 8003bde:	e004      	b.n	8003bea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff fa41 	bl	8003088 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff fa31 	bl	800309c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <LL_ADC_IsEnabled>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <LL_ADC_IsEnabled+0x18>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <LL_ADC_IsEnabled+0x1a>
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_StartCalibration>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003c7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_ADC_IsCalibrationOnGoing>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cae:	d101      	bne.n	8003cb4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d101      	bne.n	8003cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e04d      	b.n	8003da0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fea5 	bl	8003a5c <ADC_Disable>
 8003d12:	4603      	mov	r3, r0
 8003d14:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d136      	bne.n	8003d8a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d24:	f023 0302 	bic.w	r3, r3, #2
 8003d28:	f043 0202 	orr.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff96 	bl	8003c68 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d3c:	e014      	b.n	8003d68 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d90d      	bls.n	8003d68 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	f023 0312 	bic.w	r3, r3, #18
 8003d54:	f043 0210 	orr.w	r2, r3, #16
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e01b      	b.n	8003da0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff94 	bl	8003c9a <LL_ADC_IsCalibrationOnGoing>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e2      	bne.n	8003d3e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	f023 0303 	bic.w	r3, r3, #3
 8003d80:	f043 0201 	orr.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d88:	e005      	b.n	8003d96 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	f043 0210 	orr.w	r2, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	0004de01 	.word	0x0004de01

08003dac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b0a1      	sub	sp, #132	; 0x84
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e0e7      	b.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de2:	d102      	bne.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003de4:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	e009      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d102      	bne.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003df4:	4b6d      	ldr	r3, [pc, #436]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	e001      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	f043 0220 	orr.w	r2, r3, #32
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0be      	b.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ff4f 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8003e24:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff49 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 80a0 	bne.w	8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 809c 	bne.w	8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e48:	d004      	beq.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a55      	ldr	r2, [pc, #340]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d101      	bne.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e54:	4b56      	ldr	r3, [pc, #344]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e56:	e000      	b.n	8003e5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e58:	4b56      	ldr	r3, [pc, #344]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003e5a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d04b      	beq.n	8003efc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e76:	035b      	lsls	r3, r3, #13
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e88:	d004      	beq.n	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a45      	ldr	r2, [pc, #276]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10f      	bne.n	8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e98:	f7ff fed3 	bl	8003c42 <LL_ADC_IsEnabled>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	4841      	ldr	r0, [pc, #260]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea0:	f7ff fecf 	bl	8003c42 <LL_ADC_IsEnabled>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4323      	orrs	r3, r4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	e012      	b.n	8003eda <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003eb4:	483c      	ldr	r0, [pc, #240]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003eb6:	f7ff fec4 	bl	8003c42 <LL_ADC_IsEnabled>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	483b      	ldr	r0, [pc, #236]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ebe:	f7ff fec0 	bl	8003c42 <LL_ADC_IsEnabled>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	431c      	orrs	r4, r3
 8003ec6:	483c      	ldr	r0, [pc, #240]	; (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ec8:	f7ff febb 	bl	8003c42 <LL_ADC_IsEnabled>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4323      	orrs	r3, r4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d056      	beq.n	8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ee6:	f023 030f 	bic.w	r3, r3, #15
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	6811      	ldr	r1, [r2, #0]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	6892      	ldr	r2, [r2, #8]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003efa:	e047      	b.n	8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f10:	d004      	beq.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10f      	bne.n	8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003f1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f20:	f7ff fe8f 	bl	8003c42 <LL_ADC_IsEnabled>
 8003f24:	4604      	mov	r4, r0
 8003f26:	481f      	ldr	r0, [pc, #124]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f28:	f7ff fe8b 	bl	8003c42 <LL_ADC_IsEnabled>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4323      	orrs	r3, r4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e012      	b.n	8003f62 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f3c:	481a      	ldr	r0, [pc, #104]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f3e:	f7ff fe80 	bl	8003c42 <LL_ADC_IsEnabled>
 8003f42:	4604      	mov	r4, r0
 8003f44:	4819      	ldr	r0, [pc, #100]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f46:	f7ff fe7c 	bl	8003c42 <LL_ADC_IsEnabled>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	431c      	orrs	r4, r3
 8003f4e:	481a      	ldr	r0, [pc, #104]	; (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f50:	f7ff fe77 	bl	8003c42 <LL_ADC_IsEnabled>
 8003f54:	4603      	mov	r3, r0
 8003f56:	4323      	orrs	r3, r4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d012      	beq.n	8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f6e:	f023 030f 	bic.w	r3, r3, #15
 8003f72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f74:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f76:	e009      	b.n	8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	f043 0220 	orr.w	r2, r3, #32
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f8a:	e000      	b.n	8003f8e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3784      	adds	r7, #132	; 0x84
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	50000100 	.word	0x50000100
 8003fa8:	50000400 	.word	0x50000400
 8003fac:	50000500 	.word	0x50000500
 8003fb0:	50000300 	.word	0x50000300
 8003fb4:	50000700 	.word	0x50000700
 8003fb8:	50000600 	.word	0x50000600

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fee:	4a04      	ldr	r2, [pc, #16]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	60d3      	str	r3, [r2, #12]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004128:	d301      	bcc.n	800412e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800412a:	2301      	movs	r3, #1
 800412c:	e00f      	b.n	800414e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <SysTick_Config+0x40>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3b01      	subs	r3, #1
 8004134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004136:	210f      	movs	r1, #15
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	f7ff ff8e 	bl	800405c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <SysTick_Config+0x40>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <SysTick_Config+0x40>)
 8004148:	2207      	movs	r2, #7
 800414a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	e000e010 	.word	0xe000e010

0800415c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff29 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	4603      	mov	r3, r0
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004180:	f7ff ff40 	bl	8004004 <__NVIC_GetPriorityGrouping>
 8004184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ff90 	bl	80040b0 <NVIC_EncodePriority>
 8004190:	4602      	mov	r2, r0
 8004192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff5f 	bl	800405c <__NVIC_SetPriority>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff33 	bl	8004020 <__NVIC_EnableIRQ>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ffa4 	bl	8004118 <SysTick_Config>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e08d      	b.n	800430a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b47      	ldr	r3, [pc, #284]	; (8004314 <HAL_DMA_Init+0x138>)
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d80f      	bhi.n	800421a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	4b45      	ldr	r3, [pc, #276]	; (8004318 <HAL_DMA_Init+0x13c>)
 8004202:	4413      	add	r3, r2
 8004204:	4a45      	ldr	r2, [pc, #276]	; (800431c <HAL_DMA_Init+0x140>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	009a      	lsls	r2, r3, #2
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a42      	ldr	r2, [pc, #264]	; (8004320 <HAL_DMA_Init+0x144>)
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
 8004218:	e00e      	b.n	8004238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	4b40      	ldr	r3, [pc, #256]	; (8004324 <HAL_DMA_Init+0x148>)
 8004222:	4413      	add	r3, r2
 8004224:	4a3d      	ldr	r2, [pc, #244]	; (800431c <HAL_DMA_Init+0x140>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	009a      	lsls	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <HAL_DMA_Init+0x14c>)
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800425c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa76 	bl	800477c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004298:	d102      	bne.n	80042a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d010      	beq.n	80042e0 <HAL_DMA_Init+0x104>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d80c      	bhi.n	80042e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa96 	bl	80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e008      	b.n	80042f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40020407 	.word	0x40020407
 8004318:	bffdfff8 	.word	0xbffdfff8
 800431c:	cccccccd 	.word	0xcccccccd
 8004320:	40020000 	.word	0x40020000
 8004324:	bffdfbf8 	.word	0xbffdfbf8
 8004328:	40020400 	.word	0x40020400

0800432c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_DMA_Start_IT+0x20>
 8004348:	2302      	movs	r3, #2
 800434a:	e066      	b.n	800441a <HAL_DMA_Start_IT+0xee>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d155      	bne.n	800440c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f9bb 	bl	8004700 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 020e 	orr.w	r2, r2, #14
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e00f      	b.n	80043c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 020a 	orr.w	r2, r2, #10
 80043c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	e005      	b.n	8004418 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004414:	2302      	movs	r3, #2
 8004416:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004418:	7dfb      	ldrb	r3, [r7, #23]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d005      	beq.n	8004446 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2204      	movs	r2, #4
 800443e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e037      	b.n	80044b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 020e 	bic.w	r2, r2, #14
 8004454:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004464:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	f003 021f 	and.w	r2, r3, #31
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004492:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d00d      	beq.n	8004508 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2204      	movs	r2, #4
 80044f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
 8004506:	e047      	b.n	8004598 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 020e 	bic.w	r2, r2, #14
 8004516:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	2101      	movs	r1, #1
 8004546:	fa01 f202 	lsl.w	r2, r1, r2
 800454a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004554:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800456c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004576:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
    }
  }
  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	2204      	movs	r2, #4
 80045c4:	409a      	lsls	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d026      	beq.n	800461c <HAL_DMA_IRQHandler+0x7a>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d021      	beq.n	800461c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0204 	bic.w	r2, r2, #4
 80045f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f003 021f 	and.w	r2, r3, #31
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2104      	movs	r1, #4
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	2b00      	cmp	r3, #0
 8004610:	d071      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800461a:	e06c      	b.n	80046f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2202      	movs	r2, #2
 8004626:	409a      	lsls	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02e      	beq.n	800468e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d029      	beq.n	800468e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 020a 	bic.w	r2, r2, #10
 8004656:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	f003 021f 	and.w	r2, r3, #31
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	2102      	movs	r1, #2
 800466e:	fa01 f202 	lsl.w	r2, r1, r2
 8004672:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d038      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800468c:	e033      	b.n	80046f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	2208      	movs	r2, #8
 8004698:	409a      	lsls	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d02a      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d025      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 020e 	bic.w	r2, r2, #14
 80046ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2101      	movs	r1, #1
 80046ca:	fa01 f202 	lsl.w	r2, r1, r2
 80046ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
}
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004716:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004728:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	f003 021f 	and.w	r2, r3, #31
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2101      	movs	r1, #1
 8004738:	fa01 f202 	lsl.w	r2, r1, r2
 800473c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b10      	cmp	r3, #16
 800474c:	d108      	bne.n	8004760 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800475e:	e007      	b.n	8004770 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800478c:	429a      	cmp	r2, r3
 800478e:	d802      	bhi.n	8004796 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004790:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e001      	b.n	800479a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004796:	4b15      	ldr	r3, [pc, #84]	; (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004798:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3b08      	subs	r3, #8
 80047a6:	4a12      	ldr	r2, [pc, #72]	; (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	009a      	lsls	r2, r3, #2
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2201      	movs	r2, #1
 80047d0:	409a      	lsls	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40020407 	.word	0x40020407
 80047e8:	40020800 	.word	0x40020800
 80047ec:	40020820 	.word	0x40020820
 80047f0:	cccccccd 	.word	0xcccccccd
 80047f4:	40020880 	.word	0x40020880

080047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	461a      	mov	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a08      	ldr	r2, [pc, #32]	; (800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800481a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2201      	movs	r2, #1
 8004826:	409a      	lsls	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	1000823f 	.word	0x1000823f
 800483c:	40020940 	.word	0x40020940

08004840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800484e:	e15a      	b.n	8004b06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 814c 	beq.w	8004b00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d005      	beq.n	8004880 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800487c:	2b02      	cmp	r3, #2
 800487e:	d130      	bne.n	80048e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	2203      	movs	r2, #3
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048b6:	2201      	movs	r2, #1
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	f003 0201 	and.w	r2, r3, #1
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d017      	beq.n	800491e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	2203      	movs	r2, #3
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4013      	ands	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d123      	bne.n	8004972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	08da      	lsrs	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3208      	adds	r2, #8
 8004932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	220f      	movs	r2, #15
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	08da      	lsrs	r2, r3, #3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3208      	adds	r2, #8
 800496c:	6939      	ldr	r1, [r7, #16]
 800496e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	2203      	movs	r2, #3
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0203 	and.w	r2, r3, #3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80a6 	beq.w	8004b00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b4:	4b5b      	ldr	r3, [pc, #364]	; (8004b24 <HAL_GPIO_Init+0x2e4>)
 80049b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b8:	4a5a      	ldr	r2, [pc, #360]	; (8004b24 <HAL_GPIO_Init+0x2e4>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	6613      	str	r3, [r2, #96]	; 0x60
 80049c0:	4b58      	ldr	r3, [pc, #352]	; (8004b24 <HAL_GPIO_Init+0x2e4>)
 80049c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049cc:	4a56      	ldr	r2, [pc, #344]	; (8004b28 <HAL_GPIO_Init+0x2e8>)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	089b      	lsrs	r3, r3, #2
 80049d2:	3302      	adds	r3, #2
 80049d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	220f      	movs	r2, #15
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4013      	ands	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049f6:	d01f      	beq.n	8004a38 <HAL_GPIO_Init+0x1f8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a4c      	ldr	r2, [pc, #304]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d019      	beq.n	8004a34 <HAL_GPIO_Init+0x1f4>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a4b      	ldr	r2, [pc, #300]	; (8004b30 <HAL_GPIO_Init+0x2f0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_GPIO_Init+0x1f0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <HAL_GPIO_Init+0x2f4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00d      	beq.n	8004a2c <HAL_GPIO_Init+0x1ec>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a49      	ldr	r2, [pc, #292]	; (8004b38 <HAL_GPIO_Init+0x2f8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <HAL_GPIO_Init+0x1e8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a48      	ldr	r2, [pc, #288]	; (8004b3c <HAL_GPIO_Init+0x2fc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_GPIO_Init+0x1e4>
 8004a20:	2305      	movs	r3, #5
 8004a22:	e00a      	b.n	8004a3a <HAL_GPIO_Init+0x1fa>
 8004a24:	2306      	movs	r3, #6
 8004a26:	e008      	b.n	8004a3a <HAL_GPIO_Init+0x1fa>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	e006      	b.n	8004a3a <HAL_GPIO_Init+0x1fa>
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e004      	b.n	8004a3a <HAL_GPIO_Init+0x1fa>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e002      	b.n	8004a3a <HAL_GPIO_Init+0x1fa>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_GPIO_Init+0x1fa>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	f002 0203 	and.w	r2, r2, #3
 8004a40:	0092      	lsls	r2, r2, #2
 8004a42:	4093      	lsls	r3, r2
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4a:	4937      	ldr	r1, [pc, #220]	; (8004b28 <HAL_GPIO_Init+0x2e8>)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	3302      	adds	r3, #2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a58:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <HAL_GPIO_Init+0x300>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a7c:	4a30      	ldr	r2, [pc, #192]	; (8004b40 <HAL_GPIO_Init+0x300>)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a82:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <HAL_GPIO_Init+0x300>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004aa6:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <HAL_GPIO_Init+0x300>)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_GPIO_Init+0x300>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ad0:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_GPIO_Init+0x300>)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ad6:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <HAL_GPIO_Init+0x300>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004afa:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <HAL_GPIO_Init+0x300>)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	3301      	adds	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f47f ae9d 	bne.w	8004850 <HAL_GPIO_Init+0x10>
  }
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40010000 	.word	0x40010000
 8004b2c:	48000400 	.word	0x48000400
 8004b30:	48000800 	.word	0x48000800
 8004b34:	48000c00 	.word	0x48000c00
 8004b38:	48001000 	.word	0x48001000
 8004b3c:	48001400 	.word	0x48001400
 8004b40:	40010400 	.word	0x40010400

08004b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
 8004b50:	4613      	mov	r3, r2
 8004b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b54:	787b      	ldrb	r3, [r7, #1]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b5a:	887a      	ldrh	r2, [r7, #2]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b60:	e002      	b.n	8004b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b62:	887a      	ldrh	r2, [r7, #2]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d006      	beq.n	8004b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b8a:	4a05      	ldr	r2, [pc, #20]	; (8004ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f806 	bl	8004ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40010400 	.word	0x40010400

08004ba4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d141      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bca:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd6:	d131      	bne.n	8004c3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bd8:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bde:	4a46      	ldr	r2, [pc, #280]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004be8:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bf0:	4a41      	ldr	r2, [pc, #260]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bf8:	4b40      	ldr	r3, [pc, #256]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2232      	movs	r2, #50	; 0x32
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	4a3f      	ldr	r2, [pc, #252]	; (8004d00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	0c9b      	lsrs	r3, r3, #18
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c0e:	e002      	b.n	8004c16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c16:	4b38      	ldr	r3, [pc, #224]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d102      	bne.n	8004c2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f2      	bne.n	8004c10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c2a:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c36:	d158      	bne.n	8004cea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e057      	b.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c3c:	4b2e      	ldr	r3, [pc, #184]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c42:	4a2d      	ldr	r2, [pc, #180]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c4c:	e04d      	b.n	8004cea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c54:	d141      	bne.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	d131      	bne.n	8004cc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c6a:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c74:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c7c:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2232      	movs	r2, #50	; 0x32
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	0c9b      	lsrs	r3, r3, #18
 8004c96:	3301      	adds	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c9a:	e002      	b.n	8004ca2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cae:	d102      	bne.n	8004cb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f2      	bne.n	8004c9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc2:	d112      	bne.n	8004cea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e011      	b.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cce:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cd8:	e007      	b.n	8004cea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ce2:	4a05      	ldr	r2, [pc, #20]	; (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ce8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	20000008 	.word	0x20000008
 8004d00:	431bde83 	.word	0x431bde83

08004d04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d12:	6093      	str	r3, [r2, #8]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40007000 	.word	0x40007000

08004d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e2fe      	b.n	8005334 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d075      	beq.n	8004e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d42:	4b97      	ldr	r3, [pc, #604]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d4c:	4b94      	ldr	r3, [pc, #592]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_OscConfig+0x3e>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d002      	beq.n	8004d68 <HAL_RCC_OscConfig+0x44>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d10b      	bne.n	8004d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	4b8d      	ldr	r3, [pc, #564]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05b      	beq.n	8004e2c <HAL_RCC_OscConfig+0x108>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d157      	bne.n	8004e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e2d9      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d106      	bne.n	8004d98 <HAL_RCC_OscConfig+0x74>
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a84      	ldr	r2, [pc, #528]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e01d      	b.n	8004dd4 <HAL_RCC_OscConfig+0xb0>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x98>
 8004da2:	4b7f      	ldr	r3, [pc, #508]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a7e      	ldr	r2, [pc, #504]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b7c      	ldr	r3, [pc, #496]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7b      	ldr	r2, [pc, #492]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0xb0>
 8004dbc:	4b78      	ldr	r3, [pc, #480]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a77      	ldr	r2, [pc, #476]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	4b75      	ldr	r3, [pc, #468]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a74      	ldr	r2, [pc, #464]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d013      	beq.n	8004e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fd fc6a 	bl	80026b4 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de4:	f7fd fc66 	bl	80026b4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b64      	cmp	r3, #100	; 0x64
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e29e      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004df6:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0xc0>
 8004e02:	e014      	b.n	8004e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fd fc56 	bl	80026b4 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7fd fc52 	bl	80026b4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e28a      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e1e:	4b60      	ldr	r3, [pc, #384]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0xe8>
 8004e2a:	e000      	b.n	8004e2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d075      	beq.n	8004f26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3a:	4b59      	ldr	r3, [pc, #356]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e44:	4b56      	ldr	r3, [pc, #344]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b0c      	cmp	r3, #12
 8004e52:	d102      	bne.n	8004e5a <HAL_RCC_OscConfig+0x136>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d002      	beq.n	8004e60 <HAL_RCC_OscConfig+0x13c>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d11f      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e60:	4b4f      	ldr	r3, [pc, #316]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_OscConfig+0x154>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e25d      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e78:	4b49      	ldr	r3, [pc, #292]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	4946      	ldr	r1, [pc, #280]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e8c:	4b45      	ldr	r3, [pc, #276]	; (8004fa4 <HAL_RCC_OscConfig+0x280>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fd fbc3 	bl	800261c <HAL_InitTick>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d043      	beq.n	8004f24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e249      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d023      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea8:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a3c      	ldr	r2, [pc, #240]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd fbfe 	bl	80026b4 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebc:	f7fd fbfa 	bl	80026b4 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e232      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ece:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eda:	4b31      	ldr	r3, [pc, #196]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	492d      	ldr	r1, [pc, #180]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	604b      	str	r3, [r1, #4]
 8004eee:	e01a      	b.n	8004f26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd fbda 	bl	80026b4 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f04:	f7fd fbd6 	bl	80026b4 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e20e      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f16:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x1e0>
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d041      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01c      	beq.n	8004f74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3a:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4a:	f7fd fbb3 	bl	80026b4 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f52:	f7fd fbaf 	bl	80026b4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1e7      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f64:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ef      	beq.n	8004f52 <HAL_RCC_OscConfig+0x22e>
 8004f72:	e020      	b.n	8004fb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <HAL_RCC_OscConfig+0x27c>)
 8004f7c:	f023 0301 	bic.w	r3, r3, #1
 8004f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7fd fb96 	bl	80026b4 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f8a:	e00d      	b.n	8004fa8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8c:	f7fd fb92 	bl	80026b4 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d906      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e1ca      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fa8:	4b8c      	ldr	r3, [pc, #560]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1ea      	bne.n	8004f8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80a6 	beq.w	8005110 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fc8:	4b84      	ldr	r3, [pc, #528]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x2b4>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x2b6>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	4b7f      	ldr	r3, [pc, #508]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	4a7e      	ldr	r2, [pc, #504]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fea:	4b7c      	ldr	r3, [pc, #496]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffa:	4b79      	ldr	r3, [pc, #484]	; (80051e0 <HAL_RCC_OscConfig+0x4bc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d118      	bne.n	8005038 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005006:	4b76      	ldr	r3, [pc, #472]	; (80051e0 <HAL_RCC_OscConfig+0x4bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a75      	ldr	r2, [pc, #468]	; (80051e0 <HAL_RCC_OscConfig+0x4bc>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005012:	f7fd fb4f 	bl	80026b4 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501a:	f7fd fb4b 	bl	80026b4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e183      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800502c:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <HAL_RCC_OscConfig+0x4bc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d108      	bne.n	8005052 <HAL_RCC_OscConfig+0x32e>
 8005040:	4b66      	ldr	r3, [pc, #408]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	4a65      	ldr	r2, [pc, #404]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005050:	e024      	b.n	800509c <HAL_RCC_OscConfig+0x378>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b05      	cmp	r3, #5
 8005058:	d110      	bne.n	800507c <HAL_RCC_OscConfig+0x358>
 800505a:	4b60      	ldr	r3, [pc, #384]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	4a5e      	ldr	r2, [pc, #376]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005062:	f043 0304 	orr.w	r3, r3, #4
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800506a:	4b5c      	ldr	r3, [pc, #368]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	4a5a      	ldr	r2, [pc, #360]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800507a:	e00f      	b.n	800509c <HAL_RCC_OscConfig+0x378>
 800507c:	4b57      	ldr	r3, [pc, #348]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	4a56      	ldr	r2, [pc, #344]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800508c:	4b53      	ldr	r3, [pc, #332]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	4a52      	ldr	r2, [pc, #328]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005094:	f023 0304 	bic.w	r3, r3, #4
 8005098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d016      	beq.n	80050d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a4:	f7fd fb06 	bl	80026b4 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ac:	f7fd fb02 	bl	80026b4 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e138      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c2:	4b46      	ldr	r3, [pc, #280]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ed      	beq.n	80050ac <HAL_RCC_OscConfig+0x388>
 80050d0:	e015      	b.n	80050fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d2:	f7fd faef 	bl	80026b4 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d8:	e00a      	b.n	80050f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7fd faeb 	bl	80026b4 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e121      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f0:	4b3a      	ldr	r3, [pc, #232]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1ed      	bne.n	80050da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050fe:	7ffb      	ldrb	r3, [r7, #31]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d105      	bne.n	8005110 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005104:	4b35      	ldr	r3, [pc, #212]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005108:	4a34      	ldr	r2, [pc, #208]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 800510a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d03c      	beq.n	8005196 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01c      	beq.n	800515e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005124:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800512a:	4a2c      	ldr	r2, [pc, #176]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fd fabe 	bl	80026b4 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800513c:	f7fd faba 	bl	80026b4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0f2      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800514e:	4b23      	ldr	r3, [pc, #140]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ef      	beq.n	800513c <HAL_RCC_OscConfig+0x418>
 800515c:	e01b      	b.n	8005196 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800515e:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005164:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516e:	f7fd faa1 	bl	80026b4 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005176:	f7fd fa9d 	bl	80026b4 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e0d5      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 800518a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1ef      	bne.n	8005176 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80c9 	beq.w	8005332 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	f000 8083 	beq.w	80052b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d15e      	bne.n	8005274 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a08      	ldr	r2, [pc, #32]	; (80051dc <HAL_RCC_OscConfig+0x4b8>)
 80051bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c2:	f7fd fa77 	bl	80026b4 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c8:	e00c      	b.n	80051e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ca:	f7fd fa73 	bl	80026b4 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d905      	bls.n	80051e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e0ab      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e4:	4b55      	ldr	r3, [pc, #340]	; (800533c <HAL_RCC_OscConfig+0x618>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1ec      	bne.n	80051ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051f0:	4b52      	ldr	r3, [pc, #328]	; (800533c <HAL_RCC_OscConfig+0x618>)
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	4b52      	ldr	r3, [pc, #328]	; (8005340 <HAL_RCC_OscConfig+0x61c>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6a11      	ldr	r1, [r2, #32]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005200:	3a01      	subs	r2, #1
 8005202:	0112      	lsls	r2, r2, #4
 8005204:	4311      	orrs	r1, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800520a:	0212      	lsls	r2, r2, #8
 800520c:	4311      	orrs	r1, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005212:	0852      	lsrs	r2, r2, #1
 8005214:	3a01      	subs	r2, #1
 8005216:	0552      	lsls	r2, r2, #21
 8005218:	4311      	orrs	r1, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800521e:	0852      	lsrs	r2, r2, #1
 8005220:	3a01      	subs	r2, #1
 8005222:	0652      	lsls	r2, r2, #25
 8005224:	4311      	orrs	r1, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800522a:	06d2      	lsls	r2, r2, #27
 800522c:	430a      	orrs	r2, r1
 800522e:	4943      	ldr	r1, [pc, #268]	; (800533c <HAL_RCC_OscConfig+0x618>)
 8005230:	4313      	orrs	r3, r2
 8005232:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005234:	4b41      	ldr	r3, [pc, #260]	; (800533c <HAL_RCC_OscConfig+0x618>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a40      	ldr	r2, [pc, #256]	; (800533c <HAL_RCC_OscConfig+0x618>)
 800523a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800523e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005240:	4b3e      	ldr	r3, [pc, #248]	; (800533c <HAL_RCC_OscConfig+0x618>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a3d      	ldr	r2, [pc, #244]	; (800533c <HAL_RCC_OscConfig+0x618>)
 8005246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800524a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fd fa32 	bl	80026b4 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005254:	f7fd fa2e 	bl	80026b4 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e066      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005266:	4b35      	ldr	r3, [pc, #212]	; (800533c <HAL_RCC_OscConfig+0x618>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x530>
 8005272:	e05e      	b.n	8005332 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b31      	ldr	r3, [pc, #196]	; (800533c <HAL_RCC_OscConfig+0x618>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a30      	ldr	r2, [pc, #192]	; (800533c <HAL_RCC_OscConfig+0x618>)
 800527a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fd fa18 	bl	80026b4 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005288:	f7fd fa14 	bl	80026b4 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e04c      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529a:	4b28      	ldr	r3, [pc, #160]	; (800533c <HAL_RCC_OscConfig+0x618>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052a6:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCC_OscConfig+0x618>)
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	4924      	ldr	r1, [pc, #144]	; (800533c <HAL_RCC_OscConfig+0x618>)
 80052ac:	4b25      	ldr	r3, [pc, #148]	; (8005344 <HAL_RCC_OscConfig+0x620>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	60cb      	str	r3, [r1, #12]
 80052b2:	e03e      	b.n	8005332 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e039      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052c0:	4b1e      	ldr	r3, [pc, #120]	; (800533c <HAL_RCC_OscConfig+0x618>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 0203 	and.w	r2, r3, #3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d12c      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	3b01      	subs	r3, #1
 80052e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d123      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d11b      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d113      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	3b01      	subs	r3, #1
 8005314:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d109      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	3b01      	subs	r3, #1
 8005328:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d001      	beq.n	8005332 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	019f800c 	.word	0x019f800c
 8005344:	feeefffc 	.word	0xfeeefffc

08005348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e11e      	b.n	800559e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005360:	4b91      	ldr	r3, [pc, #580]	; (80055a8 <HAL_RCC_ClockConfig+0x260>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d910      	bls.n	8005390 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b8e      	ldr	r3, [pc, #568]	; (80055a8 <HAL_RCC_ClockConfig+0x260>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 020f 	bic.w	r2, r3, #15
 8005376:	498c      	ldr	r1, [pc, #560]	; (80055a8 <HAL_RCC_ClockConfig+0x260>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b8a      	ldr	r3, [pc, #552]	; (80055a8 <HAL_RCC_ClockConfig+0x260>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e106      	b.n	800559e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d073      	beq.n	8005484 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d129      	bne.n	80053f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a4:	4b81      	ldr	r3, [pc, #516]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0f4      	b.n	800559e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053b4:	f000 f99e 	bl	80056f4 <RCC_GetSysClockFreqFromPLLSource>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4a7c      	ldr	r2, [pc, #496]	; (80055b0 <HAL_RCC_ClockConfig+0x268>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d93f      	bls.n	8005442 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053c2:	4b7a      	ldr	r3, [pc, #488]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d033      	beq.n	8005442 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d12f      	bne.n	8005442 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053e2:	4b72      	ldr	r3, [pc, #456]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ea:	4a70      	ldr	r2, [pc, #448]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80053ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e024      	b.n	8005442 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005400:	4b6a      	ldr	r3, [pc, #424]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0c6      	b.n	800559e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005410:	4b66      	ldr	r3, [pc, #408]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0be      	b.n	800559e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005420:	f000 f8ce 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 8005424:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	4a61      	ldr	r2, [pc, #388]	; (80055b0 <HAL_RCC_ClockConfig+0x268>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d909      	bls.n	8005442 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800542e:	4b5f      	ldr	r3, [pc, #380]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005436:	4a5d      	ldr	r2, [pc, #372]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005442:	4b5a      	ldr	r3, [pc, #360]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f023 0203 	bic.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4957      	ldr	r1, [pc, #348]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005454:	f7fd f92e 	bl	80026b4 <HAL_GetTick>
 8005458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	e00a      	b.n	8005472 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545c:	f7fd f92a 	bl	80026b4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	f241 3288 	movw	r2, #5000	; 0x1388
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e095      	b.n	800559e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	4b4e      	ldr	r3, [pc, #312]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 020c 	and.w	r2, r3, #12
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	429a      	cmp	r2, r3
 8005482:	d1eb      	bne.n	800545c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d023      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800549c:	4b43      	ldr	r3, [pc, #268]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a42      	ldr	r2, [pc, #264]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80054a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054b4:	4b3d      	ldr	r3, [pc, #244]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054bc:	4a3b      	ldr	r2, [pc, #236]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80054be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c4:	4b39      	ldr	r3, [pc, #228]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4936      	ldr	r1, [pc, #216]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	608b      	str	r3, [r1, #8]
 80054d6:	e008      	b.n	80054ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b80      	cmp	r3, #128	; 0x80
 80054dc:	d105      	bne.n	80054ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054de:	4b33      	ldr	r3, [pc, #204]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	4a32      	ldr	r2, [pc, #200]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 80054e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ea:	4b2f      	ldr	r3, [pc, #188]	; (80055a8 <HAL_RCC_ClockConfig+0x260>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d21d      	bcs.n	8005534 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f8:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <HAL_RCC_ClockConfig+0x260>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 020f 	bic.w	r2, r3, #15
 8005500:	4929      	ldr	r1, [pc, #164]	; (80055a8 <HAL_RCC_ClockConfig+0x260>)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	4313      	orrs	r3, r2
 8005506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005508:	f7fd f8d4 	bl	80026b4 <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550e:	e00a      	b.n	8005526 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005510:	f7fd f8d0 	bl	80026b4 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e03b      	b.n	800559e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005526:	4b20      	ldr	r3, [pc, #128]	; (80055a8 <HAL_RCC_ClockConfig+0x260>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d1ed      	bne.n	8005510 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4917      	ldr	r1, [pc, #92]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	490f      	ldr	r1, [pc, #60]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005572:	f000 f825 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 8005576:	4602      	mov	r2, r0
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <HAL_RCC_ClockConfig+0x264>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	490c      	ldr	r1, [pc, #48]	; (80055b4 <HAL_RCC_ClockConfig+0x26c>)
 8005584:	5ccb      	ldrb	r3, [r1, r3]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	fa22 f303 	lsr.w	r3, r2, r3
 800558e:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <HAL_RCC_ClockConfig+0x270>)
 8005590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005592:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <HAL_RCC_ClockConfig+0x274>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f7fd f840 	bl	800261c <HAL_InitTick>
 800559c:	4603      	mov	r3, r0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40022000 	.word	0x40022000
 80055ac:	40021000 	.word	0x40021000
 80055b0:	04c4b400 	.word	0x04c4b400
 80055b4:	080095e0 	.word	0x080095e0
 80055b8:	20000008 	.word	0x20000008
 80055bc:	2000000c 	.word	0x2000000c

080055c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055c6:	4b2c      	ldr	r3, [pc, #176]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d102      	bne.n	80055d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055d2:	4b2a      	ldr	r3, [pc, #168]	; (800567c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	e047      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055d8:	4b27      	ldr	r3, [pc, #156]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d102      	bne.n	80055ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055e4:	4b26      	ldr	r3, [pc, #152]	; (8005680 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	e03e      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	2b0c      	cmp	r3, #12
 80055f4:	d136      	bne.n	8005664 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005600:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	3301      	adds	r3, #1
 800560c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b03      	cmp	r3, #3
 8005612:	d10c      	bne.n	800562e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005614:	4a1a      	ldr	r2, [pc, #104]	; (8005680 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	4a16      	ldr	r2, [pc, #88]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800561e:	68d2      	ldr	r2, [r2, #12]
 8005620:	0a12      	lsrs	r2, r2, #8
 8005622:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	617b      	str	r3, [r7, #20]
      break;
 800562c:	e00c      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	fbb2 f3f3 	udiv	r3, r2, r3
 8005636:	4a10      	ldr	r2, [pc, #64]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005638:	68d2      	ldr	r2, [r2, #12]
 800563a:	0a12      	lsrs	r2, r2, #8
 800563c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005640:	fb02 f303 	mul.w	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
      break;
 8005646:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	0e5b      	lsrs	r3, r3, #25
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	3301      	adds	r3, #1
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e001      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005668:	693b      	ldr	r3, [r7, #16]
}
 800566a:	4618      	mov	r0, r3
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000
 800567c:	00f42400 	.word	0x00f42400
 8005680:	016e3600 	.word	0x016e3600

08005684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <HAL_RCC_GetHCLKFreq+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000008 	.word	0x20000008

0800569c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056a0:	f7ff fff0 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	0a1b      	lsrs	r3, r3, #8
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4904      	ldr	r1, [pc, #16]	; (80056c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021000 	.word	0x40021000
 80056c4:	080095f0 	.word	0x080095f0

080056c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056cc:	f7ff ffda 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	0adb      	lsrs	r3, r3, #11
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4904      	ldr	r1, [pc, #16]	; (80056f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056de:	5ccb      	ldrb	r3, [r1, r3]
 80056e0:	f003 031f 	and.w	r3, r3, #31
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40021000 	.word	0x40021000
 80056f0:	080095f0 	.word	0x080095f0

080056f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056fa:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005704:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	3301      	adds	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d10c      	bne.n	8005732 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005718:	4a17      	ldr	r2, [pc, #92]	; (8005778 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005722:	68d2      	ldr	r2, [r2, #12]
 8005724:	0a12      	lsrs	r2, r2, #8
 8005726:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800572a:	fb02 f303 	mul.w	r3, r2, r3
 800572e:	617b      	str	r3, [r7, #20]
    break;
 8005730:	e00c      	b.n	800574c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005732:	4a12      	ldr	r2, [pc, #72]	; (800577c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	fbb2 f3f3 	udiv	r3, r2, r3
 800573a:	4a0e      	ldr	r2, [pc, #56]	; (8005774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800573c:	68d2      	ldr	r2, [r2, #12]
 800573e:	0a12      	lsrs	r2, r2, #8
 8005740:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005744:	fb02 f303 	mul.w	r3, r2, r3
 8005748:	617b      	str	r3, [r7, #20]
    break;
 800574a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	0e5b      	lsrs	r3, r3, #25
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	3301      	adds	r3, #1
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005766:	687b      	ldr	r3, [r7, #4]
}
 8005768:	4618      	mov	r0, r3
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40021000 	.word	0x40021000
 8005778:	016e3600 	.word	0x016e3600
 800577c:	00f42400 	.word	0x00f42400

08005780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005788:	2300      	movs	r3, #0
 800578a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800578c:	2300      	movs	r3, #0
 800578e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8098 	beq.w	80058ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579e:	2300      	movs	r3, #0
 80057a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a2:	4b43      	ldr	r3, [pc, #268]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10d      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ae:	4b40      	ldr	r3, [pc, #256]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b2:	4a3f      	ldr	r2, [pc, #252]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ba:	4b3d      	ldr	r3, [pc, #244]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c6:	2301      	movs	r3, #1
 80057c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ca:	4b3a      	ldr	r3, [pc, #232]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a39      	ldr	r2, [pc, #228]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057d6:	f7fc ff6d 	bl	80026b4 <HAL_GetTick>
 80057da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057dc:	e009      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057de:	f7fc ff69 	bl	80026b4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d902      	bls.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	74fb      	strb	r3, [r7, #19]
        break;
 80057f0:	e005      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057f2:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0ef      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d159      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005804:	4b2a      	ldr	r3, [pc, #168]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01e      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	429a      	cmp	r2, r3
 800581e:	d019      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005820:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800582c:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800583c:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800584c:	4a18      	ldr	r2, [pc, #96]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d016      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585e:	f7fc ff29 	bl	80026b4 <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005864:	e00b      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005866:	f7fc ff25 	bl	80026b4 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f241 3288 	movw	r2, #5000	; 0x1388
 8005874:	4293      	cmp	r3, r2
 8005876:	d902      	bls.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	74fb      	strb	r3, [r7, #19]
            break;
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800587e:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0ec      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800588c:	7cfb      	ldrb	r3, [r7, #19]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a0:	4903      	ldr	r1, [pc, #12]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058a8:	e008      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058aa:	7cfb      	ldrb	r3, [r7, #19]
 80058ac:	74bb      	strb	r3, [r7, #18]
 80058ae:	e005      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058bc:	7c7b      	ldrb	r3, [r7, #17]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d105      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c2:	4ba7      	ldr	r3, [pc, #668]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	4aa6      	ldr	r2, [pc, #664]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058da:	4ba1      	ldr	r3, [pc, #644]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f023 0203 	bic.w	r2, r3, #3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	499d      	ldr	r1, [pc, #628]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058fc:	4b98      	ldr	r3, [pc, #608]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f023 020c 	bic.w	r2, r3, #12
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	4995      	ldr	r1, [pc, #596]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800591e:	4b90      	ldr	r3, [pc, #576]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	498c      	ldr	r1, [pc, #560]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005940:	4b87      	ldr	r3, [pc, #540]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	4984      	ldr	r1, [pc, #528]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005962:	4b7f      	ldr	r3, [pc, #508]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	497b      	ldr	r1, [pc, #492]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005984:	4b76      	ldr	r3, [pc, #472]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	4973      	ldr	r1, [pc, #460]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059a6:	4b6e      	ldr	r3, [pc, #440]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	496a      	ldr	r1, [pc, #424]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059c8:	4b65      	ldr	r3, [pc, #404]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4962      	ldr	r1, [pc, #392]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059ea:	4b5d      	ldr	r3, [pc, #372]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	4959      	ldr	r1, [pc, #356]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a0c:	4b54      	ldr	r3, [pc, #336]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a12:	f023 0203 	bic.w	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	4951      	ldr	r1, [pc, #324]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a2e:	4b4c      	ldr	r3, [pc, #304]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4948      	ldr	r1, [pc, #288]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a50:	4b43      	ldr	r3, [pc, #268]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	4940      	ldr	r1, [pc, #256]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a70:	4b3b      	ldr	r3, [pc, #236]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4a3a      	ldr	r2, [pc, #232]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a88:	4b35      	ldr	r3, [pc, #212]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	4932      	ldr	r1, [pc, #200]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d015      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ac0:	4b27      	ldr	r3, [pc, #156]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	4924      	ldr	r1, [pc, #144]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ade:	d105      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae0:	4b1f      	ldr	r3, [pc, #124]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a1e      	ldr	r2, [pc, #120]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d015      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005af8:	4b19      	ldr	r3, [pc, #100]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	4916      	ldr	r1, [pc, #88]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b16:	d105      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b18:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4a10      	ldr	r2, [pc, #64]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d019      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4908      	ldr	r1, [pc, #32]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b4e:	d109      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b50:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4a02      	ldr	r2, [pc, #8]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b5a:	60d3      	str	r3, [r2, #12]
 8005b5c:	e002      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d015      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b70:	4b29      	ldr	r3, [pc, #164]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	4926      	ldr	r1, [pc, #152]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b90:	4b21      	ldr	r3, [pc, #132]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d015      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb6:	4918      	ldr	r1, [pc, #96]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc6:	d105      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bc8:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4a12      	ldr	r2, [pc, #72]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005be0:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bee:	490a      	ldr	r1, [pc, #40]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4a04      	ldr	r2, [pc, #16]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40021000 	.word	0x40021000

08005c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e049      	b.n	8005cc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fc fb62 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f000 fdf0 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d001      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e04c      	b.n	8005d7e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <HAL_TIM_Base_Start+0xc0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d022      	beq.n	8005d3c <HAL_TIM_Base_Start+0x70>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfe:	d01d      	beq.n	8005d3c <HAL_TIM_Base_Start+0x70>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <HAL_TIM_Base_Start+0xc4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d018      	beq.n	8005d3c <HAL_TIM_Base_Start+0x70>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <HAL_TIM_Base_Start+0xc8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d013      	beq.n	8005d3c <HAL_TIM_Base_Start+0x70>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <HAL_TIM_Base_Start+0xcc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00e      	beq.n	8005d3c <HAL_TIM_Base_Start+0x70>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <HAL_TIM_Base_Start+0xd0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d009      	beq.n	8005d3c <HAL_TIM_Base_Start+0x70>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <HAL_TIM_Base_Start+0xd4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_Base_Start+0x70>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_TIM_Base_Start+0xd8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d115      	bne.n	8005d68 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <HAL_TIM_Base_Start+0xdc>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b06      	cmp	r3, #6
 8005d4c:	d015      	beq.n	8005d7a <HAL_TIM_Base_Start+0xae>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d54:	d011      	beq.n	8005d7a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d66:	e008      	b.n	8005d7a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40015000 	.word	0x40015000
 8005da8:	00010007 	.word	0x00010007

08005dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d001      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e054      	b.n	8005e6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dee:	d01d      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a22      	ldr	r2, [pc, #136]	; (8005e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a21      	ldr	r2, [pc, #132]	; (8005e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1f      	ldr	r2, [pc, #124]	; (8005e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1e      	ldr	r2, [pc, #120]	; (8005e8c <HAL_TIM_Base_Start_IT+0xe0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d115      	bne.n	8005e58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_TIM_Base_Start_IT+0xec>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d015      	beq.n	8005e6a <HAL_TIM_Base_Start_IT+0xbe>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e44:	d011      	beq.n	8005e6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e56:	e008      	b.n	8005e6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e000      	b.n	8005e6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40015000 	.word	0x40015000
 8005e98:	00010007 	.word	0x00010007

08005e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e049      	b.n	8005f42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f841 	bl	8005f4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f000 fcb0 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d109      	bne.n	8005f84 <HAL_TIM_PWM_Start+0x24>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	bf14      	ite	ne
 8005f7c:	2301      	movne	r3, #1
 8005f7e:	2300      	moveq	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	e03c      	b.n	8005ffe <HAL_TIM_PWM_Start+0x9e>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d109      	bne.n	8005f9e <HAL_TIM_PWM_Start+0x3e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	bf14      	ite	ne
 8005f96:	2301      	movne	r3, #1
 8005f98:	2300      	moveq	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	e02f      	b.n	8005ffe <HAL_TIM_PWM_Start+0x9e>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d109      	bne.n	8005fb8 <HAL_TIM_PWM_Start+0x58>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	bf14      	ite	ne
 8005fb0:	2301      	movne	r3, #1
 8005fb2:	2300      	moveq	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	e022      	b.n	8005ffe <HAL_TIM_PWM_Start+0x9e>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b0c      	cmp	r3, #12
 8005fbc:	d109      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0x72>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	e015      	b.n	8005ffe <HAL_TIM_PWM_Start+0x9e>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d109      	bne.n	8005fec <HAL_TIM_PWM_Start+0x8c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	e008      	b.n	8005ffe <HAL_TIM_PWM_Start+0x9e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	bf14      	ite	ne
 8005ff8:	2301      	movne	r3, #1
 8005ffa:	2300      	moveq	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e0a6      	b.n	8006154 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_Start+0xb6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006014:	e023      	b.n	800605e <HAL_TIM_PWM_Start+0xfe>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d104      	bne.n	8006026 <HAL_TIM_PWM_Start+0xc6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006024:	e01b      	b.n	800605e <HAL_TIM_PWM_Start+0xfe>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d104      	bne.n	8006036 <HAL_TIM_PWM_Start+0xd6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006034:	e013      	b.n	800605e <HAL_TIM_PWM_Start+0xfe>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b0c      	cmp	r3, #12
 800603a:	d104      	bne.n	8006046 <HAL_TIM_PWM_Start+0xe6>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006044:	e00b      	b.n	800605e <HAL_TIM_PWM_Start+0xfe>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b10      	cmp	r3, #16
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0xf6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006054:	e003      	b.n	800605e <HAL_TIM_PWM_Start+0xfe>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2201      	movs	r2, #1
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f001 f864 	bl	8007134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a3a      	ldr	r2, [pc, #232]	; (800615c <HAL_TIM_PWM_Start+0x1fc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d018      	beq.n	80060a8 <HAL_TIM_PWM_Start+0x148>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a39      	ldr	r2, [pc, #228]	; (8006160 <HAL_TIM_PWM_Start+0x200>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <HAL_TIM_PWM_Start+0x148>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a37      	ldr	r2, [pc, #220]	; (8006164 <HAL_TIM_PWM_Start+0x204>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00e      	beq.n	80060a8 <HAL_TIM_PWM_Start+0x148>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a36      	ldr	r2, [pc, #216]	; (8006168 <HAL_TIM_PWM_Start+0x208>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d009      	beq.n	80060a8 <HAL_TIM_PWM_Start+0x148>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a34      	ldr	r2, [pc, #208]	; (800616c <HAL_TIM_PWM_Start+0x20c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <HAL_TIM_PWM_Start+0x148>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a33      	ldr	r2, [pc, #204]	; (8006170 <HAL_TIM_PWM_Start+0x210>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_PWM_Start+0x14c>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <HAL_TIM_PWM_Start+0x14e>
 80060ac:	2300      	movs	r3, #0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a25      	ldr	r2, [pc, #148]	; (800615c <HAL_TIM_PWM_Start+0x1fc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d022      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1b2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d4:	d01d      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1b2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a26      	ldr	r2, [pc, #152]	; (8006174 <HAL_TIM_PWM_Start+0x214>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d018      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1b2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a24      	ldr	r2, [pc, #144]	; (8006178 <HAL_TIM_PWM_Start+0x218>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d013      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1b2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a23      	ldr	r2, [pc, #140]	; (800617c <HAL_TIM_PWM_Start+0x21c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00e      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1b2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a19      	ldr	r2, [pc, #100]	; (8006160 <HAL_TIM_PWM_Start+0x200>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d009      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1b2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a18      	ldr	r2, [pc, #96]	; (8006164 <HAL_TIM_PWM_Start+0x204>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d004      	beq.n	8006112 <HAL_TIM_PWM_Start+0x1b2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a18      	ldr	r2, [pc, #96]	; (8006170 <HAL_TIM_PWM_Start+0x210>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d115      	bne.n	800613e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	4b19      	ldr	r3, [pc, #100]	; (8006180 <HAL_TIM_PWM_Start+0x220>)
 800611a:	4013      	ands	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b06      	cmp	r3, #6
 8006122:	d015      	beq.n	8006150 <HAL_TIM_PWM_Start+0x1f0>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612a:	d011      	beq.n	8006150 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613c:	e008      	b.n	8006150 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0201 	orr.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e000      	b.n	8006152 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006150:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40013400 	.word	0x40013400
 8006164:	40014000 	.word	0x40014000
 8006168:	40014400 	.word	0x40014400
 800616c:	40014800 	.word	0x40014800
 8006170:	40015000 	.word	0x40015000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	00010007 	.word	0x00010007

08006184 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e097      	b.n	80062c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7fc f8f3 	bl	8002398 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80061c8:	f023 0307 	bic.w	r3, r3, #7
 80061cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f000 fb31 	bl	8006840 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006206:	f023 0303 	bic.w	r3, r3, #3
 800620a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	4313      	orrs	r3, r2
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006224:	f023 030c 	bic.w	r3, r3, #12
 8006228:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	4313      	orrs	r3, r2
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	031b      	lsls	r3, r3, #12
 8006254:	4313      	orrs	r3, r2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	4313      	orrs	r3, r2
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d110      	bne.n	8006322 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d102      	bne.n	800630c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006306:	7b7b      	ldrb	r3, [r7, #13]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d001      	beq.n	8006310 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e069      	b.n	80063e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006320:	e031      	b.n	8006386 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d110      	bne.n	800634a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d102      	bne.n	8006334 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800632e:	7b3b      	ldrb	r3, [r7, #12]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d001      	beq.n	8006338 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e055      	b.n	80063e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006348:	e01d      	b.n	8006386 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d108      	bne.n	8006362 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d105      	bne.n	8006362 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006356:	7b7b      	ldrb	r3, [r7, #13]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d102      	bne.n	8006362 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800635c:	7b3b      	ldrb	r3, [r7, #12]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d001      	beq.n	8006366 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e03e      	b.n	80063e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_TIM_Encoder_Start+0xc4>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b04      	cmp	r3, #4
 8006390:	d008      	beq.n	80063a4 <HAL_TIM_Encoder_Start+0xd4>
 8006392:	e00f      	b.n	80063b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2201      	movs	r2, #1
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fec9 	bl	8007134 <TIM_CCxChannelCmd>
      break;
 80063a2:	e016      	b.n	80063d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2201      	movs	r2, #1
 80063aa:	2104      	movs	r1, #4
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fec1 	bl	8007134 <TIM_CCxChannelCmd>
      break;
 80063b2:	e00e      	b.n	80063d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2201      	movs	r2, #1
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 feb9 	bl	8007134 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2201      	movs	r2, #1
 80063c8:	2104      	movs	r1, #4
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 feb2 	bl	8007134 <TIM_CCxChannelCmd>
      break;
 80063d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006406:	2302      	movs	r3, #2
 8006408:	e0ff      	b.n	800660a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b14      	cmp	r3, #20
 8006416:	f200 80f0 	bhi.w	80065fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006475 	.word	0x08006475
 8006424:	080065fb 	.word	0x080065fb
 8006428:	080065fb 	.word	0x080065fb
 800642c:	080065fb 	.word	0x080065fb
 8006430:	080064b5 	.word	0x080064b5
 8006434:	080065fb 	.word	0x080065fb
 8006438:	080065fb 	.word	0x080065fb
 800643c:	080065fb 	.word	0x080065fb
 8006440:	080064f7 	.word	0x080064f7
 8006444:	080065fb 	.word	0x080065fb
 8006448:	080065fb 	.word	0x080065fb
 800644c:	080065fb 	.word	0x080065fb
 8006450:	08006537 	.word	0x08006537
 8006454:	080065fb 	.word	0x080065fb
 8006458:	080065fb 	.word	0x080065fb
 800645c:	080065fb 	.word	0x080065fb
 8006460:	08006579 	.word	0x08006579
 8006464:	080065fb 	.word	0x080065fb
 8006468:	080065fb 	.word	0x080065fb
 800646c:	080065fb 	.word	0x080065fb
 8006470:	080065b9 	.word	0x080065b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fa94 	bl	80069a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0208 	orr.w	r2, r2, #8
 800648e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0204 	bic.w	r2, r2, #4
 800649e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6999      	ldr	r1, [r3, #24]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	619a      	str	r2, [r3, #24]
      break;
 80064b2:	e0a5      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fb0e 	bl	8006adc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6999      	ldr	r1, [r3, #24]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	619a      	str	r2, [r3, #24]
      break;
 80064f4:	e084      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fb81 	bl	8006c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0208 	orr.w	r2, r2, #8
 8006510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0204 	bic.w	r2, r2, #4
 8006520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69d9      	ldr	r1, [r3, #28]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	61da      	str	r2, [r3, #28]
      break;
 8006534:	e064      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fbf3 	bl	8006d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69d9      	ldr	r1, [r3, #28]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	021a      	lsls	r2, r3, #8
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	61da      	str	r2, [r3, #28]
      break;
 8006576:	e043      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fc66 	bl	8006e50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0208 	orr.w	r2, r2, #8
 8006592:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80065b6:	e023      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fcb0 	bl	8006f24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80065f8:	e002      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
      break;
 80065fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop

08006614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_TIM_ConfigClockSource+0x1c>
 800662c:	2302      	movs	r3, #2
 800662e:	e0f6      	b.n	800681e <HAL_TIM_ConfigClockSource+0x20a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800664e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800665a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a6f      	ldr	r2, [pc, #444]	; (8006828 <HAL_TIM_ConfigClockSource+0x214>)
 800666a:	4293      	cmp	r3, r2
 800666c:	f000 80c1 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006670:	4a6d      	ldr	r2, [pc, #436]	; (8006828 <HAL_TIM_ConfigClockSource+0x214>)
 8006672:	4293      	cmp	r3, r2
 8006674:	f200 80c6 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 8006678:	4a6c      	ldr	r2, [pc, #432]	; (800682c <HAL_TIM_ConfigClockSource+0x218>)
 800667a:	4293      	cmp	r3, r2
 800667c:	f000 80b9 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006680:	4a6a      	ldr	r2, [pc, #424]	; (800682c <HAL_TIM_ConfigClockSource+0x218>)
 8006682:	4293      	cmp	r3, r2
 8006684:	f200 80be 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 8006688:	4a69      	ldr	r2, [pc, #420]	; (8006830 <HAL_TIM_ConfigClockSource+0x21c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	f000 80b1 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006690:	4a67      	ldr	r2, [pc, #412]	; (8006830 <HAL_TIM_ConfigClockSource+0x21c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	f200 80b6 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 8006698:	4a66      	ldr	r2, [pc, #408]	; (8006834 <HAL_TIM_ConfigClockSource+0x220>)
 800669a:	4293      	cmp	r3, r2
 800669c:	f000 80a9 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 80066a0:	4a64      	ldr	r2, [pc, #400]	; (8006834 <HAL_TIM_ConfigClockSource+0x220>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	f200 80ae 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 80066a8:	4a63      	ldr	r2, [pc, #396]	; (8006838 <HAL_TIM_ConfigClockSource+0x224>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	f000 80a1 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 80066b0:	4a61      	ldr	r2, [pc, #388]	; (8006838 <HAL_TIM_ConfigClockSource+0x224>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	f200 80a6 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 80066b8:	4a60      	ldr	r2, [pc, #384]	; (800683c <HAL_TIM_ConfigClockSource+0x228>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f000 8099 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 80066c0:	4a5e      	ldr	r2, [pc, #376]	; (800683c <HAL_TIM_ConfigClockSource+0x228>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	f200 809e 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 80066c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066cc:	f000 8091 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 80066d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066d4:	f200 8096 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 80066d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066dc:	f000 8089 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 80066e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e4:	f200 808e 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 80066e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ec:	d03e      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x158>
 80066ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f2:	f200 8087 	bhi.w	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 80066f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fa:	f000 8086 	beq.w	800680a <HAL_TIM_ConfigClockSource+0x1f6>
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006702:	d87f      	bhi.n	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 8006704:	2b70      	cmp	r3, #112	; 0x70
 8006706:	d01a      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x12a>
 8006708:	2b70      	cmp	r3, #112	; 0x70
 800670a:	d87b      	bhi.n	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 800670c:	2b60      	cmp	r3, #96	; 0x60
 800670e:	d050      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0x19e>
 8006710:	2b60      	cmp	r3, #96	; 0x60
 8006712:	d877      	bhi.n	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 8006714:	2b50      	cmp	r3, #80	; 0x50
 8006716:	d03c      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0x17e>
 8006718:	2b50      	cmp	r3, #80	; 0x50
 800671a:	d873      	bhi.n	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	d058      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x1be>
 8006720:	2b40      	cmp	r3, #64	; 0x40
 8006722:	d86f      	bhi.n	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 8006724:	2b30      	cmp	r3, #48	; 0x30
 8006726:	d064      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006728:	2b30      	cmp	r3, #48	; 0x30
 800672a:	d86b      	bhi.n	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 800672c:	2b20      	cmp	r3, #32
 800672e:	d060      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006730:	2b20      	cmp	r3, #32
 8006732:	d867      	bhi.n	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d05c      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006738:	2b10      	cmp	r3, #16
 800673a:	d05a      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x1de>
 800673c:	e062      	b.n	8006804 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800674e:	f000 fcd1 	bl	80070f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	609a      	str	r2, [r3, #8]
      break;
 800676a:	e04f      	b.n	800680c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800677c:	f000 fcba 	bl	80070f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800678e:	609a      	str	r2, [r3, #8]
      break;
 8006790:	e03c      	b.n	800680c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800679e:	461a      	mov	r2, r3
 80067a0:	f000 fc2c 	bl	8006ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2150      	movs	r1, #80	; 0x50
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fc85 	bl	80070ba <TIM_ITRx_SetConfig>
      break;
 80067b0:	e02c      	b.n	800680c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067be:	461a      	mov	r2, r3
 80067c0:	f000 fc4b 	bl	800705a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2160      	movs	r1, #96	; 0x60
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fc75 	bl	80070ba <TIM_ITRx_SetConfig>
      break;
 80067d0:	e01c      	b.n	800680c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067de:	461a      	mov	r2, r3
 80067e0:	f000 fc0c 	bl	8006ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2140      	movs	r1, #64	; 0x40
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fc65 	bl	80070ba <TIM_ITRx_SetConfig>
      break;
 80067f0:	e00c      	b.n	800680c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f000 fc5c 	bl	80070ba <TIM_ITRx_SetConfig>
      break;
 8006802:	e003      	b.n	800680c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
      break;
 8006808:	e000      	b.n	800680c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800680a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	00100070 	.word	0x00100070
 800682c:	00100060 	.word	0x00100060
 8006830:	00100050 	.word	0x00100050
 8006834:	00100040 	.word	0x00100040
 8006838:	00100030 	.word	0x00100030
 800683c:	00100020 	.word	0x00100020

08006840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a4c      	ldr	r2, [pc, #304]	; (8006984 <TIM_Base_SetConfig+0x144>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d017      	beq.n	8006888 <TIM_Base_SetConfig+0x48>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685e:	d013      	beq.n	8006888 <TIM_Base_SetConfig+0x48>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a49      	ldr	r2, [pc, #292]	; (8006988 <TIM_Base_SetConfig+0x148>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0x48>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a48      	ldr	r2, [pc, #288]	; (800698c <TIM_Base_SetConfig+0x14c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0x48>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a47      	ldr	r2, [pc, #284]	; (8006990 <TIM_Base_SetConfig+0x150>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x48>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a46      	ldr	r2, [pc, #280]	; (8006994 <TIM_Base_SetConfig+0x154>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x48>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a45      	ldr	r2, [pc, #276]	; (8006998 <TIM_Base_SetConfig+0x158>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a39      	ldr	r2, [pc, #228]	; (8006984 <TIM_Base_SetConfig+0x144>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d023      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d01f      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a36      	ldr	r2, [pc, #216]	; (8006988 <TIM_Base_SetConfig+0x148>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01b      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a35      	ldr	r2, [pc, #212]	; (800698c <TIM_Base_SetConfig+0x14c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d017      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a34      	ldr	r2, [pc, #208]	; (8006990 <TIM_Base_SetConfig+0x150>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a33      	ldr	r2, [pc, #204]	; (8006994 <TIM_Base_SetConfig+0x154>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00f      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a33      	ldr	r2, [pc, #204]	; (800699c <TIM_Base_SetConfig+0x15c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00b      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a32      	ldr	r2, [pc, #200]	; (80069a0 <TIM_Base_SetConfig+0x160>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d007      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a31      	ldr	r2, [pc, #196]	; (80069a4 <TIM_Base_SetConfig+0x164>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_Base_SetConfig+0xaa>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a2c      	ldr	r2, [pc, #176]	; (8006998 <TIM_Base_SetConfig+0x158>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d108      	bne.n	80068fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a18      	ldr	r2, [pc, #96]	; (8006984 <TIM_Base_SetConfig+0x144>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d013      	beq.n	8006950 <TIM_Base_SetConfig+0x110>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1a      	ldr	r2, [pc, #104]	; (8006994 <TIM_Base_SetConfig+0x154>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00f      	beq.n	8006950 <TIM_Base_SetConfig+0x110>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a1a      	ldr	r2, [pc, #104]	; (800699c <TIM_Base_SetConfig+0x15c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00b      	beq.n	8006950 <TIM_Base_SetConfig+0x110>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <TIM_Base_SetConfig+0x160>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d007      	beq.n	8006950 <TIM_Base_SetConfig+0x110>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <TIM_Base_SetConfig+0x164>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_Base_SetConfig+0x110>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a13      	ldr	r2, [pc, #76]	; (8006998 <TIM_Base_SetConfig+0x158>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d103      	bne.n	8006958 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b01      	cmp	r3, #1
 8006968:	d105      	bne.n	8006976 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f023 0201 	bic.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	611a      	str	r2, [r3, #16]
  }
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40000c00 	.word	0x40000c00
 8006994:	40013400 	.word	0x40013400
 8006998:	40015000 	.word	0x40015000
 800699c:	40014000 	.word	0x40014000
 80069a0:	40014400 	.word	0x40014400
 80069a4:	40014800 	.word	0x40014800

080069a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f023 0201 	bic.w	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 0302 	bic.w	r3, r3, #2
 80069f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a30      	ldr	r2, [pc, #192]	; (8006ac4 <TIM_OC1_SetConfig+0x11c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <TIM_OC1_SetConfig+0x88>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a2f      	ldr	r2, [pc, #188]	; (8006ac8 <TIM_OC1_SetConfig+0x120>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_OC1_SetConfig+0x88>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a2e      	ldr	r2, [pc, #184]	; (8006acc <TIM_OC1_SetConfig+0x124>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_OC1_SetConfig+0x88>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a2d      	ldr	r2, [pc, #180]	; (8006ad0 <TIM_OC1_SetConfig+0x128>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC1_SetConfig+0x88>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a2c      	ldr	r2, [pc, #176]	; (8006ad4 <TIM_OC1_SetConfig+0x12c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC1_SetConfig+0x88>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a2b      	ldr	r2, [pc, #172]	; (8006ad8 <TIM_OC1_SetConfig+0x130>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10c      	bne.n	8006a4a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0308 	bic.w	r3, r3, #8
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <TIM_OC1_SetConfig+0x11c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <TIM_OC1_SetConfig+0xd2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1c      	ldr	r2, [pc, #112]	; (8006ac8 <TIM_OC1_SetConfig+0x120>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00f      	beq.n	8006a7a <TIM_OC1_SetConfig+0xd2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1b      	ldr	r2, [pc, #108]	; (8006acc <TIM_OC1_SetConfig+0x124>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00b      	beq.n	8006a7a <TIM_OC1_SetConfig+0xd2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1a      	ldr	r2, [pc, #104]	; (8006ad0 <TIM_OC1_SetConfig+0x128>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d007      	beq.n	8006a7a <TIM_OC1_SetConfig+0xd2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <TIM_OC1_SetConfig+0x12c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_OC1_SetConfig+0xd2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <TIM_OC1_SetConfig+0x130>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d111      	bne.n	8006a9e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800
 8006ad8:	40015000 	.word	0x40015000

08006adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f023 0210 	bic.w	r2, r3, #16
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0320 	bic.w	r3, r3, #32
 8006b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <TIM_OC2_SetConfig+0x110>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d007      	beq.n	8006b50 <TIM_OC2_SetConfig+0x74>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a2b      	ldr	r2, [pc, #172]	; (8006bf0 <TIM_OC2_SetConfig+0x114>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_OC2_SetConfig+0x74>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <TIM_OC2_SetConfig+0x118>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10d      	bne.n	8006b6c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <TIM_OC2_SetConfig+0x110>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <TIM_OC2_SetConfig+0xc0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <TIM_OC2_SetConfig+0x114>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00f      	beq.n	8006b9c <TIM_OC2_SetConfig+0xc0>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <TIM_OC2_SetConfig+0x11c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <TIM_OC2_SetConfig+0xc0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <TIM_OC2_SetConfig+0x120>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_OC2_SetConfig+0xc0>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a1c      	ldr	r2, [pc, #112]	; (8006c00 <TIM_OC2_SetConfig+0x124>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_OC2_SetConfig+0xc0>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <TIM_OC2_SetConfig+0x118>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d113      	bne.n	8006bc4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40012c00 	.word	0x40012c00
 8006bf0:	40013400 	.word	0x40013400
 8006bf4:	40015000 	.word	0x40015000
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40014400 	.word	0x40014400
 8006c00:	40014800 	.word	0x40014800

08006c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2b      	ldr	r2, [pc, #172]	; (8006d10 <TIM_OC3_SetConfig+0x10c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_OC3_SetConfig+0x72>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2a      	ldr	r2, [pc, #168]	; (8006d14 <TIM_OC3_SetConfig+0x110>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_OC3_SetConfig+0x72>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a29      	ldr	r2, [pc, #164]	; (8006d18 <TIM_OC3_SetConfig+0x114>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d10d      	bne.n	8006c92 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a1e      	ldr	r2, [pc, #120]	; (8006d10 <TIM_OC3_SetConfig+0x10c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <TIM_OC3_SetConfig+0xbe>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <TIM_OC3_SetConfig+0x110>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00f      	beq.n	8006cc2 <TIM_OC3_SetConfig+0xbe>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a1d      	ldr	r2, [pc, #116]	; (8006d1c <TIM_OC3_SetConfig+0x118>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00b      	beq.n	8006cc2 <TIM_OC3_SetConfig+0xbe>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a1c      	ldr	r2, [pc, #112]	; (8006d20 <TIM_OC3_SetConfig+0x11c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d007      	beq.n	8006cc2 <TIM_OC3_SetConfig+0xbe>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <TIM_OC3_SetConfig+0x120>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <TIM_OC3_SetConfig+0xbe>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a16      	ldr	r2, [pc, #88]	; (8006d18 <TIM_OC3_SetConfig+0x114>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d113      	bne.n	8006cea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40012c00 	.word	0x40012c00
 8006d14:	40013400 	.word	0x40013400
 8006d18:	40015000 	.word	0x40015000
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	031b      	lsls	r3, r3, #12
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a2c      	ldr	r2, [pc, #176]	; (8006e38 <TIM_OC4_SetConfig+0x110>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d007      	beq.n	8006d9c <TIM_OC4_SetConfig+0x74>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a2b      	ldr	r2, [pc, #172]	; (8006e3c <TIM_OC4_SetConfig+0x114>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_OC4_SetConfig+0x74>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a2a      	ldr	r2, [pc, #168]	; (8006e40 <TIM_OC4_SetConfig+0x118>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d10d      	bne.n	8006db8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <TIM_OC4_SetConfig+0x110>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <TIM_OC4_SetConfig+0xc0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <TIM_OC4_SetConfig+0x114>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00f      	beq.n	8006de8 <TIM_OC4_SetConfig+0xc0>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a1e      	ldr	r2, [pc, #120]	; (8006e44 <TIM_OC4_SetConfig+0x11c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00b      	beq.n	8006de8 <TIM_OC4_SetConfig+0xc0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a1d      	ldr	r2, [pc, #116]	; (8006e48 <TIM_OC4_SetConfig+0x120>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d007      	beq.n	8006de8 <TIM_OC4_SetConfig+0xc0>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a1c      	ldr	r2, [pc, #112]	; (8006e4c <TIM_OC4_SetConfig+0x124>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_OC4_SetConfig+0xc0>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a17      	ldr	r2, [pc, #92]	; (8006e40 <TIM_OC4_SetConfig+0x118>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d113      	bne.n	8006e10 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006df6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	019b      	lsls	r3, r3, #6
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	019b      	lsls	r3, r3, #6
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40015000 	.word	0x40015000
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800

08006e50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <TIM_OC5_SetConfig+0xbc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <TIM_OC5_SetConfig+0x82>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a18      	ldr	r2, [pc, #96]	; (8006f10 <TIM_OC5_SetConfig+0xc0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00f      	beq.n	8006ed2 <TIM_OC5_SetConfig+0x82>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a17      	ldr	r2, [pc, #92]	; (8006f14 <TIM_OC5_SetConfig+0xc4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00b      	beq.n	8006ed2 <TIM_OC5_SetConfig+0x82>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a16      	ldr	r2, [pc, #88]	; (8006f18 <TIM_OC5_SetConfig+0xc8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d007      	beq.n	8006ed2 <TIM_OC5_SetConfig+0x82>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <TIM_OC5_SetConfig+0xcc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_OC5_SetConfig+0x82>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a14      	ldr	r2, [pc, #80]	; (8006f20 <TIM_OC5_SetConfig+0xd0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d109      	bne.n	8006ee6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	621a      	str	r2, [r3, #32]
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800
 8006f20:	40015000 	.word	0x40015000

08006f24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	051b      	lsls	r3, r3, #20
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <TIM_OC6_SetConfig+0xc0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x84>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <TIM_OC6_SetConfig+0xc4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00f      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x84>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a18      	ldr	r2, [pc, #96]	; (8006fec <TIM_OC6_SetConfig+0xc8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00b      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x84>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <TIM_OC6_SetConfig+0xcc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x84>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a16      	ldr	r2, [pc, #88]	; (8006ff4 <TIM_OC6_SetConfig+0xd0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x84>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a15      	ldr	r2, [pc, #84]	; (8006ff8 <TIM_OC6_SetConfig+0xd4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d109      	bne.n	8006fbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	029b      	lsls	r3, r3, #10
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800
 8006ff8:	40015000 	.word	0x40015000

08006ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f023 0201 	bic.w	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f023 030a 	bic.w	r3, r3, #10
 8007038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800705a:	b480      	push	{r7}
 800705c:	b087      	sub	sp, #28
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f023 0210 	bic.w	r2, r3, #16
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	031b      	lsls	r3, r3, #12
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007096:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80070d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	f043 0307 	orr.w	r3, r3, #7
 80070e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	609a      	str	r2, [r3, #8]
}
 80070e8:	bf00      	nop
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800710e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	021a      	lsls	r2, r3, #8
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	431a      	orrs	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4313      	orrs	r3, r2
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	609a      	str	r2, [r3, #8]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2201      	movs	r2, #1
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	43db      	mvns	r3, r3
 8007156:	401a      	ands	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1a      	ldr	r2, [r3, #32]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	fa01 f303 	lsl.w	r3, r1, r3
 800716c:	431a      	orrs	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007194:	2302      	movs	r3, #2
 8007196:	e074      	b.n	8007282 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a34      	ldr	r2, [pc, #208]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a33      	ldr	r2, [pc, #204]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a31      	ldr	r2, [pc, #196]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a21      	ldr	r2, [pc, #132]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d022      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007218:	d01d      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1f      	ldr	r2, [pc, #124]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d018      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1d      	ldr	r2, [pc, #116]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a15      	ldr	r2, [pc, #84]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a11      	ldr	r2, [pc, #68]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d10c      	bne.n	8007270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800725c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4313      	orrs	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40012c00 	.word	0x40012c00
 8007294:	40013400 	.word	0x40013400
 8007298:	40015000 	.word	0x40015000
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	40014000 	.word	0x40014000

080072ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e042      	b.n	8007344 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fa ffbb 	bl	800224c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2224      	movs	r2, #36	; 0x24
 80072da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 0201 	bic.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 ff42 	bl	8008180 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fc43 	bl	8007b88 <UART_SetConfig>
 8007302:	4603      	mov	r3, r0
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e01b      	b.n	8007344 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800731a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800732a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 ffc1 	bl	80082c4 <UART_CheckIdleState>
 8007342:	4603      	mov	r3, r0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	af02      	add	r7, sp, #8
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	4613      	mov	r3, r2
 800735a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007362:	2b20      	cmp	r3, #32
 8007364:	d17b      	bne.n	800745e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <HAL_UART_Transmit+0x26>
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e074      	b.n	8007460 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2221      	movs	r2, #33	; 0x21
 8007382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007386:	f7fb f995 	bl	80026b4 <HAL_GetTick>
 800738a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	88fa      	ldrh	r2, [r7, #6]
 8007390:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a4:	d108      	bne.n	80073b8 <HAL_UART_Transmit+0x6c>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	e003      	b.n	80073c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073c0:	e030      	b.n	8007424 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2180      	movs	r1, #128	; 0x80
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f001 f823 	bl	8008418 <UART_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2220      	movs	r2, #32
 80073dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e03d      	b.n	8007460 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10b      	bne.n	8007402 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	3302      	adds	r3, #2
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	e007      	b.n	8007412 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	781a      	ldrb	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	3301      	adds	r3, #1
 8007410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1c8      	bne.n	80073c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2200      	movs	r2, #0
 8007438:	2140      	movs	r1, #64	; 0x40
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 ffec 	bl	8008418 <UART_WaitOnFlagUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e006      	b.n	8007460 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
  }
}
 8007460:	4618      	mov	r0, r3
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	; 0x28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747c:	2b20      	cmp	r3, #32
 800747e:	d137      	bne.n	80074f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <HAL_UART_Receive_IT+0x24>
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e030      	b.n	80074f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a18      	ldr	r2, [pc, #96]	; (80074fc <HAL_UART_Receive_IT+0x94>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d01f      	beq.n	80074e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d018      	beq.n	80074e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	613b      	str	r3, [r7, #16]
   return(result);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	623b      	str	r3, [r7, #32]
 80074ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	69f9      	ldr	r1, [r7, #28]
 80074d2:	6a3a      	ldr	r2, [r7, #32]
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	461a      	mov	r2, r3
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f001 f804 	bl	80084f4 <UART_Start_Receive_IT>
 80074ec:	4603      	mov	r3, r0
 80074ee:	e000      	b.n	80074f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074f0:	2302      	movs	r3, #2
  }
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3728      	adds	r7, #40	; 0x28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	40008000 	.word	0x40008000

08007500 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b0ba      	sub	sp, #232	; 0xe8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007526:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800752a:	f640 030f 	movw	r3, #2063	; 0x80f
 800752e:	4013      	ands	r3, r2
 8007530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007538:	2b00      	cmp	r3, #0
 800753a:	d11b      	bne.n	8007574 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d015      	beq.n	8007574 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d105      	bne.n	8007560 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 82e3 	beq.w	8007b30 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
      }
      return;
 8007572:	e2dd      	b.n	8007b30 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8123 	beq.w	80077c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800757e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007582:	4b8d      	ldr	r3, [pc, #564]	; (80077b8 <HAL_UART_IRQHandler+0x2b8>)
 8007584:	4013      	ands	r3, r2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800758a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800758e:	4b8b      	ldr	r3, [pc, #556]	; (80077bc <HAL_UART_IRQHandler+0x2bc>)
 8007590:	4013      	ands	r3, r2
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8116 	beq.w	80077c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d011      	beq.n	80075c8 <HAL_UART_IRQHandler+0xc8>
 80075a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2201      	movs	r2, #1
 80075b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075be:	f043 0201 	orr.w	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d011      	beq.n	80075f8 <HAL_UART_IRQHandler+0xf8>
 80075d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2202      	movs	r2, #2
 80075e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ee:	f043 0204 	orr.w	r2, r3, #4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d011      	beq.n	8007628 <HAL_UART_IRQHandler+0x128>
 8007604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2204      	movs	r2, #4
 8007616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	f043 0202 	orr.w	r2, r3, #2
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	2b00      	cmp	r3, #0
 8007632:	d017      	beq.n	8007664 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d105      	bne.n	800764c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007640:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007644:	4b5c      	ldr	r3, [pc, #368]	; (80077b8 <HAL_UART_IRQHandler+0x2b8>)
 8007646:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2208      	movs	r2, #8
 8007652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765a:	f043 0208 	orr.w	r2, r3, #8
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766c:	2b00      	cmp	r3, #0
 800766e:	d012      	beq.n	8007696 <HAL_UART_IRQHandler+0x196>
 8007670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00c      	beq.n	8007696 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768c:	f043 0220 	orr.w	r2, r3, #32
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8249 	beq.w	8007b34 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d013      	beq.n	80076d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d105      	bne.n	80076c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d005      	beq.n	80076fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d054      	beq.n	80077a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f81c 	bl	8008738 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d146      	bne.n	800779c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3308      	adds	r3, #8
 8007714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007724:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800772c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3308      	adds	r3, #8
 8007736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800773a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800773e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1d9      	bne.n	800770e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007760:	2b00      	cmp	r3, #0
 8007762:	d017      	beq.n	8007794 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776a:	4a15      	ldr	r2, [pc, #84]	; (80077c0 <HAL_UART_IRQHandler+0x2c0>)
 800776c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007774:	4618      	mov	r0, r3
 8007776:	f7fc fead 	bl	80044d4 <HAL_DMA_Abort_IT>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d019      	beq.n	80077b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800778e:	4610      	mov	r0, r2
 8007790:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007792:	e00f      	b.n	80077b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f9e1 	bl	8007b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779a:	e00b      	b.n	80077b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f9dd 	bl	8007b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a2:	e007      	b.n	80077b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f9d9 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80077b2:	e1bf      	b.n	8007b34 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b4:	bf00      	nop
    return;
 80077b6:	e1bd      	b.n	8007b34 <HAL_UART_IRQHandler+0x634>
 80077b8:	10000001 	.word	0x10000001
 80077bc:	04000120 	.word	0x04000120
 80077c0:	08008805 	.word	0x08008805

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	f040 8153 	bne.w	8007a74 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 814c 	beq.w	8007a74 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 8145 	beq.w	8007a74 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2210      	movs	r2, #16
 80077f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b40      	cmp	r3, #64	; 0x40
 80077fe:	f040 80bb 	bne.w	8007978 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 818f 	beq.w	8007b38 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007820:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007824:	429a      	cmp	r2, r3
 8007826:	f080 8187 	bcs.w	8007b38 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007830:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0320 	and.w	r3, r3, #32
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 8087 	bne.w	8007956 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800785c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	461a      	mov	r2, r3
 800786e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007876:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800787e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800788a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1da      	bne.n	8007848 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3308      	adds	r3, #8
 8007898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e1      	bne.n	8007892 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3308      	adds	r3, #8
 80078d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3308      	adds	r3, #8
 80078ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e3      	bne.n	80078ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007924:	f023 0310 	bic.w	r3, r3, #16
 8007928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007936:	65bb      	str	r3, [r7, #88]	; 0x58
 8007938:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800793c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e4      	bne.n	8007914 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007950:	4618      	mov	r0, r3
 8007952:	f7fc fd66 	bl	8004422 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2202      	movs	r2, #2
 800795a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007968:	b29b      	uxth	r3, r3
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	b29b      	uxth	r3, r3
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f8fd 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007976:	e0df      	b.n	8007b38 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007984:	b29b      	uxth	r3, r3
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80d1 	beq.w	8007b3c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800799a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80cc 	beq.w	8007b3c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079c6:	647b      	str	r3, [r7, #68]	; 0x44
 80079c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e4      	bne.n	80079a4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3308      	adds	r3, #8
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	623b      	str	r3, [r7, #32]
   return(result);
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f0:	f023 0301 	bic.w	r3, r3, #1
 80079f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a02:	633a      	str	r2, [r7, #48]	; 0x30
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e1      	bne.n	80079da <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0310 	bic.w	r3, r3, #16
 8007a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	69b9      	ldr	r1, [r7, #24]
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	617b      	str	r3, [r7, #20]
   return(result);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e4      	bne.n	8007a2a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f87f 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a72:	e063      	b.n	8007b3c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <HAL_UART_IRQHandler+0x59e>
 8007a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 fc12 	bl	80092c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a9c:	e051      	b.n	8007b42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d014      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d008      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d03a      	beq.n	8007b40 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
    }
    return;
 8007ad2:	e035      	b.n	8007b40 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <HAL_UART_IRQHandler+0x5f4>
 8007ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fe9f 	bl	8008830 <UART_EndTransmit_IT>
    return;
 8007af2:	e026      	b.n	8007b42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <HAL_UART_IRQHandler+0x614>
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fbeb 	bl	80092e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b12:	e016      	b.n	8007b42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d010      	beq.n	8007b42 <HAL_UART_IRQHandler+0x642>
 8007b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	da0c      	bge.n	8007b42 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fbd3 	bl	80092d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b2e:	e008      	b.n	8007b42 <HAL_UART_IRQHandler+0x642>
      return;
 8007b30:	bf00      	nop
 8007b32:	e006      	b.n	8007b42 <HAL_UART_IRQHandler+0x642>
    return;
 8007b34:	bf00      	nop
 8007b36:	e004      	b.n	8007b42 <HAL_UART_IRQHandler+0x642>
      return;
 8007b38:	bf00      	nop
 8007b3a:	e002      	b.n	8007b42 <HAL_UART_IRQHandler+0x642>
      return;
 8007b3c:	bf00      	nop
 8007b3e:	e000      	b.n	8007b42 <HAL_UART_IRQHandler+0x642>
    return;
 8007b40:	bf00      	nop
  }
}
 8007b42:	37e8      	adds	r7, #232	; 0xe8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b8c:	b08c      	sub	sp, #48	; 0x30
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4baa      	ldr	r3, [pc, #680]	; (8007e60 <UART_SetConfig+0x2d8>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a9f      	ldr	r2, [pc, #636]	; (8007e64 <UART_SetConfig+0x2dc>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007bfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	f023 010f 	bic.w	r1, r3, #15
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a90      	ldr	r2, [pc, #576]	; (8007e68 <UART_SetConfig+0x2e0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d125      	bne.n	8007c78 <UART_SetConfig+0xf0>
 8007c2c:	4b8f      	ldr	r3, [pc, #572]	; (8007e6c <UART_SetConfig+0x2e4>)
 8007c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d81a      	bhi.n	8007c70 <UART_SetConfig+0xe8>
 8007c3a:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <UART_SetConfig+0xb8>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c61 	.word	0x08007c61
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007c69 	.word	0x08007c69
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c56:	e116      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5e:	e112      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c66:	e10e      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c6e:	e10a      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c76:	e106      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a7c      	ldr	r2, [pc, #496]	; (8007e70 <UART_SetConfig+0x2e8>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d138      	bne.n	8007cf4 <UART_SetConfig+0x16c>
 8007c82:	4b7a      	ldr	r3, [pc, #488]	; (8007e6c <UART_SetConfig+0x2e4>)
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	f003 030c 	and.w	r3, r3, #12
 8007c8c:	2b0c      	cmp	r3, #12
 8007c8e:	d82d      	bhi.n	8007cec <UART_SetConfig+0x164>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0x110>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007ccd 	.word	0x08007ccd
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007ced 	.word	0x08007ced
 8007ca4:	08007ced 	.word	0x08007ced
 8007ca8:	08007cdd 	.word	0x08007cdd
 8007cac:	08007ced 	.word	0x08007ced
 8007cb0:	08007ced 	.word	0x08007ced
 8007cb4:	08007ced 	.word	0x08007ced
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	08007ced 	.word	0x08007ced
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	08007ced 	.word	0x08007ced
 8007cc8:	08007ce5 	.word	0x08007ce5
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cd2:	e0d8      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cda:	e0d4      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce2:	e0d0      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cea:	e0cc      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007cec:	2310      	movs	r3, #16
 8007cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf2:	e0c8      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a5e      	ldr	r2, [pc, #376]	; (8007e74 <UART_SetConfig+0x2ec>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d125      	bne.n	8007d4a <UART_SetConfig+0x1c2>
 8007cfe:	4b5b      	ldr	r3, [pc, #364]	; (8007e6c <UART_SetConfig+0x2e4>)
 8007d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d08:	2b30      	cmp	r3, #48	; 0x30
 8007d0a:	d016      	beq.n	8007d3a <UART_SetConfig+0x1b2>
 8007d0c:	2b30      	cmp	r3, #48	; 0x30
 8007d0e:	d818      	bhi.n	8007d42 <UART_SetConfig+0x1ba>
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	d00a      	beq.n	8007d2a <UART_SetConfig+0x1a2>
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d814      	bhi.n	8007d42 <UART_SetConfig+0x1ba>
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <UART_SetConfig+0x19a>
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d008      	beq.n	8007d32 <UART_SetConfig+0x1aa>
 8007d20:	e00f      	b.n	8007d42 <UART_SetConfig+0x1ba>
 8007d22:	2300      	movs	r3, #0
 8007d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d28:	e0ad      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d30:	e0a9      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d32:	2304      	movs	r3, #4
 8007d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d38:	e0a5      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d40:	e0a1      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d42:	2310      	movs	r3, #16
 8007d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d48:	e09d      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4a      	ldr	r2, [pc, #296]	; (8007e78 <UART_SetConfig+0x2f0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d125      	bne.n	8007da0 <UART_SetConfig+0x218>
 8007d54:	4b45      	ldr	r3, [pc, #276]	; (8007e6c <UART_SetConfig+0x2e4>)
 8007d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d60:	d016      	beq.n	8007d90 <UART_SetConfig+0x208>
 8007d62:	2bc0      	cmp	r3, #192	; 0xc0
 8007d64:	d818      	bhi.n	8007d98 <UART_SetConfig+0x210>
 8007d66:	2b80      	cmp	r3, #128	; 0x80
 8007d68:	d00a      	beq.n	8007d80 <UART_SetConfig+0x1f8>
 8007d6a:	2b80      	cmp	r3, #128	; 0x80
 8007d6c:	d814      	bhi.n	8007d98 <UART_SetConfig+0x210>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <UART_SetConfig+0x1f0>
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d008      	beq.n	8007d88 <UART_SetConfig+0x200>
 8007d76:	e00f      	b.n	8007d98 <UART_SetConfig+0x210>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e082      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d80:	2302      	movs	r3, #2
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d86:	e07e      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8e:	e07a      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d90:	2308      	movs	r3, #8
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d96:	e076      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d9e:	e072      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a35      	ldr	r2, [pc, #212]	; (8007e7c <UART_SetConfig+0x2f4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d12a      	bne.n	8007e00 <UART_SetConfig+0x278>
 8007daa:	4b30      	ldr	r3, [pc, #192]	; (8007e6c <UART_SetConfig+0x2e4>)
 8007dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007db8:	d01a      	beq.n	8007df0 <UART_SetConfig+0x268>
 8007dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dbe:	d81b      	bhi.n	8007df8 <UART_SetConfig+0x270>
 8007dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc4:	d00c      	beq.n	8007de0 <UART_SetConfig+0x258>
 8007dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dca:	d815      	bhi.n	8007df8 <UART_SetConfig+0x270>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <UART_SetConfig+0x250>
 8007dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd4:	d008      	beq.n	8007de8 <UART_SetConfig+0x260>
 8007dd6:	e00f      	b.n	8007df8 <UART_SetConfig+0x270>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dde:	e052      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007de0:	2302      	movs	r3, #2
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de6:	e04e      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007de8:	2304      	movs	r3, #4
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dee:	e04a      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007df0:	2308      	movs	r3, #8
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df6:	e046      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfe:	e042      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a17      	ldr	r2, [pc, #92]	; (8007e64 <UART_SetConfig+0x2dc>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d13a      	bne.n	8007e80 <UART_SetConfig+0x2f8>
 8007e0a:	4b18      	ldr	r3, [pc, #96]	; (8007e6c <UART_SetConfig+0x2e4>)
 8007e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e18:	d01a      	beq.n	8007e50 <UART_SetConfig+0x2c8>
 8007e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e1e:	d81b      	bhi.n	8007e58 <UART_SetConfig+0x2d0>
 8007e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e24:	d00c      	beq.n	8007e40 <UART_SetConfig+0x2b8>
 8007e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e2a:	d815      	bhi.n	8007e58 <UART_SetConfig+0x2d0>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <UART_SetConfig+0x2b0>
 8007e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e34:	d008      	beq.n	8007e48 <UART_SetConfig+0x2c0>
 8007e36:	e00f      	b.n	8007e58 <UART_SetConfig+0x2d0>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e3e:	e022      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007e40:	2302      	movs	r3, #2
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e46:	e01e      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007e48:	2304      	movs	r3, #4
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e4e:	e01a      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007e50:	2308      	movs	r3, #8
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e56:	e016      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007e58:	2310      	movs	r3, #16
 8007e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e5e:	e012      	b.n	8007e86 <UART_SetConfig+0x2fe>
 8007e60:	cfff69f3 	.word	0xcfff69f3
 8007e64:	40008000 	.word	0x40008000
 8007e68:	40013800 	.word	0x40013800
 8007e6c:	40021000 	.word	0x40021000
 8007e70:	40004400 	.word	0x40004400
 8007e74:	40004800 	.word	0x40004800
 8007e78:	40004c00 	.word	0x40004c00
 8007e7c:	40005000 	.word	0x40005000
 8007e80:	2310      	movs	r3, #16
 8007e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4aae      	ldr	r2, [pc, #696]	; (8008144 <UART_SetConfig+0x5bc>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	f040 8097 	bne.w	8007fc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d823      	bhi.n	8007ee2 <UART_SetConfig+0x35a>
 8007e9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ea0 <UART_SetConfig+0x318>)
 8007e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea0:	08007ec5 	.word	0x08007ec5
 8007ea4:	08007ee3 	.word	0x08007ee3
 8007ea8:	08007ecd 	.word	0x08007ecd
 8007eac:	08007ee3 	.word	0x08007ee3
 8007eb0:	08007ed3 	.word	0x08007ed3
 8007eb4:	08007ee3 	.word	0x08007ee3
 8007eb8:	08007ee3 	.word	0x08007ee3
 8007ebc:	08007ee3 	.word	0x08007ee3
 8007ec0:	08007edb 	.word	0x08007edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ec4:	f7fd fbea 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 8007ec8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eca:	e010      	b.n	8007eee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ecc:	4b9e      	ldr	r3, [pc, #632]	; (8008148 <UART_SetConfig+0x5c0>)
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ed0:	e00d      	b.n	8007eee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ed2:	f7fd fb75 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 8007ed6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ed8:	e009      	b.n	8007eee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ee0:	e005      	b.n	8007eee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007eec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8130 	beq.w	8008156 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	4a94      	ldr	r2, [pc, #592]	; (800814c <UART_SetConfig+0x5c4>)
 8007efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f00:	461a      	mov	r2, r3
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	4413      	add	r3, r2
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d305      	bcc.n	8007f26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d903      	bls.n	8007f2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f2c:	e113      	b.n	8008156 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2200      	movs	r2, #0
 8007f32:	60bb      	str	r3, [r7, #8]
 8007f34:	60fa      	str	r2, [r7, #12]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	4a84      	ldr	r2, [pc, #528]	; (800814c <UART_SetConfig+0x5c4>)
 8007f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2200      	movs	r2, #0
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f50:	f7f8 fdc8 	bl	8000ae4 <__aeabi_uldivmod>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	020b      	lsls	r3, r1, #8
 8007f66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f6a:	0202      	lsls	r2, r0, #8
 8007f6c:	6979      	ldr	r1, [r7, #20]
 8007f6e:	6849      	ldr	r1, [r1, #4]
 8007f70:	0849      	lsrs	r1, r1, #1
 8007f72:	2000      	movs	r0, #0
 8007f74:	460c      	mov	r4, r1
 8007f76:	4605      	mov	r5, r0
 8007f78:	eb12 0804 	adds.w	r8, r2, r4
 8007f7c:	eb43 0905 	adc.w	r9, r3, r5
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	469a      	mov	sl, r3
 8007f88:	4693      	mov	fp, r2
 8007f8a:	4652      	mov	r2, sl
 8007f8c:	465b      	mov	r3, fp
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 fda7 	bl	8000ae4 <__aeabi_uldivmod>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa4:	d308      	bcc.n	8007fb8 <UART_SetConfig+0x430>
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fac:	d204      	bcs.n	8007fb8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6a3a      	ldr	r2, [r7, #32]
 8007fb4:	60da      	str	r2, [r3, #12]
 8007fb6:	e0ce      	b.n	8008156 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007fbe:	e0ca      	b.n	8008156 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc8:	d166      	bne.n	8008098 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d827      	bhi.n	8008022 <UART_SetConfig+0x49a>
 8007fd2:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <UART_SetConfig+0x450>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	08008005 	.word	0x08008005
 8007fe0:	0800800d 	.word	0x0800800d
 8007fe4:	08008023 	.word	0x08008023
 8007fe8:	08008013 	.word	0x08008013
 8007fec:	08008023 	.word	0x08008023
 8007ff0:	08008023 	.word	0x08008023
 8007ff4:	08008023 	.word	0x08008023
 8007ff8:	0800801b 	.word	0x0800801b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ffc:	f7fd fb4e 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 8008000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008002:	e014      	b.n	800802e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008004:	f7fd fb60 	bl	80056c8 <HAL_RCC_GetPCLK2Freq>
 8008008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800800a:	e010      	b.n	800802e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800800c:	4b4e      	ldr	r3, [pc, #312]	; (8008148 <UART_SetConfig+0x5c0>)
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008010:	e00d      	b.n	800802e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008012:	f7fd fad5 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 8008016:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008018:	e009      	b.n	800802e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800801a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008020:	e005      	b.n	800802e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800802c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 8090 	beq.w	8008156 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	4a44      	ldr	r2, [pc, #272]	; (800814c <UART_SetConfig+0x5c4>)
 800803c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008040:	461a      	mov	r2, r3
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	fbb3 f3f2 	udiv	r3, r3, r2
 8008048:	005a      	lsls	r2, r3, #1
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	441a      	add	r2, r3
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	fbb2 f3f3 	udiv	r3, r2, r3
 800805a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	2b0f      	cmp	r3, #15
 8008060:	d916      	bls.n	8008090 <UART_SetConfig+0x508>
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008068:	d212      	bcs.n	8008090 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f023 030f 	bic.w	r3, r3, #15
 8008072:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	b29b      	uxth	r3, r3
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	b29a      	uxth	r2, r3
 8008080:	8bfb      	ldrh	r3, [r7, #30]
 8008082:	4313      	orrs	r3, r2
 8008084:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	8bfa      	ldrh	r2, [r7, #30]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	e062      	b.n	8008156 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008096:	e05e      	b.n	8008156 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800809c:	2b08      	cmp	r3, #8
 800809e:	d828      	bhi.n	80080f2 <UART_SetConfig+0x56a>
 80080a0:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <UART_SetConfig+0x520>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	080080f3 	.word	0x080080f3
 80080b8:	080080e3 	.word	0x080080e3
 80080bc:	080080f3 	.word	0x080080f3
 80080c0:	080080f3 	.word	0x080080f3
 80080c4:	080080f3 	.word	0x080080f3
 80080c8:	080080eb 	.word	0x080080eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080cc:	f7fd fae6 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 80080d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080d2:	e014      	b.n	80080fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d4:	f7fd faf8 	bl	80056c8 <HAL_RCC_GetPCLK2Freq>
 80080d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080da:	e010      	b.n	80080fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080dc:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <UART_SetConfig+0x5c0>)
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080e0:	e00d      	b.n	80080fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080e2:	f7fd fa6d 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 80080e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080e8:	e009      	b.n	80080fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080f0:	e005      	b.n	80080fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080fc:	bf00      	nop
    }

    if (pclk != 0U)
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	2b00      	cmp	r3, #0
 8008102:	d028      	beq.n	8008156 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	4a10      	ldr	r2, [pc, #64]	; (800814c <UART_SetConfig+0x5c4>)
 800810a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800810e:	461a      	mov	r2, r3
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	fbb3 f2f2 	udiv	r2, r3, r2
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	441a      	add	r2, r3
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	fbb2 f3f3 	udiv	r3, r2, r3
 8008126:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	2b0f      	cmp	r3, #15
 800812c:	d910      	bls.n	8008150 <UART_SetConfig+0x5c8>
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008134:	d20c      	bcs.n	8008150 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	b29a      	uxth	r2, r3
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60da      	str	r2, [r3, #12]
 8008140:	e009      	b.n	8008156 <UART_SetConfig+0x5ce>
 8008142:	bf00      	nop
 8008144:	40008000 	.word	0x40008000
 8008148:	00f42400 	.word	0x00f42400
 800814c:	080095f8 	.word	0x080095f8
      }
      else
      {
        ret = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2201      	movs	r2, #1
 800815a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2201      	movs	r2, #1
 8008162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2200      	movs	r2, #0
 800816a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2200      	movs	r2, #0
 8008170:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008172:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008176:	4618      	mov	r0, r3
 8008178:	3730      	adds	r7, #48	; 0x30
 800817a:	46bd      	mov	sp, r7
 800817c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01a      	beq.n	8008296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800827e:	d10a      	bne.n	8008296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	605a      	str	r2, [r3, #4]
  }
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b098      	sub	sp, #96	; 0x60
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082d4:	f7fa f9ee 	bl	80026b4 <HAL_GetTick>
 80082d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d12f      	bne.n	8008348 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f0:	2200      	movs	r2, #0
 80082f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f88e 	bl	8008418 <UART_WaitOnFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d022      	beq.n	8008348 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008316:	653b      	str	r3, [r7, #80]	; 0x50
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008320:	647b      	str	r3, [r7, #68]	; 0x44
 8008322:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800832e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e6      	bne.n	8008302 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e063      	b.n	8008410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b04      	cmp	r3, #4
 8008354:	d149      	bne.n	80083ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008356:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800835e:	2200      	movs	r2, #0
 8008360:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f857 	bl	8008418 <UART_WaitOnFlagUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d03c      	beq.n	80083ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	623b      	str	r3, [r7, #32]
   return(result);
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838e:	633b      	str	r3, [r7, #48]	; 0x30
 8008390:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e6      	bne.n	8008370 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3308      	adds	r3, #8
 80083a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f023 0301 	bic.w	r3, r3, #1
 80083b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c2:	61fa      	str	r2, [r7, #28]
 80083c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	69b9      	ldr	r1, [r7, #24]
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	617b      	str	r3, [r7, #20]
   return(result);
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e5      	bne.n	80083a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e012      	b.n	8008410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3758      	adds	r7, #88	; 0x58
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4613      	mov	r3, r2
 8008426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008428:	e04f      	b.n	80084ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d04b      	beq.n	80084ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008432:	f7fa f93f 	bl	80026b4 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	429a      	cmp	r2, r3
 8008440:	d302      	bcc.n	8008448 <UART_WaitOnFlagUntilTimeout+0x30>
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e04e      	b.n	80084ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0304 	and.w	r3, r3, #4
 8008456:	2b00      	cmp	r3, #0
 8008458:	d037      	beq.n	80084ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b80      	cmp	r3, #128	; 0x80
 800845e:	d034      	beq.n	80084ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d031      	beq.n	80084ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f003 0308 	and.w	r3, r3, #8
 8008470:	2b08      	cmp	r3, #8
 8008472:	d110      	bne.n	8008496 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2208      	movs	r2, #8
 800847a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f95b 	bl	8008738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2208      	movs	r2, #8
 8008486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e029      	b.n	80084ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a4:	d111      	bne.n	80084ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 f941 	bl	8008738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e00f      	b.n	80084ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	4013      	ands	r3, r2
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	bf0c      	ite	eq
 80084da:	2301      	moveq	r3, #1
 80084dc:	2300      	movne	r3, #0
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	79fb      	ldrb	r3, [r7, #7]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d0a0      	beq.n	800842a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b0a3      	sub	sp, #140	; 0x8c
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	88fa      	ldrh	r2, [r7, #6]
 800850c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	88fa      	ldrh	r2, [r7, #6]
 8008514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008526:	d10e      	bne.n	8008546 <UART_Start_Receive_IT+0x52>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <UART_Start_Receive_IT+0x48>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008536:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800853a:	e02d      	b.n	8008598 <UART_Start_Receive_IT+0xa4>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	22ff      	movs	r2, #255	; 0xff
 8008540:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008544:	e028      	b.n	8008598 <UART_Start_Receive_IT+0xa4>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10d      	bne.n	800856a <UART_Start_Receive_IT+0x76>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d104      	bne.n	8008560 <UART_Start_Receive_IT+0x6c>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	22ff      	movs	r2, #255	; 0xff
 800855a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800855e:	e01b      	b.n	8008598 <UART_Start_Receive_IT+0xa4>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	227f      	movs	r2, #127	; 0x7f
 8008564:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008568:	e016      	b.n	8008598 <UART_Start_Receive_IT+0xa4>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008572:	d10d      	bne.n	8008590 <UART_Start_Receive_IT+0x9c>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <UART_Start_Receive_IT+0x92>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	227f      	movs	r2, #127	; 0x7f
 8008580:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008584:	e008      	b.n	8008598 <UART_Start_Receive_IT+0xa4>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	223f      	movs	r2, #63	; 0x3f
 800858a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800858e:	e003      	b.n	8008598 <UART_Start_Receive_IT+0xa4>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2222      	movs	r2, #34	; 0x22
 80085a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3308      	adds	r3, #8
 80085ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80085b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80085cc:	673a      	str	r2, [r7, #112]	; 0x70
 80085ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80085d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80085da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e3      	bne.n	80085a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e8:	d14f      	bne.n	800868a <UART_Start_Receive_IT+0x196>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d349      	bcc.n	800868a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085fe:	d107      	bne.n	8008610 <UART_Start_Receive_IT+0x11c>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4a47      	ldr	r2, [pc, #284]	; (8008728 <UART_Start_Receive_IT+0x234>)
 800860c:	675a      	str	r2, [r3, #116]	; 0x74
 800860e:	e002      	b.n	8008616 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4a46      	ldr	r2, [pc, #280]	; (800872c <UART_Start_Receive_IT+0x238>)
 8008614:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01a      	beq.n	8008654 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800862c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008642:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800864e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e4      	bne.n	800861e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3308      	adds	r3, #8
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800866a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3308      	adds	r3, #8
 8008672:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008674:	64ba      	str	r2, [r7, #72]	; 0x48
 8008676:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800867a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e5      	bne.n	8008654 <UART_Start_Receive_IT+0x160>
 8008688:	e046      	b.n	8008718 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008692:	d107      	bne.n	80086a4 <UART_Start_Receive_IT+0x1b0>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d103      	bne.n	80086a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4a24      	ldr	r2, [pc, #144]	; (8008730 <UART_Start_Receive_IT+0x23c>)
 80086a0:	675a      	str	r2, [r3, #116]	; 0x74
 80086a2:	e002      	b.n	80086aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4a23      	ldr	r2, [pc, #140]	; (8008734 <UART_Start_Receive_IT+0x240>)
 80086a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d019      	beq.n	80086e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80086c6:	677b      	str	r3, [r7, #116]	; 0x74
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086d0:	637b      	str	r3, [r7, #52]	; 0x34
 80086d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d8:	e841 2300 	strex	r3, r2, [r1]
 80086dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e6      	bne.n	80086b2 <UART_Start_Receive_IT+0x1be>
 80086e4:	e018      	b.n	8008718 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	613b      	str	r3, [r7, #16]
   return(result);
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f043 0320 	orr.w	r3, r3, #32
 80086fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
 8008702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008704:	623b      	str	r3, [r7, #32]
 8008706:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	69f9      	ldr	r1, [r7, #28]
 800870a:	6a3a      	ldr	r2, [r7, #32]
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	61bb      	str	r3, [r7, #24]
   return(result);
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e6      	bne.n	80086e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	378c      	adds	r7, #140	; 0x8c
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	08008f59 	.word	0x08008f59
 800872c:	08008bf9 	.word	0x08008bf9
 8008730:	08008a41 	.word	0x08008a41
 8008734:	08008889 	.word	0x08008889

08008738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b095      	sub	sp, #84	; 0x54
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875e:	643b      	str	r3, [r7, #64]	; 0x40
 8008760:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e6      	bne.n	8008740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	61fb      	str	r3, [r7, #28]
   return(result);
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008788:	f023 0301 	bic.w	r3, r3, #1
 800878c:	64bb      	str	r3, [r7, #72]	; 0x48
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008798:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800879c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e3      	bne.n	8008772 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d118      	bne.n	80087e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f023 0310 	bic.w	r3, r3, #16
 80087c6:	647b      	str	r3, [r7, #68]	; 0x44
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d0:	61bb      	str	r3, [r7, #24]
 80087d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6979      	ldr	r1, [r7, #20]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	613b      	str	r3, [r7, #16]
   return(result);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e6      	bne.n	80087b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087f8:	bf00      	nop
 80087fa:	3754      	adds	r7, #84	; 0x54
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff f99a 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008828:	bf00      	nop
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	60bb      	str	r3, [r7, #8]
   return(result);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	61bb      	str	r3, [r7, #24]
 8008858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6979      	ldr	r1, [r7, #20]
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	613b      	str	r3, [r7, #16]
   return(result);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e6      	bne.n	8008838 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff f965 	bl	8007b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800887e:	bf00      	nop
 8008880:	3720      	adds	r7, #32
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b09c      	sub	sp, #112	; 0x70
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008896:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a0:	2b22      	cmp	r3, #34	; 0x22
 80088a2:	f040 80be 	bne.w	8008a22 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088b4:	b2d9      	uxtb	r1, r3
 80088b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c0:	400a      	ands	r2, r1
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f040 80a1 	bne.w	8008a32 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008904:	66bb      	str	r3, [r7, #104]	; 0x68
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800890e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008910:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800891c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e6      	bne.n	80088f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	f023 0301 	bic.w	r3, r3, #1
 8008938:	667b      	str	r3, [r7, #100]	; 0x64
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008942:	647a      	str	r2, [r7, #68]	; 0x44
 8008944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e5      	bne.n	8008922 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a33      	ldr	r2, [pc, #204]	; (8008a3c <UART_RxISR_8BIT+0x1b4>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d01f      	beq.n	80089b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d018      	beq.n	80089b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	623b      	str	r3, [r7, #32]
   return(result);
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008996:	663b      	str	r3, [r7, #96]	; 0x60
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089a0:	633b      	str	r3, [r7, #48]	; 0x30
 80089a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e6      	bne.n	8008982 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d12e      	bne.n	8008a1a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 0310 	bic.w	r3, r3, #16
 80089d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	461a      	mov	r2, r3
 80089de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	69b9      	ldr	r1, [r7, #24]
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	617b      	str	r3, [r7, #20]
   return(result);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e6      	bne.n	80089c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d103      	bne.n	8008a0a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2210      	movs	r2, #16
 8008a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff f8ac 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a18:	e00b      	b.n	8008a32 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7f9 f90a 	bl	8001c34 <HAL_UART_RxCpltCallback>
}
 8008a20:	e007      	b.n	8008a32 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699a      	ldr	r2, [r3, #24]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0208 	orr.w	r2, r2, #8
 8008a30:	619a      	str	r2, [r3, #24]
}
 8008a32:	bf00      	nop
 8008a34:	3770      	adds	r7, #112	; 0x70
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40008000 	.word	0x40008000

08008a40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b09c      	sub	sp, #112	; 0x70
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a58:	2b22      	cmp	r3, #34	; 0x22
 8008a5a:	f040 80be 	bne.w	8008bda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a6c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008a72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a76:	4013      	ands	r3, r2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a82:	1c9a      	adds	r2, r3, #2
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 80a1 	bne.w	8008bea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008abc:	667b      	str	r3, [r7, #100]	; 0x64
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ac8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e6      	bne.n	8008aa8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3308      	adds	r3, #8
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	f023 0301 	bic.w	r3, r3, #1
 8008af0:	663b      	str	r3, [r7, #96]	; 0x60
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3308      	adds	r3, #8
 8008af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008afa:	643a      	str	r2, [r7, #64]	; 0x40
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e5      	bne.n	8008ada <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a33      	ldr	r2, [pc, #204]	; (8008bf4 <UART_RxISR_16BIT+0x1b4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d01f      	beq.n	8008b6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d018      	beq.n	8008b6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e6      	bne.n	8008b3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d12e      	bne.n	8008bd2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f023 0310 	bic.w	r3, r3, #16
 8008b8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6979      	ldr	r1, [r7, #20]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e6      	bne.n	8008b7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	f003 0310 	and.w	r3, r3, #16
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	d103      	bne.n	8008bc2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2210      	movs	r2, #16
 8008bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fe ffd0 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bd0:	e00b      	b.n	8008bea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7f9 f82e 	bl	8001c34 <HAL_UART_RxCpltCallback>
}
 8008bd8:	e007      	b.n	8008bea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	699a      	ldr	r2, [r3, #24]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f042 0208 	orr.w	r2, r2, #8
 8008be8:	619a      	str	r2, [r3, #24]
}
 8008bea:	bf00      	nop
 8008bec:	3770      	adds	r7, #112	; 0x70
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	40008000 	.word	0x40008000

08008bf8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b0ac      	sub	sp, #176	; 0xb0
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c06:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c2e:	2b22      	cmp	r3, #34	; 0x22
 8008c30:	f040 8182 	bne.w	8008f38 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c3a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c3e:	e125      	b.n	8008e8c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008c4e:	b2d9      	uxtb	r1, r3
 8008c50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5a:	400a      	ands	r2, r1
 8008c5c:	b2d2      	uxtb	r2, r2
 8008c5e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	3b01      	subs	r3, #1
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d053      	beq.n	8008d3a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d011      	beq.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb8:	f043 0201 	orr.w	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d011      	beq.n	8008cf2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00b      	beq.n	8008cf2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce8:	f043 0204 	orr.w	r2, r3, #4
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d011      	beq.n	8008d22 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2204      	movs	r2, #4
 8008d10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d18:	f043 0202 	orr.w	r2, r3, #2
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7fe ff15 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f040 80a2 	bne.w	8008e8c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d6c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008d70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e4      	bne.n	8008d48 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3308      	adds	r3, #8
 8008d84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008da6:	66ba      	str	r2, [r7, #104]	; 0x68
 8008da8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008dac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e1      	bne.n	8008d7e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a5f      	ldr	r2, [pc, #380]	; (8008f50 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d021      	beq.n	8008e1c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d01a      	beq.n	8008e1c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e08:	657b      	str	r3, [r7, #84]	; 0x54
 8008e0a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e4      	bne.n	8008de6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d130      	bne.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	f023 0310 	bic.w	r3, r3, #16
 8008e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e4      	bne.n	8008e2a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	f003 0310 	and.w	r3, r3, #16
 8008e6a:	2b10      	cmp	r3, #16
 8008e6c:	d103      	bne.n	8008e76 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2210      	movs	r2, #16
 8008e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7fe fe76 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
 8008e84:	e002      	b.n	8008e8c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7f8 fed4 	bl	8001c34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e8c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e98:	f003 0320 	and.w	r3, r3, #32
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f47f aecf 	bne.w	8008c40 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ea8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008eac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d049      	beq.n	8008f48 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008eba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d242      	bcs.n	8008f48 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e3      	bne.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008efe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f043 0320 	orr.w	r3, r3, #32
 8008f14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f22:	61bb      	str	r3, [r7, #24]
 8008f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	6979      	ldr	r1, [r7, #20]
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1e4      	bne.n	8008f00 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f36:	e007      	b.n	8008f48 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699a      	ldr	r2, [r3, #24]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0208 	orr.w	r2, r2, #8
 8008f46:	619a      	str	r2, [r3, #24]
}
 8008f48:	bf00      	nop
 8008f4a:	37b0      	adds	r7, #176	; 0xb0
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	40008000 	.word	0x40008000
 8008f54:	08008889 	.word	0x08008889

08008f58 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0ae      	sub	sp, #184	; 0xb8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f66:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f8e:	2b22      	cmp	r3, #34	; 0x22
 8008f90:	f040 8186 	bne.w	80092a0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f9a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f9e:	e129      	b.n	80091f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fb2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008fb6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008fba:	4013      	ands	r3, r2
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc8:	1c9a      	adds	r2, r3, #2
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d053      	beq.n	800909e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d011      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2201      	movs	r2, #1
 8009014:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800901c:	f043 0201 	orr.w	r2, r3, #1
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d011      	beq.n	8009056 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00b      	beq.n	8009056 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2202      	movs	r2, #2
 8009044:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904c:	f043 0204 	orr.w	r2, r3, #4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800905a:	f003 0304 	and.w	r3, r3, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d011      	beq.n	8009086 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2204      	movs	r2, #4
 8009074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907c:	f043 0202 	orr.w	r2, r3, #2
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800908c:	2b00      	cmp	r3, #0
 800908e:	d006      	beq.n	800909e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7fe fd63 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 80a4 	bne.w	80091f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090d2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e2      	bne.n	80090ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3308      	adds	r3, #8
 80090ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090f0:	e853 3f00 	ldrex	r3, [r3]
 80090f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090fc:	f023 0301 	bic.w	r3, r3, #1
 8009100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3308      	adds	r3, #8
 800910a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800910e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800911c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e1      	bne.n	80090e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a5f      	ldr	r2, [pc, #380]	; (80092b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d021      	beq.n	8009184 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d01a      	beq.n	8009184 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800915c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009170:	65bb      	str	r3, [r7, #88]	; 0x58
 8009172:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800917e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e4      	bne.n	800914e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009188:	2b01      	cmp	r3, #1
 800918a:	d130      	bne.n	80091ee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a2:	f023 0310 	bic.w	r3, r3, #16
 80091a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091b4:	647b      	str	r3, [r7, #68]	; 0x44
 80091b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e4      	bne.n	8009192 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	f003 0310 	and.w	r3, r3, #16
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d103      	bne.n	80091de <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2210      	movs	r2, #16
 80091dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7fe fcc2 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
 80091ec:	e002      	b.n	80091f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7f8 fd20 	bl	8001c34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d006      	beq.n	800920a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80091fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	f47f aecb 	bne.w	8008fa0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009210:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009214:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009218:	2b00      	cmp	r3, #0
 800921a:	d049      	beq.n	80092b0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009222:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009226:	429a      	cmp	r2, r3
 8009228:	d242      	bcs.n	80092b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3308      	adds	r3, #8
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	623b      	str	r3, [r7, #32]
   return(result);
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800924e:	633a      	str	r2, [r7, #48]	; 0x30
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e3      	bne.n	800922a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a15      	ldr	r2, [pc, #84]	; (80092bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009266:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	60fb      	str	r3, [r7, #12]
   return(result);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f043 0320 	orr.w	r3, r3, #32
 800927c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	69b9      	ldr	r1, [r7, #24]
 8009290:	69fa      	ldr	r2, [r7, #28]
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	617b      	str	r3, [r7, #20]
   return(result);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e4      	bne.n	8009268 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800929e:	e007      	b.n	80092b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	699a      	ldr	r2, [r3, #24]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0208 	orr.w	r2, r2, #8
 80092ae:	619a      	str	r2, [r3, #24]
}
 80092b0:	bf00      	nop
 80092b2:	37b8      	adds	r7, #184	; 0xb8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	40008000 	.word	0x40008000
 80092bc:	08008a41 	.word	0x08008a41

080092c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800930a:	2b01      	cmp	r3, #1
 800930c:	d101      	bne.n	8009312 <HAL_UARTEx_DisableFifoMode+0x16>
 800930e:	2302      	movs	r3, #2
 8009310:	e027      	b.n	8009362 <HAL_UARTEx_DisableFifoMode+0x66>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2224      	movs	r2, #36	; 0x24
 800931e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0201 	bic.w	r2, r2, #1
 8009338:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009340:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2220      	movs	r2, #32
 8009354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800937e:	2b01      	cmp	r3, #1
 8009380:	d101      	bne.n	8009386 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009382:	2302      	movs	r3, #2
 8009384:	e02d      	b.n	80093e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2224      	movs	r2, #36	; 0x24
 8009392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f022 0201 	bic.w	r2, r2, #1
 80093ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f850 	bl	8009468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093fe:	2302      	movs	r3, #2
 8009400:	e02d      	b.n	800945e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2224      	movs	r2, #36	; 0x24
 800940e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0201 	bic.w	r2, r2, #1
 8009428:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f812 	bl	8009468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009474:	2b00      	cmp	r3, #0
 8009476:	d108      	bne.n	800948a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009488:	e031      	b.n	80094ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800948a:	2308      	movs	r3, #8
 800948c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800948e:	2308      	movs	r3, #8
 8009490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	0e5b      	lsrs	r3, r3, #25
 800949a:	b2db      	uxtb	r3, r3
 800949c:	f003 0307 	and.w	r3, r3, #7
 80094a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	0f5b      	lsrs	r3, r3, #29
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 0307 	and.w	r3, r3, #7
 80094b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	7b3a      	ldrb	r2, [r7, #12]
 80094b6:	4911      	ldr	r1, [pc, #68]	; (80094fc <UARTEx_SetNbDataToProcess+0x94>)
 80094b8:	5c8a      	ldrb	r2, [r1, r2]
 80094ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094be:	7b3a      	ldrb	r2, [r7, #12]
 80094c0:	490f      	ldr	r1, [pc, #60]	; (8009500 <UARTEx_SetNbDataToProcess+0x98>)
 80094c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	7b7a      	ldrb	r2, [r7, #13]
 80094d4:	4909      	ldr	r1, [pc, #36]	; (80094fc <UARTEx_SetNbDataToProcess+0x94>)
 80094d6:	5c8a      	ldrb	r2, [r1, r2]
 80094d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094dc:	7b7a      	ldrb	r2, [r7, #13]
 80094de:	4908      	ldr	r1, [pc, #32]	; (8009500 <UARTEx_SetNbDataToProcess+0x98>)
 80094e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094ee:	bf00      	nop
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	08009610 	.word	0x08009610
 8009500:	08009618 	.word	0x08009618

08009504 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	ed93 7a06 	vldr	s14, [r3, #24]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	edd3 7a07 	vldr	s15, [r3, #28]
 800951a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	edd3 7a08 	vldr	s15, [r3, #32]
 8009524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	edd3 7a06 	vldr	s15, [r3, #24]
 8009534:	eeb1 7a67 	vneg.f32	s14, s15
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	edd3 7a08 	vldr	s15, [r3, #32]
 800953e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a1a      	ldr	r2, [r3, #32]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d006      	beq.n	8009568 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	330c      	adds	r3, #12
 800955e:	220c      	movs	r2, #12
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f000 f804 	bl	8009570 <memset>
  }

}
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <memset>:
 8009570:	4402      	add	r2, r0
 8009572:	4603      	mov	r3, r0
 8009574:	4293      	cmp	r3, r2
 8009576:	d100      	bne.n	800957a <memset+0xa>
 8009578:	4770      	bx	lr
 800957a:	f803 1b01 	strb.w	r1, [r3], #1
 800957e:	e7f9      	b.n	8009574 <memset+0x4>

08009580 <__libc_init_array>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	4d0d      	ldr	r5, [pc, #52]	; (80095b8 <__libc_init_array+0x38>)
 8009584:	4c0d      	ldr	r4, [pc, #52]	; (80095bc <__libc_init_array+0x3c>)
 8009586:	1b64      	subs	r4, r4, r5
 8009588:	10a4      	asrs	r4, r4, #2
 800958a:	2600      	movs	r6, #0
 800958c:	42a6      	cmp	r6, r4
 800958e:	d109      	bne.n	80095a4 <__libc_init_array+0x24>
 8009590:	4d0b      	ldr	r5, [pc, #44]	; (80095c0 <__libc_init_array+0x40>)
 8009592:	4c0c      	ldr	r4, [pc, #48]	; (80095c4 <__libc_init_array+0x44>)
 8009594:	f000 f818 	bl	80095c8 <_init>
 8009598:	1b64      	subs	r4, r4, r5
 800959a:	10a4      	asrs	r4, r4, #2
 800959c:	2600      	movs	r6, #0
 800959e:	42a6      	cmp	r6, r4
 80095a0:	d105      	bne.n	80095ae <__libc_init_array+0x2e>
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a8:	4798      	blx	r3
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7ee      	b.n	800958c <__libc_init_array+0xc>
 80095ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b2:	4798      	blx	r3
 80095b4:	3601      	adds	r6, #1
 80095b6:	e7f2      	b.n	800959e <__libc_init_array+0x1e>
 80095b8:	08009628 	.word	0x08009628
 80095bc:	08009628 	.word	0x08009628
 80095c0:	08009628 	.word	0x08009628
 80095c4:	0800962c 	.word	0x0800962c

080095c8 <_init>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr

080095d4 <_fini>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr
