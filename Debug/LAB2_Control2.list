
LAB2_Control2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008674  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800884c  0800884c  0001884c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800888c  0800888c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008894  08008894  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800889c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000014  080088b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080088b0  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ce0  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c7e  00000000  00000000  00037d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0003a9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001053  00000000  00000000  0003bed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028dbb  00000000  00000000  0003cf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018755  00000000  00000000  00065cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001140ae  00000000  00000000  0007e433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c0c  00000000  00000000  001924e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001980f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008834 	.word	0x08008834

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08008834 	.word	0x08008834

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b970 	b.w	8000ddc <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9e08      	ldr	r6, [sp, #32]
 8000b1a:	460d      	mov	r5, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	460f      	mov	r7, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4694      	mov	ip, r2
 8000b28:	d965      	bls.n	8000bf6 <__udivmoddi4+0xe2>
 8000b2a:	fab2 f382 	clz	r3, r2
 8000b2e:	b143      	cbz	r3, 8000b42 <__udivmoddi4+0x2e>
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	f1c3 0220 	rsb	r2, r3, #32
 8000b38:	409f      	lsls	r7, r3
 8000b3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	409c      	lsls	r4, r3
 8000b42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b46:	fa1f f58c 	uxth.w	r5, ip
 8000b4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b4e:	0c22      	lsrs	r2, r4, #16
 8000b50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b58:	fb01 f005 	mul.w	r0, r1, r5
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b60:	eb1c 0202 	adds.w	r2, ip, r2
 8000b64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b68:	f080 811c 	bcs.w	8000da4 <__udivmoddi4+0x290>
 8000b6c:	4290      	cmp	r0, r2
 8000b6e:	f240 8119 	bls.w	8000da4 <__udivmoddi4+0x290>
 8000b72:	3902      	subs	r1, #2
 8000b74:	4462      	add	r2, ip
 8000b76:	1a12      	subs	r2, r2, r0
 8000b78:	b2a4      	uxth	r4, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b86:	fb00 f505 	mul.w	r5, r0, r5
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x90>
 8000b8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b96:	f080 8107 	bcs.w	8000da8 <__udivmoddi4+0x294>
 8000b9a:	42a5      	cmp	r5, r4
 8000b9c:	f240 8104 	bls.w	8000da8 <__udivmoddi4+0x294>
 8000ba0:	4464      	add	r4, ip
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba8:	1b64      	subs	r4, r4, r5
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11e      	cbz	r6, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40dc      	lsrs	r4, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0xbc>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	f000 80ed 	beq.w	8000d9e <__udivmoddi4+0x28a>
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd0:	fab3 f183 	clz	r1, r3
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	d149      	bne.n	8000c6c <__udivmoddi4+0x158>
 8000bd8:	42ab      	cmp	r3, r5
 8000bda:	d302      	bcc.n	8000be2 <__udivmoddi4+0xce>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	f200 80f8 	bhi.w	8000dd2 <__udivmoddi4+0x2be>
 8000be2:	1a84      	subs	r4, r0, r2
 8000be4:	eb65 0203 	sbc.w	r2, r5, r3
 8000be8:	2001      	movs	r0, #1
 8000bea:	4617      	mov	r7, r2
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d0e2      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bf4:	e7df      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf6:	b902      	cbnz	r2, 8000bfa <__udivmoddi4+0xe6>
 8000bf8:	deff      	udf	#255	; 0xff
 8000bfa:	fab2 f382 	clz	r3, r2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 8090 	bne.w	8000d24 <__udivmoddi4+0x210>
 8000c04:	1a8a      	subs	r2, r1, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2101      	movs	r1, #1
 8000c10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c14:	fb07 2015 	mls	r0, r7, r5, r2
 8000c18:	0c22      	lsrs	r2, r4, #16
 8000c1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c1e:	fb0e f005 	mul.w	r0, lr, r5
 8000c22:	4290      	cmp	r0, r2
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x124>
 8000c26:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x122>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2b8>
 8000c36:	4645      	mov	r5, r8
 8000c38:	1a12      	subs	r2, r2, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c40:	fb07 2210 	mls	r2, r7, r0, r2
 8000c44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x14e>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x14c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2c2>
 8000c60:	4610      	mov	r0, r2
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c6a:	e79f      	b.n	8000bac <__udivmoddi4+0x98>
 8000c6c:	f1c1 0720 	rsb	r7, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c82:	40fd      	lsrs	r5, r7
 8000c84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c88:	4323      	orrs	r3, r4
 8000c8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c8e:	fa1f fe8c 	uxth.w	lr, ip
 8000c92:	fb09 5518 	mls	r5, r9, r8, r5
 8000c96:	0c1c      	lsrs	r4, r3, #16
 8000c98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca6:	fa00 f001 	lsl.w	r0, r0, r1
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b0>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2b4>
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2b4>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4464      	add	r4, ip
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	b29d      	uxth	r5, r3
 8000cc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ccc:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd8:	45a6      	cmp	lr, r4
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1da>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2ac>
 8000ce6:	45a6      	cmp	lr, r4
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2ac>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	4464      	add	r4, ip
 8000cee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cf2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	42ac      	cmp	r4, r5
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46ae      	mov	lr, r5
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x29c>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x298>
 8000d04:	b156      	cbz	r6, 8000d1c <__udivmoddi4+0x208>
 8000d06:	ebb0 0208 	subs.w	r2, r0, r8
 8000d0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d12:	40ca      	lsrs	r2, r1
 8000d14:	40cc      	lsrs	r4, r1
 8000d16:	4317      	orrs	r7, r2
 8000d18:	e9c6 7400 	strd	r7, r4, [r6]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	f1c3 0120 	rsb	r1, r3, #32
 8000d28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d30:	fa25 f101 	lsr.w	r1, r5, r1
 8000d34:	409d      	lsls	r5, r3
 8000d36:	432a      	orrs	r2, r5
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1510 	mls	r5, r7, r0, r1
 8000d48:	0c11      	lsrs	r1, r2, #16
 8000d4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d52:	428d      	cmp	r5, r1
 8000d54:	fa04 f403 	lsl.w	r4, r4, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x258>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d64:	428d      	cmp	r5, r1
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4461      	add	r1, ip
 8000d6c:	1b49      	subs	r1, r1, r5
 8000d6e:	b292      	uxth	r2, r2
 8000d70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d74:	fb07 1115 	mls	r1, r7, r5, r1
 8000d78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d80:	4291      	cmp	r1, r2
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x282>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2a8>
 8000d8e:	4291      	cmp	r1, r2
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2a8>
 8000d92:	3d02      	subs	r5, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a52      	subs	r2, r2, r1
 8000d98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0xfc>
 8000d9e:	4631      	mov	r1, r6
 8000da0:	4630      	mov	r0, r6
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000da4:	4639      	mov	r1, r7
 8000da6:	e6e6      	b.n	8000b76 <__udivmoddi4+0x62>
 8000da8:	4610      	mov	r0, r2
 8000daa:	e6fb      	b.n	8000ba4 <__udivmoddi4+0x90>
 8000dac:	4548      	cmp	r0, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f0>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000db8:	3b01      	subs	r3, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f0>
 8000dbc:	4645      	mov	r5, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dc0:	462b      	mov	r3, r5
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1da>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x258>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b0>
 8000dcc:	3d02      	subs	r5, #2
 8000dce:	4462      	add	r2, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x124>
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e70a      	b.n	8000bec <__udivmoddi4+0xd8>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x14e>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f000 fee2 	bl	8001bae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f94f 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f000 fafd 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000df2:	f000 fad1 	bl	8001398 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000df6:	f000 fa0d 	bl	8001214 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000dfa:	f000 f993 	bl	8001124 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dfe:	f000 fa53 	bl	80012a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e02:	217f      	movs	r1, #127	; 0x7f
 8000e04:	488c      	ldr	r0, [pc, #560]	; (8001038 <main+0x258>)
 8000e06:	f002 fa51 	bl	80032ac <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000e0a:	2228      	movs	r2, #40	; 0x28
 8000e0c:	498b      	ldr	r1, [pc, #556]	; (800103c <main+0x25c>)
 8000e0e:	488a      	ldr	r0, [pc, #552]	; (8001038 <main+0x258>)
 8000e10:	f001 fb3e 	bl	8002490 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8000e14:	2204      	movs	r2, #4
 8000e16:	498a      	ldr	r1, [pc, #552]	; (8001040 <main+0x260>)
 8000e18:	488a      	ldr	r0, [pc, #552]	; (8001044 <main+0x264>)
 8000e1a:	f005 fc5b 	bl	80066d4 <HAL_UART_Receive_IT>
//  UARTDMAConfig();
  HAL_TIM_Base_Start(&htim3);
 8000e1e:	488a      	ldr	r0, [pc, #552]	; (8001048 <main+0x268>)
 8000e20:	f004 fa36 	bl	8005290 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e24:	2100      	movs	r1, #0
 8000e26:	4888      	ldr	r0, [pc, #544]	; (8001048 <main+0x268>)
 8000e28:	f004 fb04 	bl	8005434 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f003 f968 	bl	8004108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	4883      	ldr	r0, [pc, #524]	; (800104c <main+0x26c>)
 8000e3e:	f003 f963 	bl	8004108 <HAL_GPIO_WritePin>

  PID.Kp = 1;
 8000e42:	4b83      	ldr	r3, [pc, #524]	; (8001050 <main+0x270>)
 8000e44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e48:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.00000001;
 8000e4a:	4b81      	ldr	r3, [pc, #516]	; (8001050 <main+0x270>)
 8000e4c:	4a81      	ldr	r2, [pc, #516]	; (8001054 <main+0x274>)
 8000e4e:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000e50:	4b7f      	ldr	r3, [pc, #508]	; (8001050 <main+0x270>)
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	487d      	ldr	r0, [pc, #500]	; (8001050 <main+0x270>)
 8000e5c:	f007 fc88 	bl	8008770 <arm_pid_init_f32>
//	  }
//	  else{
//		  a++;
//	  }
//	  last_angle1 = ADC1_Channel.data;
	  if(mode == 3){
 8000e60:	4b7d      	ldr	r3, [pc, #500]	; (8001058 <main+0x278>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d12c      	bne.n	8000ec2 <main+0xe2>
		  static uint32_t TimeStamp = 0;
		  if( HAL_GetTick()>=TimeStamp){
 8000e68:	f000 ff06 	bl	8001c78 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b7b      	ldr	r3, [pc, #492]	; (800105c <main+0x27c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d325      	bcc.n	8000ec2 <main+0xe2>
			  TimeStamp = HAL_GetTick()+5;
 8000e76:	f000 feff 	bl	8001c78 <HAL_GetTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	3305      	adds	r3, #5
 8000e7e:	4a77      	ldr	r2, [pc, #476]	; (800105c <main+0x27c>)
 8000e80:	6013      	str	r3, [r2, #0]
			  angle = Average_ADC();
 8000e82:	f000 fb37 	bl	80014f4 <Average_ADC>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b75      	ldr	r3, [pc, #468]	; (8001060 <main+0x280>)
 8000e8c:	801a      	strh	r2, [r3, #0]

			  TxBuffer[0] = 69; // header
 8000e8e:	4b75      	ldr	r3, [pc, #468]	; (8001064 <main+0x284>)
 8000e90:	2245      	movs	r2, #69	; 0x45
 8000e92:	701a      	strb	r2, [r3, #0]
			  TxBuffer[1] = angle & 0xff;
 8000e94:	4b72      	ldr	r3, [pc, #456]	; (8001060 <main+0x280>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b72      	ldr	r3, [pc, #456]	; (8001064 <main+0x284>)
 8000e9c:	705a      	strb	r2, [r3, #1]
			  TxBuffer[2] = (angle & 0xff00) >> 8;
 8000e9e:	4b70      	ldr	r3, [pc, #448]	; (8001060 <main+0x280>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <main+0x284>)
 8000eaa:	709a      	strb	r2, [r3, #2]
			  TxBuffer[3] = 10; // \n
 8000eac:	4b6d      	ldr	r3, [pc, #436]	; (8001064 <main+0x284>)
 8000eae:	220a      	movs	r2, #10
 8000eb0:	70da      	strb	r2, [r3, #3]

			  HAL_UART_Transmit(&hlpuart1,TxBuffer, 4, 10);
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	496b      	ldr	r1, [pc, #428]	; (8001064 <main+0x284>)
 8000eb8:	4862      	ldr	r0, [pc, #392]	; (8001044 <main+0x264>)
 8000eba:	f005 fb7d 	bl	80065b8 <HAL_UART_Transmit>

			  setMotor();
 8000ebe:	f000 fb67 	bl	8001590 <setMotor>
		  }
	  }

	  if(mode == 1){
 8000ec2:	4b65      	ldr	r3, [pc, #404]	; (8001058 <main+0x278>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d1ca      	bne.n	8000e60 <main+0x80>
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 8000eca:	f000 fed5 	bl	8001c78 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b65      	ldr	r3, [pc, #404]	; (8001068 <main+0x288>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d9c3      	bls.n	8000e60 <main+0x80>
		  {
			  timestamp = HAL_GetTick()+2;
 8000ed8:	f000 fece 	bl	8001c78 <HAL_GetTick>
 8000edc:	4603      	mov	r3, r0
 8000ede:	3302      	adds	r3, #2
 8000ee0:	4a61      	ldr	r2, [pc, #388]	; (8001068 <main+0x288>)
 8000ee2:	6013      	str	r3, [r2, #0]

			  Wrapselect();
 8000ee4:	f000 fbb4 	bl	8001650 <Wrapselect>
			  Vfeedback = arm_pid_f32(&PID, Error);
 8000ee8:	4b60      	ldr	r3, [pc, #384]	; (800106c <main+0x28c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a58      	ldr	r2, [pc, #352]	; (8001050 <main+0x270>)
 8000eee:	60fa      	str	r2, [r7, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	ed93 7a00 	vldr	s14, [r3]
 8000ef8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000f10:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f32:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a48      	ldr	r2, [pc, #288]	; (8001070 <main+0x290>)
 8000f4e:	6013      	str	r3, [r2, #0]
			  position = Average_ADC()/4095.0*2*M_PI;
 8000f50:	f000 fad0 	bl	80014f4 <Average_ADC>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fab0 	bl	80004bc <__aeabi_i2d>
 8000f5c:	a330      	add	r3, pc, #192	; (adr r3, 8001020 <main+0x240>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fc3f 	bl	80007e4 <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	f7ff f957 	bl	8000224 <__adddf3>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	a32a      	add	r3, pc, #168	; (adr r3, 8001028 <main+0x248>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fb04 	bl	8000590 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fd58 	bl	8000a44 <__aeabi_d2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a37      	ldr	r2, [pc, #220]	; (8001074 <main+0x294>)
 8000f98:	6013      	str	r3, [r2, #0]
			  if (Vfeedback > 12)
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <main+0x290>)
 8000f9c:	edd3 7a00 	vldr	s15, [r3]
 8000fa0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fac:	dd03      	ble.n	8000fb6 <main+0x1d6>
				  Vfeedback = 12;
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <main+0x290>)
 8000fb0:	4a31      	ldr	r2, [pc, #196]	; (8001078 <main+0x298>)
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e00c      	b.n	8000fd0 <main+0x1f0>
			  else if (Vfeedback < -12)
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <main+0x290>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 8000fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	d502      	bpl.n	8000fd0 <main+0x1f0>
				  Vfeedback = -12;
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <main+0x290>)
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	; (800107c <main+0x29c>)
 8000fce:	601a      	str	r2, [r3, #0]
			  PWM = Vfeedback*32767.0/12.0;
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <main+0x290>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa83 	bl	80004e0 <__aeabi_f2d>
 8000fda:	a315      	add	r3, pc, #84	; (adr r3, 8001030 <main+0x250>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fad6 	bl	8000590 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <main+0x2a0>)
 8000ff2:	f7ff fbf7 	bl	80007e4 <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fcd9 	bl	80009b4 <__aeabi_d2iz>
 8001002:	4603      	mov	r3, r0
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <main+0x2a4>)
 8001008:	801a      	strh	r2, [r3, #0]
			  setMotor();
 800100a:	f000 fac1 	bl	8001590 <setMotor>
			  a++;
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <main+0x2a8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <main+0x2a8>)
 8001016:	6013      	str	r3, [r2, #0]
	  if(mode == 3){
 8001018:	e722      	b.n	8000e60 <main+0x80>
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	00000000 	.word	0x00000000
 8001024:	40affe00 	.word	0x40affe00
 8001028:	54442d18 	.word	0x54442d18
 800102c:	400921fb 	.word	0x400921fb
 8001030:	00000000 	.word	0x00000000
 8001034:	40dfffc0 	.word	0x40dfffc0
 8001038:	20000030 	.word	0x20000030
 800103c:	200001dc 	.word	0x200001dc
 8001040:	20000230 	.word	0x20000230
 8001044:	200000fc 	.word	0x200000fc
 8001048:	20000190 	.word	0x20000190
 800104c:	48000400 	.word	0x48000400
 8001050:	20000240 	.word	0x20000240
 8001054:	322bcc77 	.word	0x322bcc77
 8001058:	20000000 	.word	0x20000000
 800105c:	20000280 	.word	0x20000280
 8001060:	2000022c 	.word	0x2000022c
 8001064:	20000238 	.word	0x20000238
 8001068:	20000284 	.word	0x20000284
 800106c:	2000027c 	.word	0x2000027c
 8001070:	2000026c 	.word	0x2000026c
 8001074:	20000264 	.word	0x20000264
 8001078:	41400000 	.word	0x41400000
 800107c:	c1400000 	.word	0xc1400000
 8001080:	40280000 	.word	0x40280000
 8001084:	2000023e 	.word	0x2000023e
 8001088:	20000004 	.word	0x20000004

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	2238      	movs	r2, #56	; 0x38
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f007 fb9e 	bl	80087dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f003 f866 	bl	8004180 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010ce:	2355      	movs	r3, #85	; 0x55
 80010d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 f900 	bl	80042e8 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010ee:	f000 fb7b 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2104      	movs	r1, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fbfe 	bl	800490c <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001116:	f000 fb67 	bl	80017e8 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	; 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2220      	movs	r2, #32
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f007 fb4d 	bl	80087dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <MX_ADC1_Init+0xe8>)
 8001144:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001148:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <MX_ADC1_Init+0xe8>)
 800114c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001150:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <MX_ADC1_Init+0xe8>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_ADC1_Init+0xe8>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <MX_ADC1_Init+0xe8>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <MX_ADC1_Init+0xe8>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116a:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_ADC1_Init+0xe8>)
 800116c:	2204      	movs	r2, #4
 800116e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_ADC1_Init+0xe8>)
 8001172:	2200      	movs	r2, #0
 8001174:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_ADC1_Init+0xe8>)
 8001178:	2201      	movs	r2, #1
 800117a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <MX_ADC1_Init+0xe8>)
 800117e:	2201      	movs	r2, #1
 8001180:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_ADC1_Init+0xe8>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <MX_ADC1_Init+0xe8>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_ADC1_Init+0xe8>)
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_ADC1_Init+0xe8>)
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_ADC1_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_ADC1_Init+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ac:	4817      	ldr	r0, [pc, #92]	; (800120c <MX_ADC1_Init+0xe8>)
 80011ae:	f000 ffb3 	bl	8002118 <HAL_ADC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80011b8:	f000 fb16 	bl	80017e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_ADC1_Init+0xe8>)
 80011c8:	f002 f8d2 	bl	8003370 <HAL_ADCEx_MultiModeConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011d2:	f000 fb09 	bl	80017e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_ADC1_Init+0xec>)
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011da:	2306      	movs	r3, #6
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e2:	237f      	movs	r3, #127	; 0x7f
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e6:	2304      	movs	r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_ADC1_Init+0xe8>)
 80011f4:	f001 fa3e 	bl	8002674 <HAL_ADC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80011fe:	f000 faf3 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000030 	.word	0x20000030
 8001210:	04300002 	.word	0x04300002

08001214 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <MX_LPUART1_UART_Init+0x90>)
 800121c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001252:	2200      	movs	r2, #0
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001256:	4812      	ldr	r0, [pc, #72]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001258:	f005 f95e 	bl	8006518 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001262:	f000 fac1 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800126a:	f007 f9b6 	bl	80085da <HAL_UARTEx_SetTxFifoThreshold>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001274:	f000 fab8 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	4809      	ldr	r0, [pc, #36]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800127c:	f007 f9eb 	bl	8008656 <HAL_UARTEx_SetRxFifoThreshold>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001286:	f000 faaf 	bl	80017e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800128c:	f007 f96c 	bl	8008568 <HAL_UARTEx_DisableFifoMode>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001296:	f000 faa7 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000fc 	.word	0x200000fc
 80012a4:	40008000 	.word	0x40008000

080012a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_TIM3_Init+0xe8>)
 80012dc:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <MX_TIM3_Init+0xec>)
 80012de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <MX_TIM3_Init+0xe8>)
 80012e2:	22a9      	movs	r2, #169	; 0xa9
 80012e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <MX_TIM3_Init+0xe8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <MX_TIM3_Init+0xe8>)
 80012ee:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_TIM3_Init+0xe8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <MX_TIM3_Init+0xe8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001300:	4823      	ldr	r0, [pc, #140]	; (8001390 <MX_TIM3_Init+0xe8>)
 8001302:	f003 ff6d 	bl	80051e0 <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800130c:	f000 fa6c 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131a:	4619      	mov	r1, r3
 800131c:	481c      	ldr	r0, [pc, #112]	; (8001390 <MX_TIM3_Init+0xe8>)
 800131e:	f004 faaf 	bl	8005880 <HAL_TIM_ConfigClockSource>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001328:	f000 fa5e 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800132c:	4818      	ldr	r0, [pc, #96]	; (8001390 <MX_TIM3_Init+0xe8>)
 800132e:	f004 f81f 	bl	8005370 <HAL_TIM_PWM_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001338:	f000 fa56 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4811      	ldr	r0, [pc, #68]	; (8001390 <MX_TIM3_Init+0xe8>)
 800134c:	f005 f84e 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001356:	f000 fa47 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135a:	2360      	movs	r3, #96	; 0x60
 800135c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM3_Init+0xe8>)
 8001372:	f004 f971 	bl	8005658 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800137c:	f000 fa34 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM3_Init+0xe8>)
 8001382:	f000 fb5d 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 8001386:	bf00      	nop
 8001388:	3738      	adds	r7, #56	; 0x38
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000190 	.word	0x20000190
 8001394:	40000400 	.word	0x40000400

08001398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_DMA_Init+0x50>)
 80013a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <MX_DMA_Init+0x50>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6493      	str	r3, [r2, #72]	; 0x48
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_DMA_Init+0x50>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_DMA_Init+0x50>)
 80013b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <MX_DMA_Init+0x50>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6493      	str	r3, [r2, #72]	; 0x48
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_DMA_Init+0x50>)
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	200b      	movs	r0, #11
 80013d4:	f002 f9af 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013d8:	200b      	movs	r0, #11
 80013da:	f002 f9c6 	bl	800376a <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a38      	ldr	r2, [pc, #224]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <MX_GPIO_Init+0xfc>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <MX_GPIO_Init+0xfc>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	21a0      	movs	r1, #160	; 0xa0
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f002 fe4d 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	481e      	ldr	r0, [pc, #120]	; (80014ec <MX_GPIO_Init+0x100>)
 8001474:	f002 fe48 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4818      	ldr	r0, [pc, #96]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001490:	f002 fcb8 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ae:	f002 fca9 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014b2:	2340      	movs	r3, #64	; 0x40
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4808      	ldr	r0, [pc, #32]	; (80014ec <MX_GPIO_Init+0x100>)
 80014ca:	f002 fc9b 	bl	8003e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2028      	movs	r0, #40	; 0x28
 80014d4:	f002 f92f 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d8:	2028      	movs	r0, #40	; 0x28
 80014da:	f002 f946 	bl	800376a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000800 	.word	0x48000800

080014f4 <Average_ADC>:

/* USER CODE BEGIN 4 */
uint16_t Average_ADC()
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
	uint16_t average = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i<40; i++){
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	e00a      	b.n	800151e <Average_ADC+0x2a>
		sum+=ADC_RawRead[i];
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <Average_ADC+0x4c>)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<40; i++){
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	3301      	adds	r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b27      	cmp	r3, #39	; 0x27
 8001522:	ddf1      	ble.n	8001508 <Average_ADC+0x14>
	}
	average = sum/40;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <Average_ADC+0x50>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	095b      	lsrs	r3, r3, #5
 800152e:	80fb      	strh	r3, [r7, #6]
	return average;
 8001530:	88fb      	ldrh	r3, [r7, #6]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200001dc 	.word	0x200001dc
 8001544:	cccccccd 	.word	0xcccccccd

08001548 <HAL_UART_RxCpltCallback>:
	//start UART in Interrupt Mode
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	//interupt
	if(huart == &hlpuart1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_UART_RxCpltCallback+0x38>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d10f      	bne.n	8001578 <HAL_UART_RxCpltCallback+0x30>
	{
		PWM = RxBuffer[1] | (RxBuffer[2] << 8);
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_UART_RxCpltCallback+0x3c>)
 800155a:	785b      	ldrb	r3, [r3, #1]
 800155c:	b21a      	sxth	r2, r3
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_UART_RxCpltCallback+0x3c>)
 8001560:	789b      	ldrb	r3, [r3, #2]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_UART_RxCpltCallback+0x40>)
 800156c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 800156e:	2204      	movs	r2, #4
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <HAL_UART_RxCpltCallback+0x3c>)
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <HAL_UART_RxCpltCallback+0x38>)
 8001574:	f005 f8ae 	bl	80066d4 <HAL_UART_Receive_IT>
	}
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000fc 	.word	0x200000fc
 8001584:	20000230 	.word	0x20000230
 8001588:	2000023e 	.word	0x2000023e
 800158c:	00000000 	.word	0x00000000

08001590 <setMotor>:

void setMotor()
{
 8001590:	b598      	push	{r3, r4, r7, lr}
 8001592:	af00      	add	r7, sp, #0
	if(PWM > 0){
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <setMotor+0xb0>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dd25      	ble.n	80015ea <setMotor+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f002 fdaf 	bl	8004108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2140      	movs	r1, #64	; 0x40
 80015ae:	4825      	ldr	r0, [pc, #148]	; (8001644 <setMotor+0xb4>)
 80015b0:	f002 fdaa 	bl	8004108 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*19999/32767.0);
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <setMotor+0xb0>)
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff79 	bl	80004bc <__aeabi_i2d>
 80015ca:	a31b      	add	r3, pc, #108	; (adr r3, 8001638 <setMotor+0xa8>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f908 	bl	80007e4 <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	491b      	ldr	r1, [pc, #108]	; (8001648 <setMotor+0xb8>)
 80015da:	680c      	ldr	r4, [r1, #0]
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fa10 	bl	8000a04 <__aeabi_d2uiz>
 80015e4:	4603      	mov	r3, r0
 80015e6:	6363      	str	r3, [r4, #52]	; 0x34
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*(-19999)/32767.0);
	}
}
 80015e8:	e023      	b.n	8001632 <setMotor+0xa2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <setMotor+0xb4>)
 80015f0:	f002 fd8a 	bl	8004108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f002 fd84 	bl	8004108 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*(-19999)/32767.0);
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <setMotor+0xb0>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	461a      	mov	r2, r3
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <setMotor+0xbc>)
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff54 	bl	80004bc <__aeabi_i2d>
 8001614:	a308      	add	r3, pc, #32	; (adr r3, 8001638 <setMotor+0xa8>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f8e3 	bl	80007e4 <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4909      	ldr	r1, [pc, #36]	; (8001648 <setMotor+0xb8>)
 8001624:	680c      	ldr	r4, [r1, #0]
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff f9eb 	bl	8000a04 <__aeabi_d2uiz>
 800162e:	4603      	mov	r3, r0
 8001630:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001632:	bf00      	nop
 8001634:	bd98      	pop	{r3, r4, r7, pc}
 8001636:	bf00      	nop
 8001638:	00000000 	.word	0x00000000
 800163c:	40dfffc0 	.word	0x40dfffc0
 8001640:	2000023e 	.word	0x2000023e
 8001644:	48000400 	.word	0x48000400
 8001648:	20000190 	.word	0x20000190
 800164c:	ffffb1e1 	.word	0xffffb1e1

08001650 <Wrapselect>:

void Wrapselect()
{
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	af00      	add	r7, sp, #0
	ErrorNormal = setposition - position;
 8001654:	4b5e      	ldr	r3, [pc, #376]	; (80017d0 <Wrapselect+0x180>)
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <Wrapselect+0x184>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001664:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <Wrapselect+0x188>)
 8001666:	edc3 7a00 	vstr	s15, [r3]
	ErrorWrapPlus = setposition - (2*M_PI + position);
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <Wrapselect+0x180>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff36 	bl	80004e0 <__aeabi_f2d>
 8001674:	4604      	mov	r4, r0
 8001676:	460d      	mov	r5, r1
 8001678:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <Wrapselect+0x184>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff2f 	bl	80004e0 <__aeabi_f2d>
 8001682:	a351      	add	r3, pc, #324	; (adr r3, 80017c8 <Wrapselect+0x178>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe fdcc 	bl	8000224 <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fdc4 	bl	8000220 <__aeabi_dsub>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff f9d0 	bl	8000a44 <__aeabi_d2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a4d      	ldr	r2, [pc, #308]	; (80017dc <Wrapselect+0x18c>)
 80016a8:	6013      	str	r3, [r2, #0]
	ErrorWrapMinus = setposition - (2*M_PI - position);
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <Wrapselect+0x180>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff16 	bl	80004e0 <__aeabi_f2d>
 80016b4:	4604      	mov	r4, r0
 80016b6:	460d      	mov	r5, r1
 80016b8:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <Wrapselect+0x184>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff0f 	bl	80004e0 <__aeabi_f2d>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	a140      	add	r1, pc, #256	; (adr r1, 80017c8 <Wrapselect+0x178>)
 80016c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016cc:	f7fe fda8 	bl	8000220 <__aeabi_dsub>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fda2 	bl	8000220 <__aeabi_dsub>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9ae 	bl	8000a44 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a3d      	ldr	r2, [pc, #244]	; (80017e0 <Wrapselect+0x190>)
 80016ec:	6013      	str	r3, [r2, #0]
	if(fabsf(ErrorNormal) <= fabsf(ErrorWrapPlus) && fabsf(ErrorNormal) <= fabsf(ErrorWrapMinus))
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <Wrapselect+0x188>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80016f8:	4b38      	ldr	r3, [pc, #224]	; (80017dc <Wrapselect+0x18c>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d813      	bhi.n	8001734 <Wrapselect+0xe4>
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <Wrapselect+0x188>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	eeb0 7ae7 	vabs.f32	s14, s15
 8001716:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <Wrapselect+0x190>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	eef0 7ae7 	vabs.f32	s15, s15
 8001720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	d804      	bhi.n	8001734 <Wrapselect+0xe4>
	{
		Error = ErrorNormal;
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <Wrapselect+0x188>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <Wrapselect+0x194>)
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e047      	b.n	80017c4 <Wrapselect+0x174>
	}
	else if(fabsf(ErrorWrapPlus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapPlus) <= fabsf(ErrorWrapMinus))
 8001734:	4b29      	ldr	r3, [pc, #164]	; (80017dc <Wrapselect+0x18c>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	eeb0 7ae7 	vabs.f32	s14, s15
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <Wrapselect+0x188>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eef0 7ae7 	vabs.f32	s15, s15
 8001748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	d813      	bhi.n	800177a <Wrapselect+0x12a>
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <Wrapselect+0x18c>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eeb0 7ae7 	vabs.f32	s14, s15
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <Wrapselect+0x190>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	eef0 7ae7 	vabs.f32	s15, s15
 8001766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d804      	bhi.n	800177a <Wrapselect+0x12a>
	{
		Error = ErrorWrapPlus;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <Wrapselect+0x18c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <Wrapselect+0x194>)
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e024      	b.n	80017c4 <Wrapselect+0x174>
	}
	else if(fabsf(ErrorWrapMinus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapMinus) <= fabsf(ErrorWrapPlus))
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <Wrapselect+0x190>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eeb0 7ae7 	vabs.f32	s14, s15
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <Wrapselect+0x188>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	eef0 7ae7 	vabs.f32	s15, s15
 800178e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	d900      	bls.n	800179a <Wrapselect+0x14a>
	{
		Error = ErrorWrapMinus;
	}
}
 8001798:	e014      	b.n	80017c4 <Wrapselect+0x174>
	else if(fabsf(ErrorWrapMinus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapMinus) <= fabsf(ErrorWrapPlus))
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <Wrapselect+0x190>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	eeb0 7ae7 	vabs.f32	s14, s15
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <Wrapselect+0x18c>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	eef0 7ae7 	vabs.f32	s15, s15
 80017ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d900      	bls.n	80017ba <Wrapselect+0x16a>
}
 80017b8:	e004      	b.n	80017c4 <Wrapselect+0x174>
		Error = ErrorWrapMinus;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <Wrapselect+0x190>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <Wrapselect+0x194>)
 80017c0:	6013      	str	r3, [r2, #0]
}
 80017c2:	e7ff      	b.n	80017c4 <Wrapselect+0x174>
 80017c4:	bf00      	nop
 80017c6:	bdb0      	pop	{r4, r5, r7, pc}
 80017c8:	54442d18 	.word	0x54442d18
 80017cc:	401921fb 	.word	0x401921fb
 80017d0:	20000268 	.word	0x20000268
 80017d4:	20000264 	.word	0x20000264
 80017d8:	20000270 	.word	0x20000270
 80017dc:	20000274 	.word	0x20000274
 80017e0:	20000278 	.word	0x20000278
 80017e4:	2000027c 	.word	0x2000027c

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>
	...

080017f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x44>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x44>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6613      	str	r3, [r2, #96]	; 0x60
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x44>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x44>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x44>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x44>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800182a:	f002 fd4d 	bl	80042c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b09e      	sub	sp, #120	; 0x78
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2254      	movs	r2, #84	; 0x54
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f006 ffbd 	bl	80087dc <memset>
  if(hadc->Instance==ADC1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186a:	d15f      	bne.n	800192c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800186c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001870:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001872:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001876:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fa61 	bl	8004d44 <HAL_RCCEx_PeriphCLKConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001888:	f7ff ffae 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800188c:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_ADC_MspInit+0xf8>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	4a28      	ldr	r2, [pc, #160]	; (8001934 <HAL_ADC_MspInit+0xf8>)
 8001892:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_ADC_MspInit+0xf8>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_ADC_MspInit+0xf8>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_ADC_MspInit+0xf8>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_ADC_MspInit+0xf8>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018bc:	2301      	movs	r3, #1
 80018be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c0:	2303      	movs	r3, #3
 80018c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f002 fa97 	bl	8003e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_ADC_MspInit+0x100>)
 80018da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 80018de:	2205      	movs	r2, #5
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 80018f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 80018fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001902:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 8001906:	2220      	movs	r2, #32
 8001908:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 8001912:	f001 ff45 	bl	80037a0 <HAL_DMA_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800191c:	f7ff ff64 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_ADC_MspInit+0xfc>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	3778      	adds	r7, #120	; 0x78
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	2000009c 	.word	0x2000009c
 800193c:	40020008 	.word	0x40020008

08001940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b09e      	sub	sp, #120	; 0x78
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	2254      	movs	r2, #84	; 0x54
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f006 ff3b 	bl	80087dc <memset>
  if(huart->Instance==LPUART1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <HAL_UART_MspInit+0xb8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d13e      	bne.n	80019ee <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001970:	2320      	movs	r3, #32
 8001972:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	4618      	mov	r0, r3
 800197e:	f003 f9e1 	bl	8004d44 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001988:	f7ff ff2e 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_UART_MspInit+0xbc>)
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_UART_MspInit+0xbc>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_UART_MspInit+0xbc>)
 800199a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_UART_MspInit+0xbc>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <HAL_UART_MspInit+0xbc>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_UART_MspInit+0xbc>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80019bc:	230c      	movs	r3, #12
 80019be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80019cc:	230c      	movs	r3, #12
 80019ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f002 fa13 	bl	8003e04 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	205b      	movs	r0, #91	; 0x5b
 80019e4:	f001 fea7 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80019e8:	205b      	movs	r0, #91	; 0x5b
 80019ea:	f001 febe 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3778      	adds	r7, #120	; 0x78
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40008000 	.word	0x40008000
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_TIM_Base_MspInit+0x38>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10b      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_TIM_Base_MspInit+0x3c>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_TIM_Base_MspInit+0x3c>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_TIM_Base_MspInit+0x3c>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <HAL_TIM_MspPostInit+0x64>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d11c      	bne.n	8001a9c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_TIM_MspPostInit+0x68>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_TIM_MspPostInit+0x68>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_TIM_MspPostInit+0x68>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a7a:	2340      	movs	r3, #64	; 0x40
 8001a7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f002 f9b4 	bl	8003e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40021000 	.word	0x40021000

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af8:	f000 f8ac 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DMA1_Channel1_IRQHandler+0x10>)
 8001b06:	f002 f82e 	bl	8003b66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000009c 	.word	0x2000009c

08001b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b1c:	f002 fb0c 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <LPUART1_IRQHandler+0x10>)
 8001b2a:	f004 fe1f 	bl	800676c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200000fc 	.word	0x200000fc

08001b38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b60:	f7ff ffea 	bl	8001b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b66:	490d      	ldr	r1, [pc, #52]	; (8001b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <LoopForever+0xe>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ba8 <LoopForever+0x16>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f006 fe2f 	bl	80087ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8e:	f7ff f927 	bl	8000de0 <main>

08001b92 <LoopForever>:

LoopForever:
    b LoopForever
 8001b92:	e7fe      	b.n	8001b92 <LoopForever>
  ldr   r0, =_estack
 8001b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ba0:	0800889c 	.word	0x0800889c
  ldr r2, =_sbss
 8001ba4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001ba8:	2000028c 	.word	0x2000028c

08001bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC1_2_IRQHandler>

08001bae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f001 fdb1 	bl	8003720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 f80e 	bl	8001be0 <HAL_InitTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	e001      	b.n	8001bd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bd0:	f7ff fe10 	bl	80017f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]

}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_InitTick+0x68>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d022      	beq.n	8001c3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_InitTick+0x6c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_InitTick+0x68>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fdbc 	bl	8003786 <HAL_SYSTICK_Config>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10f      	bne.n	8001c34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	d809      	bhi.n	8001c2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c22:	f001 fd88 	bl	8003736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_InitTick+0x70>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e007      	b.n	8001c3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e004      	b.n	8001c3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e001      	b.n	8001c3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000010 	.word	0x20000010
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	2000000c 	.word	0x2000000c

08001c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_IncTick+0x1c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <HAL_IncTick+0x1c>)
 8001c64:	6013      	str	r3, [r2, #0]
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	20000288 	.word	0x20000288
 8001c74:	20000010 	.word	0x20000010

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000288 	.word	0x20000288

08001c90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3360      	adds	r3, #96	; 0x60
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <LL_ADC_SetOffset+0x44>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d30:	bf00      	nop
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	03fff000 	.word	0x03fff000

08001d40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3360      	adds	r3, #96	; 0x60
 8001d4e:	461a      	mov	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3360      	adds	r3, #96	; 0x60
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b087      	sub	sp, #28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3360      	adds	r3, #96	; 0x60
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001dcc:	bf00      	nop
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3360      	adds	r3, #96	; 0x60
 8001de8:	461a      	mov	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	615a      	str	r2, [r3, #20]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b087      	sub	sp, #28
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3330      	adds	r3, #48	; 0x30
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	4413      	add	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	211f      	movs	r1, #31
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	f003 011f 	and.w	r1, r3, #31
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b087      	sub	sp, #28
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	0e5b      	lsrs	r3, r3, #25
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0d1b      	lsrs	r3, r3, #20
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2107      	movs	r1, #7
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	0d1b      	lsrs	r3, r3, #20
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f20:	43db      	mvns	r3, r3
 8001f22:	401a      	ands	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0318 	and.w	r3, r3, #24
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f2c:	40d9      	lsrs	r1, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	400b      	ands	r3, r1
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f36:	431a      	orrs	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	0007ffff 	.word	0x0007ffff

08001f50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 031f 	and.w	r3, r3, #31
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6093      	str	r3, [r2, #8]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <LL_ADC_IsEnabled+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_IsEnabled+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d101      	bne.n	8002096 <LL_ADC_IsDisableOngoing+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_IsDisableOngoing+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d101      	bne.n	80020e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d101      	bne.n	800210a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e1a9      	b.n	8002486 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fb7b 	bl	800183c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff19 	bl	8001f90 <LL_ADC_IsDeepPowerDownEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff feff 	bl	8001f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff34 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff18 	bl	8001fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002188:	4b9c      	ldr	r3, [pc, #624]	; (80023fc <HAL_ADC_Init+0x2e4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	4a9c      	ldr	r2, [pc, #624]	; (8002400 <HAL_ADC_Init+0x2e8>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800219c:	e002      	b.n	80021a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff16 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff76 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80021e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8142 	bne.w	8002474 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 813e 	bne.w	8002474 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff23 	bl	8002058 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d141      	bne.n	800229c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002220:	d004      	beq.n	800222c <HAL_ADC_Init+0x114>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a77      	ldr	r2, [pc, #476]	; (8002404 <HAL_ADC_Init+0x2ec>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10f      	bne.n	800224c <HAL_ADC_Init+0x134>
 800222c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002230:	f7ff ff12 	bl	8002058 <LL_ADC_IsEnabled>
 8002234:	4604      	mov	r4, r0
 8002236:	4873      	ldr	r0, [pc, #460]	; (8002404 <HAL_ADC_Init+0x2ec>)
 8002238:	f7ff ff0e 	bl	8002058 <LL_ADC_IsEnabled>
 800223c:	4603      	mov	r3, r0
 800223e:	4323      	orrs	r3, r4
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e012      	b.n	8002272 <HAL_ADC_Init+0x15a>
 800224c:	486e      	ldr	r0, [pc, #440]	; (8002408 <HAL_ADC_Init+0x2f0>)
 800224e:	f7ff ff03 	bl	8002058 <LL_ADC_IsEnabled>
 8002252:	4604      	mov	r4, r0
 8002254:	486d      	ldr	r0, [pc, #436]	; (800240c <HAL_ADC_Init+0x2f4>)
 8002256:	f7ff feff 	bl	8002058 <LL_ADC_IsEnabled>
 800225a:	4603      	mov	r3, r0
 800225c:	431c      	orrs	r4, r3
 800225e:	486c      	ldr	r0, [pc, #432]	; (8002410 <HAL_ADC_Init+0x2f8>)
 8002260:	f7ff fefa 	bl	8002058 <LL_ADC_IsEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	4323      	orrs	r3, r4
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800227e:	d004      	beq.n	800228a <HAL_ADC_Init+0x172>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5f      	ldr	r2, [pc, #380]	; (8002404 <HAL_ADC_Init+0x2ec>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_ADC_Init+0x176>
 800228a:	4a62      	ldr	r2, [pc, #392]	; (8002414 <HAL_ADC_Init+0x2fc>)
 800228c:	e000      	b.n	8002290 <HAL_ADC_Init+0x178>
 800228e:	4a62      	ldr	r2, [pc, #392]	; (8002418 <HAL_ADC_Init+0x300>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f7ff fcfa 	bl	8001c90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7f5b      	ldrb	r3, [r3, #29]
 80022a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	045b      	lsls	r3, r3, #17
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b48      	ldr	r3, [pc, #288]	; (800241c <HAL_ADC_Init+0x304>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	430b      	orrs	r3, r1
 8002306:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fee5 	bl	80020f2 <LL_ADC_INJ_IsConversionOngoing>
 8002328:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d17f      	bne.n	8002430 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d17c      	bne.n	8002430 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800233a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002342:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002352:	f023 0302 	bic.w	r3, r3, #2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	430b      	orrs	r3, r1
 800235e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d017      	beq.n	8002398 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002376:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002380:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6911      	ldr	r1, [r2, #16]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002396:	e013      	b.n	80023c0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d12a      	bne.n	8002420 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023ec:	430a      	orrs	r2, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
 80023fa:	e019      	b.n	8002430 <HAL_ADC_Init+0x318>
 80023fc:	20000008 	.word	0x20000008
 8002400:	053e2d63 	.word	0x053e2d63
 8002404:	50000100 	.word	0x50000100
 8002408:	50000400 	.word	0x50000400
 800240c:	50000500 	.word	0x50000500
 8002410:	50000600 	.word	0x50000600
 8002414:	50000300 	.word	0x50000300
 8002418:	50000700 	.word	0x50000700
 800241c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f023 010f 	bic.w	r1, r3, #15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	e007      	b.n	8002462 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 020f 	bic.w	r2, r2, #15
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	65da      	str	r2, [r3, #92]	; 0x5c
 8002472:	e007      	b.n	8002484 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	f043 0210 	orr.w	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002484:	7ffb      	ldrb	r3, [r7, #31]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	bf00      	nop

08002490 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_Start_DMA+0x20>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5a      	ldr	r2, [pc, #360]	; (8002614 <HAL_ADC_Start_DMA+0x184>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_Start_DMA+0x24>
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_ADC_Start_DMA+0x188>)
 80024b2:	e000      	b.n	80024b6 <HAL_ADC_Start_DMA+0x26>
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_ADC_Start_DMA+0x18c>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fd4a 	bl	8001f50 <LL_ADC_GetMultimode>
 80024bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fe02 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 809b 	bne.w	8002606 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADC_Start_DMA+0x4e>
 80024da:	2302      	movs	r3, #2
 80024dc:	e096      	b.n	800260c <HAL_ADC_Start_DMA+0x17c>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_ADC_Start_DMA+0x190>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d008      	beq.n	8002502 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d002      	beq.n	8002502 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b09      	cmp	r3, #9
 8002500:	d17a      	bne.n	80025f8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fcf6 	bl	8002ef4 <ADC_Enable>
 8002508:	4603      	mov	r3, r0
 800250a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d16d      	bne.n	80025ee <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a3a      	ldr	r2, [pc, #232]	; (8002614 <HAL_ADC_Start_DMA+0x184>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d009      	beq.n	8002544 <HAL_ADC_Start_DMA+0xb4>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <HAL_ADC_Start_DMA+0x194>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d002      	beq.n	8002540 <HAL_ADC_Start_DMA+0xb0>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	e003      	b.n	8002548 <HAL_ADC_Start_DMA+0xb8>
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_ADC_Start_DMA+0x198>)
 8002542:	e001      	b.n	8002548 <HAL_ADC_Start_DMA+0xb8>
 8002544:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	4293      	cmp	r3, r2
 800254e:	d002      	beq.n	8002556 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	f023 0206 	bic.w	r2, r3, #6
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	661a      	str	r2, [r3, #96]	; 0x60
 800257a:	e002      	b.n	8002582 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	4a29      	ldr	r2, [pc, #164]	; (800262c <HAL_ADC_Start_DMA+0x19c>)
 8002588:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	4a28      	ldr	r2, [pc, #160]	; (8002630 <HAL_ADC_Start_DMA+0x1a0>)
 8002590:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	4a27      	ldr	r2, [pc, #156]	; (8002634 <HAL_ADC_Start_DMA+0x1a4>)
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	221c      	movs	r2, #28
 80025a0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0210 	orr.w	r2, r2, #16
 80025b8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3340      	adds	r3, #64	; 0x40
 80025d4:	4619      	mov	r1, r3
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f001 f989 	bl	80038f0 <HAL_DMA_Start_IT>
 80025de:	4603      	mov	r3, r0
 80025e0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fd5c 	bl	80020a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025ec:	e00d      	b.n	800260a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80025f6:	e008      	b.n	800260a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002604:	e001      	b.n	800260a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002606:	2302      	movs	r3, #2
 8002608:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800260a:	7dfb      	ldrb	r3, [r7, #23]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	50000100 	.word	0x50000100
 8002618:	50000300 	.word	0x50000300
 800261c:	50000700 	.word	0x50000700
 8002620:	50000600 	.word	0x50000600
 8002624:	50000500 	.word	0x50000500
 8002628:	50000400 	.word	0x50000400
 800262c:	080030df 	.word	0x080030df
 8002630:	080031b7 	.word	0x080031b7
 8002634:	080031d3 	.word	0x080031d3

08002638 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0b6      	sub	sp, #216	; 0xd8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x24>
 8002692:	2302      	movs	r3, #2
 8002694:	f000 bc13 	b.w	8002ebe <HAL_ADC_ConfigChannel+0x84a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fd11 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 83f3 	bne.w	8002e98 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	f7ff fbcb 	bl	8001e5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fcff 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80026ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fd0b 	bl	80020f2 <LL_ADC_INJ_IsConversionOngoing>
 80026dc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 81d9 	bne.w	8002a9c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 81d4 	bne.w	8002a9c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026fc:	d10f      	bne.n	800271e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	f7ff fbd2 	bl	8001eb2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fb79 	bl	8001e0e <LL_ADC_SetSamplingTimeCommonConfig>
 800271c:	e00e      	b.n	800273c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	461a      	mov	r2, r3
 800272c:	f7ff fbc1 	bl	8001eb2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fb69 	bl	8001e0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	08db      	lsrs	r3, r3, #3
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d022      	beq.n	80027a4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800276e:	f7ff fac3 	bl	8001cf8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	461a      	mov	r2, r3
 8002780:	f7ff fb0f 	bl	8001da2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002790:	2b01      	cmp	r3, #1
 8002792:	d102      	bne.n	800279a <HAL_ADC_ConfigChannel+0x126>
 8002794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002798:	e000      	b.n	800279c <HAL_ADC_ConfigChannel+0x128>
 800279a:	2300      	movs	r3, #0
 800279c:	461a      	mov	r2, r3
 800279e:	f7ff fb1b 	bl	8001dd8 <LL_ADC_SetOffsetSaturation>
 80027a2:	e17b      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fac8 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x15c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fabd 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	f003 021f 	and.w	r2, r3, #31
 80027ce:	e01e      	b.n	800280e <HAL_ADC_ConfigChannel+0x19a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fab2 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e004      	b.n	800280c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x1b2>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0e9b      	lsrs	r3, r3, #26
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	e018      	b.n	8002858 <HAL_ADC_ConfigChannel+0x1e4>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800283a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800283e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002842:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800284a:	2320      	movs	r3, #32
 800284c:	e004      	b.n	8002858 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800284e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002858:	429a      	cmp	r2, r3
 800285a:	d106      	bne.n	800286a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fa81 	bl	8001d6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2101      	movs	r1, #1
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fa65 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x222>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fa5a 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	0e9b      	lsrs	r3, r3, #26
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	e01e      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x260>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2101      	movs	r1, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fa4f 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e004      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80028c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d105      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x278>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0e9b      	lsrs	r3, r3, #26
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	e018      	b.n	800291e <HAL_ADC_ConfigChannel+0x2aa>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002900:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002910:	2320      	movs	r3, #32
 8002912:	e004      	b.n	800291e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800291e:	429a      	cmp	r2, r3
 8002920:	d106      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fa1e 	bl	8001d6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fa02 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <HAL_ADC_ConfigChannel+0x2e8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2102      	movs	r1, #2
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f9f7 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	0e9b      	lsrs	r3, r3, #26
 8002956:	f003 021f 	and.w	r2, r3, #31
 800295a:	e01e      	b.n	800299a <HAL_ADC_ConfigChannel+0x326>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2102      	movs	r1, #2
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f9ec 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 8002968:	4603      	mov	r3, r0
 800296a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800297a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800297e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002982:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e004      	b.n	8002998 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800298e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x33e>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	e016      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x36c>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e004      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80029d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d106      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2102      	movs	r1, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f9bd 	bl	8001d6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2103      	movs	r1, #3
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f9a1 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x3aa>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2103      	movs	r1, #3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f996 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	f003 021f 	and.w	r2, r3, #31
 8002a1c:	e017      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x3da>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2103      	movs	r1, #3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f98b 	bl	8001d40 <LL_ADC_GetOffsetChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a38:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x3f2>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	e011      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x416>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	e003      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2103      	movs	r1, #3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f968 	bl	8001d6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fad9 	bl	8002058 <LL_ADC_IsEnabled>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 813d 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f7ff fa24 	bl	8001f08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4aa2      	ldr	r2, [pc, #648]	; (8002d50 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f040 812e 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x480>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e019      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x4b4>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b04:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2b09      	cmp	r3, #9
 8002b20:	bf94      	ite	ls
 8002b22:	2301      	movls	r3, #1
 8002b24:	2300      	movhi	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d079      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x4d4>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	3301      	adds	r3, #1
 8002b40:	069b      	lsls	r3, r3, #26
 8002b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b46:	e015      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x500>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b58:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	069b      	lsls	r3, r3, #26
 8002b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x520>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	3301      	adds	r3, #1
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	e017      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x550>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	ea42 0103 	orr.w	r1, r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x576>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0e9b      	lsrs	r3, r3, #26
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	051b      	lsls	r3, r3, #20
 8002be8:	e018      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x5a8>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c02:	2320      	movs	r3, #32
 8002c04:	e003      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	e07e      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5c8>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	3301      	adds	r3, #1
 8002c34:	069b      	lsls	r3, r3, #26
 8002c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c3a:	e015      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x5f4>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	069b      	lsls	r3, r3, #26
 8002c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x614>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	e017      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x644>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	61fb      	str	r3, [r7, #28]
  return result;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e003      	b.n	8002cac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	ea42 0103 	orr.w	r1, r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x670>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0e9b      	lsrs	r3, r3, #26
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	3b1e      	subs	r3, #30
 8002cdc:	051b      	lsls	r3, r3, #20
 8002cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	e01b      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x6a8>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	613b      	str	r3, [r7, #16]
  return result;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f003 021f 	and.w	r2, r3, #31
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	3b1e      	subs	r3, #30
 8002d16:	051b      	lsls	r3, r3, #20
 8002d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d22:	4619      	mov	r1, r3
 8002d24:	f7ff f8c5 	bl	8001eb2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_ADC_ConfigChannel+0x6e0>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80be 	beq.w	8002eb2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d3e:	d004      	beq.n	8002d4a <HAL_ADC_ConfigChannel+0x6d6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <HAL_ADC_ConfigChannel+0x6e4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10a      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x6ec>
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <HAL_ADC_ConfigChannel+0x6e8>)
 8002d4c:	e009      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x6ee>
 8002d4e:	bf00      	nop
 8002d50:	407f0000 	.word	0x407f0000
 8002d54:	80080000 	.word	0x80080000
 8002d58:	50000100 	.word	0x50000100
 8002d5c:	50000300 	.word	0x50000300
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_ADC_ConfigChannel+0x854>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe ffba 	bl	8001cdc <LL_ADC_GetCommonPathInternalCh>
 8002d68:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <HAL_ADC_ConfigChannel+0x858>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x70c>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <HAL_ADC_ConfigChannel+0x85c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d13a      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d134      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d94:	d005      	beq.n	8002da2 <HAL_ADC_ConfigChannel+0x72e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <HAL_ADC_ConfigChannel+0x860>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	f040 8085 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002daa:	d004      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x742>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a49      	ldr	r2, [pc, #292]	; (8002ed8 <HAL_ADC_ConfigChannel+0x864>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x746>
 8002db6:	4a49      	ldr	r2, [pc, #292]	; (8002edc <HAL_ADC_ConfigChannel+0x868>)
 8002db8:	e000      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x748>
 8002dba:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <HAL_ADC_ConfigChannel+0x854>)
 8002dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7fe ff75 	bl	8001cb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dcc:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_ADC_ConfigChannel+0x86c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	4a44      	ldr	r2, [pc, #272]	; (8002ee4 <HAL_ADC_ConfigChannel+0x870>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002de6:	e002      	b.n	8002dee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f9      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df4:	e05a      	b.n	8002eac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_ADC_ConfigChannel+0x874>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d125      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11f      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a31      	ldr	r2, [pc, #196]	; (8002ed8 <HAL_ADC_ConfigChannel+0x864>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d104      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x7ac>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a34      	ldr	r2, [pc, #208]	; (8002eec <HAL_ADC_ConfigChannel+0x878>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d047      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e28:	d004      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x7c0>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2a      	ldr	r2, [pc, #168]	; (8002ed8 <HAL_ADC_ConfigChannel+0x864>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x7c4>
 8002e34:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_ADC_ConfigChannel+0x868>)
 8002e36:	e000      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x7c6>
 8002e38:	4a23      	ldr	r2, [pc, #140]	; (8002ec8 <HAL_ADC_ConfigChannel+0x854>)
 8002e3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f7fe ff36 	bl	8001cb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e4a:	e031      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <HAL_ADC_ConfigChannel+0x87c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d12d      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d127      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_ADC_ConfigChannel+0x864>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e74:	d004      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x80c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_ADC_ConfigChannel+0x864>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x810>
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <HAL_ADC_ConfigChannel+0x868>)
 8002e82:	e000      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x812>
 8002e84:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_ADC_ConfigChannel+0x854>)
 8002e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f7fe ff10 	bl	8001cb6 <LL_ADC_SetCommonPathInternalCh>
 8002e96:	e00c      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002eaa:	e002      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002eba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	37d8      	adds	r7, #216	; 0xd8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	50000700 	.word	0x50000700
 8002ecc:	c3210000 	.word	0xc3210000
 8002ed0:	90c00010 	.word	0x90c00010
 8002ed4:	50000600 	.word	0x50000600
 8002ed8:	50000100 	.word	0x50000100
 8002edc:	50000300 	.word	0x50000300
 8002ee0:	20000008 	.word	0x20000008
 8002ee4:	053e2d63 	.word	0x053e2d63
 8002ee8:	c7520000 	.word	0xc7520000
 8002eec:	50000500 	.word	0x50000500
 8002ef0:	cb840000 	.word	0xcb840000

08002ef4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff f8a7 	bl	8002058 <LL_ADC_IsEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d176      	bne.n	8002ffe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <ADC_Enable+0x114>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	f043 0210 	orr.w	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e062      	b.n	8003000 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f862 	bl	8002008 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4c:	d004      	beq.n	8002f58 <ADC_Enable+0x64>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2e      	ldr	r2, [pc, #184]	; (800300c <ADC_Enable+0x118>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <ADC_Enable+0x68>
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <ADC_Enable+0x11c>)
 8002f5a:	e000      	b.n	8002f5e <ADC_Enable+0x6a>
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <ADC_Enable+0x120>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe febc 	bl	8001cdc <LL_ADC_GetCommonPathInternalCh>
 8002f64:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d013      	beq.n	8002f96 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <ADC_Enable+0x124>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	4a29      	ldr	r2, [pc, #164]	; (800301c <ADC_Enable+0x128>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f88:	e002      	b.n	8002f90 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f9      	bne.n	8002f8a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f96:	f7fe fe6f 	bl	8001c78 <HAL_GetTick>
 8002f9a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f9c:	e028      	b.n	8002ff0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f858 	bl	8002058 <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f828 	bl	8002008 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fb8:	f7fe fe5e 	bl	8001c78 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d914      	bls.n	8002ff0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d00d      	beq.n	8002ff0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f043 0210 	orr.w	r2, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d1cf      	bne.n	8002f9e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	8000003f 	.word	0x8000003f
 800300c:	50000100 	.word	0x50000100
 8003010:	50000300 	.word	0x50000300
 8003014:	50000700 	.word	0x50000700
 8003018:	20000008 	.word	0x20000008
 800301c:	053e2d63 	.word	0x053e2d63

08003020 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f826 	bl	800207e <LL_ADC_IsDisableOngoing>
 8003032:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f80d 	bl	8002058 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d047      	beq.n	80030d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d144      	bne.n	80030d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030d 	and.w	r3, r3, #13
 8003054:	2b01      	cmp	r3, #1
 8003056:	d10c      	bne.n	8003072 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe ffe7 	bl	8002030 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2203      	movs	r2, #3
 8003068:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800306a:	f7fe fe05 	bl	8001c78 <HAL_GetTick>
 800306e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003070:	e029      	b.n	80030c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e023      	b.n	80030d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800308e:	f7fe fdf3 	bl	8001c78 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d914      	bls.n	80030c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e007      	b.n	80030d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1dc      	bne.n	800308e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d14b      	bne.n	8003190 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d021      	beq.n	8003156 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fe8c 	bl	8001e34 <LL_ADC_REG_IsTriggerSourceSWStart>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d032      	beq.n	8003188 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d12b      	bne.n	8003188 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11f      	bne.n	8003188 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	65da      	str	r2, [r3, #92]	; 0x5c
 8003154:	e018      	b.n	8003188 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d111      	bne.n	8003188 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d105      	bne.n	8003188 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fa55 	bl	8002638 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800318e:	e00e      	b.n	80031ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff fa5f 	bl	8002660 <HAL_ADC_ErrorCallback>
}
 80031a2:	e004      	b.n	80031ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff fa41 	bl	800264c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fa31 	bl	8002660 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <LL_ADC_IsEnabled>:
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <LL_ADC_IsEnabled+0x18>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <LL_ADC_IsEnabled+0x1a>
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_StartCalibration>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800323e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003248:	4313      	orrs	r3, r2
 800324a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_IsCalibrationOnGoing>:
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800326e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003272:	d101      	bne.n	8003278 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_REG_IsConversionOngoing>:
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d101      	bne.n	800329e <LL_ADC_REG_IsConversionOngoing+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e04d      	b.n	8003364 <HAL_ADCEx_Calibration_Start+0xb8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fea5 	bl	8003020 <ADC_Disable>
 80032d6:	4603      	mov	r3, r0
 80032d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d136      	bne.n	800334e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032e8:	f023 0302 	bic.w	r3, r3, #2
 80032ec:	f043 0202 	orr.w	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff96 	bl	800322c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003300:	e014      	b.n	800332c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3301      	adds	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_ADCEx_Calibration_Start+0xc0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d90d      	bls.n	800332c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f023 0312 	bic.w	r3, r3, #18
 8003318:	f043 0210 	orr.w	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e01b      	b.n	8003364 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff94 	bl	800325e <LL_ADC_IsCalibrationOnGoing>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e2      	bne.n	8003302 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	f023 0303 	bic.w	r3, r3, #3
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	; 0x5c
 800334c:	e005      	b.n	800335a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	f043 0210 	orr.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	0004de01 	.word	0x0004de01

08003370 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b0a1      	sub	sp, #132	; 0x84
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800338a:	2302      	movs	r3, #2
 800338c:	e0e7      	b.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003396:	2300      	movs	r3, #0
 8003398:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800339a:	2300      	movs	r3, #0
 800339c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a6:	d102      	bne.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	e009      	b.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6e      	ldr	r2, [pc, #440]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d102      	bne.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80033b8:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	e001      	b.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0be      	b.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff ff4f 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 80033e8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff49 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 80a0 	bne.w	800353c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 809c 	bne.w	800353c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340c:	d004      	beq.n	8003418 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a55      	ldr	r2, [pc, #340]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003418:	4b56      	ldr	r3, [pc, #344]	; (8003574 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800341a:	e000      	b.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800341c:	4b56      	ldr	r3, [pc, #344]	; (8003578 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800341e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d04b      	beq.n	80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800343a:	035b      	lsls	r3, r3, #13
 800343c:	430b      	orrs	r3, r1
 800343e:	431a      	orrs	r2, r3
 8003440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003442:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344c:	d004      	beq.n	8003458 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a45      	ldr	r2, [pc, #276]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10f      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003458:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800345c:	f7ff fed3 	bl	8003206 <LL_ADC_IsEnabled>
 8003460:	4604      	mov	r4, r0
 8003462:	4841      	ldr	r0, [pc, #260]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003464:	f7ff fecf 	bl	8003206 <LL_ADC_IsEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	4323      	orrs	r3, r4
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e012      	b.n	800349e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003478:	483c      	ldr	r0, [pc, #240]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800347a:	f7ff fec4 	bl	8003206 <LL_ADC_IsEnabled>
 800347e:	4604      	mov	r4, r0
 8003480:	483b      	ldr	r0, [pc, #236]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003482:	f7ff fec0 	bl	8003206 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	431c      	orrs	r4, r3
 800348a:	483c      	ldr	r0, [pc, #240]	; (800357c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800348c:	f7ff febb 	bl	8003206 <LL_ADC_IsEnabled>
 8003490:	4603      	mov	r3, r0
 8003492:	4323      	orrs	r3, r4
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d056      	beq.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034aa:	f023 030f 	bic.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	6811      	ldr	r1, [r2, #0]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034bc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034be:	e047      	b.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d4:	d004      	beq.n	80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a23      	ldr	r2, [pc, #140]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10f      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80034e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034e4:	f7ff fe8f 	bl	8003206 <LL_ADC_IsEnabled>
 80034e8:	4604      	mov	r4, r0
 80034ea:	481f      	ldr	r0, [pc, #124]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034ec:	f7ff fe8b 	bl	8003206 <LL_ADC_IsEnabled>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4323      	orrs	r3, r4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e012      	b.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003500:	481a      	ldr	r0, [pc, #104]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003502:	f7ff fe80 	bl	8003206 <LL_ADC_IsEnabled>
 8003506:	4604      	mov	r4, r0
 8003508:	4819      	ldr	r0, [pc, #100]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800350a:	f7ff fe7c 	bl	8003206 <LL_ADC_IsEnabled>
 800350e:	4603      	mov	r3, r0
 8003510:	431c      	orrs	r4, r3
 8003512:	481a      	ldr	r0, [pc, #104]	; (800357c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003514:	f7ff fe77 	bl	8003206 <LL_ADC_IsEnabled>
 8003518:	4603      	mov	r3, r0
 800351a:	4323      	orrs	r3, r4
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800352a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003532:	f023 030f 	bic.w	r3, r3, #15
 8003536:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003538:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800353a:	e009      	b.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800354e:	e000      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003550:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800355a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800355e:	4618      	mov	r0, r3
 8003560:	3784      	adds	r7, #132	; 0x84
 8003562:	46bd      	mov	sp, r7
 8003564:	bd90      	pop	{r4, r7, pc}
 8003566:	bf00      	nop
 8003568:	50000100 	.word	0x50000100
 800356c:	50000400 	.word	0x50000400
 8003570:	50000500 	.word	0x50000500
 8003574:	50000300 	.word	0x50000300
 8003578:	50000700 	.word	0x50000700
 800357c:	50000600 	.word	0x50000600

08003580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	60d3      	str	r3, [r2, #12]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	f003 0307 	and.w	r3, r3, #7
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	db0b      	blt.n	800360e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 021f 	and.w	r2, r3, #31
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <__NVIC_EnableIRQ+0x38>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2001      	movs	r0, #1
 8003606:	fa00 f202 	lsl.w	r2, r0, r2
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0a      	blt.n	800364a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <__NVIC_SetPriority+0x4c>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	440b      	add	r3, r1
 8003644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003648:	e00a      	b.n	8003660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4908      	ldr	r1, [pc, #32]	; (8003670 <__NVIC_SetPriority+0x50>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3b04      	subs	r3, #4
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	440b      	add	r3, r1
 800365e:	761a      	strb	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f1c3 0307 	rsb	r3, r3, #7
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf28      	it	cs
 8003692:	2304      	movcs	r3, #4
 8003694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3304      	adds	r3, #4
 800369a:	2b06      	cmp	r3, #6
 800369c:	d902      	bls.n	80036a4 <NVIC_EncodePriority+0x30>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	e000      	b.n	80036a6 <NVIC_EncodePriority+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036bc:	f04f 31ff 	mov.w	r1, #4294967295
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43d9      	mvns	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	4313      	orrs	r3, r2
         );
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ec:	d301      	bcc.n	80036f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00f      	b.n	8003712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <SysTick_Config+0x40>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fa:	210f      	movs	r1, #15
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	f7ff ff8e 	bl	8003620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <SysTick_Config+0x40>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <SysTick_Config+0x40>)
 800370c:	2207      	movs	r2, #7
 800370e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e000e010 	.word	0xe000e010

08003720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff29 	bl	8003580 <__NVIC_SetPriorityGrouping>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003744:	f7ff ff40 	bl	80035c8 <__NVIC_GetPriorityGrouping>
 8003748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f7ff ff90 	bl	8003674 <NVIC_EncodePriority>
 8003754:	4602      	mov	r2, r0
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff5f 	bl	8003620 <__NVIC_SetPriority>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff33 	bl	80035e4 <__NVIC_EnableIRQ>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffa4 	bl	80036dc <SysTick_Config>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e08d      	b.n	80038ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_DMA_Init+0x138>)
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d80f      	bhi.n	80037de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b45      	ldr	r3, [pc, #276]	; (80038dc <HAL_DMA_Init+0x13c>)
 80037c6:	4413      	add	r3, r2
 80037c8:	4a45      	ldr	r2, [pc, #276]	; (80038e0 <HAL_DMA_Init+0x140>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	009a      	lsls	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a42      	ldr	r2, [pc, #264]	; (80038e4 <HAL_DMA_Init+0x144>)
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
 80037dc:	e00e      	b.n	80037fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <HAL_DMA_Init+0x148>)
 80037e6:	4413      	add	r3, r2
 80037e8:	4a3d      	ldr	r2, [pc, #244]	; (80038e0 <HAL_DMA_Init+0x140>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	009a      	lsls	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a3c      	ldr	r2, [pc, #240]	; (80038ec <HAL_DMA_Init+0x14c>)
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa76 	bl	8003d40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385c:	d102      	bne.n	8003864 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003878:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <HAL_DMA_Init+0x104>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d80c      	bhi.n	80038a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa96 	bl	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	e008      	b.n	80038b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40020407 	.word	0x40020407
 80038dc:	bffdfff8 	.word	0xbffdfff8
 80038e0:	cccccccd 	.word	0xcccccccd
 80038e4:	40020000 	.word	0x40020000
 80038e8:	bffdfbf8 	.word	0xbffdfbf8
 80038ec:	40020400 	.word	0x40020400

080038f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_DMA_Start_IT+0x20>
 800390c:	2302      	movs	r3, #2
 800390e:	e066      	b.n	80039de <HAL_DMA_Start_IT+0xee>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d155      	bne.n	80039d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f9bb 	bl	8003cc4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 020e 	orr.w	r2, r2, #14
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00f      	b.n	8003988 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0204 	bic.w	r2, r2, #4
 8003976:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 020a 	orr.w	r2, r2, #10
 8003986:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e005      	b.n	80039dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d005      	beq.n	8003a0a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2204      	movs	r2, #4
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e037      	b.n	8003a7a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 020e 	bic.w	r2, r2, #14
 8003a18:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a28:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f003 021f 	and.w	r2, r3, #31
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2101      	movs	r1, #1
 8003a48:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a56:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a78:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d00d      	beq.n	8003acc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	e047      	b.n	8003b5c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 020e 	bic.w	r2, r2, #14
 8003ada:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
    }
  }
  return status;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	2204      	movs	r2, #4
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d026      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x7a>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d021      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0204 	bic.w	r2, r2, #4
 8003bb8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f003 021f 	and.w	r2, r3, #31
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d071      	beq.n	8003cba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003bde:	e06c      	b.n	8003cba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2202      	movs	r2, #2
 8003bea:	409a      	lsls	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02e      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d029      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 020a 	bic.w	r2, r2, #10
 8003c1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	f003 021f 	and.w	r2, r3, #31
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2102      	movs	r1, #2
 8003c32:	fa01 f202 	lsl.w	r2, r1, r2
 8003c36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d038      	beq.n	8003cba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c50:	e033      	b.n	8003cba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d02a      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d025      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 020e 	bic.w	r2, r2, #14
 8003c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
}
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cda:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f003 021f 	and.w	r2, r3, #31
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003d00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d108      	bne.n	8003d24 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d22:	e007      	b.n	8003d34 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	60da      	str	r2, [r3, #12]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d802      	bhi.n	8003d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d54:	4b15      	ldr	r3, [pc, #84]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e001      	b.n	8003d5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d5c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	3b08      	subs	r3, #8
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	009a      	lsls	r2, r3, #2
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a0b      	ldr	r2, [pc, #44]	; (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2201      	movs	r2, #1
 8003d94:	409a      	lsls	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40020407 	.word	0x40020407
 8003dac:	40020800 	.word	0x40020800
 8003db0:	40020820 	.word	0x40020820
 8003db4:	cccccccd 	.word	0xcccccccd
 8003db8:	40020880 	.word	0x40020880

08003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dde:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2201      	movs	r2, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	1000823f 	.word	0x1000823f
 8003e00:	40020940 	.word	0x40020940

08003e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e12:	e15a      	b.n	80040ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 814c 	beq.w	80040c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d005      	beq.n	8003e44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d130      	bne.n	8003ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	2203      	movs	r2, #3
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0201 	and.w	r2, r3, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d017      	beq.n	8003ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d123      	bne.n	8003f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	08da      	lsrs	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3208      	adds	r2, #8
 8003ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	08da      	lsrs	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3208      	adds	r2, #8
 8003f30:	6939      	ldr	r1, [r7, #16]
 8003f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0203 	and.w	r2, r3, #3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80a6 	beq.w	80040c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f78:	4b5b      	ldr	r3, [pc, #364]	; (80040e8 <HAL_GPIO_Init+0x2e4>)
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	4a5a      	ldr	r2, [pc, #360]	; (80040e8 <HAL_GPIO_Init+0x2e4>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6613      	str	r3, [r2, #96]	; 0x60
 8003f84:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <HAL_GPIO_Init+0x2e4>)
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f90:	4a56      	ldr	r2, [pc, #344]	; (80040ec <HAL_GPIO_Init+0x2e8>)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fba:	d01f      	beq.n	8003ffc <HAL_GPIO_Init+0x1f8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a4c      	ldr	r2, [pc, #304]	; (80040f0 <HAL_GPIO_Init+0x2ec>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d019      	beq.n	8003ff8 <HAL_GPIO_Init+0x1f4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a4b      	ldr	r2, [pc, #300]	; (80040f4 <HAL_GPIO_Init+0x2f0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_GPIO_Init+0x1f0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_GPIO_Init+0x2f4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_GPIO_Init+0x1ec>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a49      	ldr	r2, [pc, #292]	; (80040fc <HAL_GPIO_Init+0x2f8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <HAL_GPIO_Init+0x1e8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a48      	ldr	r2, [pc, #288]	; (8004100 <HAL_GPIO_Init+0x2fc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <HAL_GPIO_Init+0x1e4>
 8003fe4:	2305      	movs	r3, #5
 8003fe6:	e00a      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003fe8:	2306      	movs	r3, #6
 8003fea:	e008      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003fec:	2304      	movs	r3, #4
 8003fee:	e006      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e004      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e002      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_GPIO_Init+0x1fa>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	f002 0203 	and.w	r2, r2, #3
 8004004:	0092      	lsls	r2, r2, #2
 8004006:	4093      	lsls	r3, r2
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800400e:	4937      	ldr	r1, [pc, #220]	; (80040ec <HAL_GPIO_Init+0x2e8>)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	3302      	adds	r3, #2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800401c:	4b39      	ldr	r3, [pc, #228]	; (8004104 <HAL_GPIO_Init+0x300>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	43db      	mvns	r3, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004040:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004046:	4b2f      	ldr	r3, [pc, #188]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	43db      	mvns	r3, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_GPIO_Init+0x300>)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004070:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	43db      	mvns	r3, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4013      	ands	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004094:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <HAL_GPIO_Init+0x300>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040be:	4a11      	ldr	r2, [pc, #68]	; (8004104 <HAL_GPIO_Init+0x300>)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3301      	adds	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f ae9d 	bne.w	8003e14 <HAL_GPIO_Init+0x10>
  }
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010000 	.word	0x40010000
 80040f0:	48000400 	.word	0x48000400
 80040f4:	48000800 	.word	0x48000800
 80040f8:	48000c00 	.word	0x48000c00
 80040fc:	48001000 	.word	0x48001000
 8004100:	48001400 	.word	0x48001400
 8004104:	40010400 	.word	0x40010400

08004108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
 8004114:	4613      	mov	r3, r2
 8004116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004118:	787b      	ldrb	r3, [r7, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004124:	e002      	b.n	800412c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004142:	4b08      	ldr	r3, [pc, #32]	; (8004164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f806 	bl	8004168 <HAL_GPIO_EXTI_Callback>
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40010400 	.word	0x40010400

08004168 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d141      	bne.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800418e:	4b4b      	ldr	r3, [pc, #300]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419a:	d131      	bne.n	8004200 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800419c:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a2:	4a46      	ldr	r2, [pc, #280]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ac:	4b43      	ldr	r3, [pc, #268]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041b4:	4a41      	ldr	r2, [pc, #260]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041bc:	4b40      	ldr	r3, [pc, #256]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2232      	movs	r2, #50	; 0x32
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	4a3f      	ldr	r2, [pc, #252]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	0c9b      	lsrs	r3, r3, #18
 80041ce:	3301      	adds	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d2:	e002      	b.n	80041da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041da:	4b38      	ldr	r3, [pc, #224]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d102      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f2      	bne.n	80041d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ee:	4b33      	ldr	r3, [pc, #204]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fa:	d158      	bne.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e057      	b.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004200:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004206:	4a2d      	ldr	r2, [pc, #180]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004210:	e04d      	b.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004218:	d141      	bne.n	800429e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800421a:	4b28      	ldr	r3, [pc, #160]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d131      	bne.n	800428c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004228:	4b24      	ldr	r3, [pc, #144]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422e:	4a23      	ldr	r2, [pc, #140]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004240:	4a1e      	ldr	r2, [pc, #120]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004246:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2232      	movs	r2, #50	; 0x32
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	0c9b      	lsrs	r3, r3, #18
 800425a:	3301      	adds	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425e:	e002      	b.n	8004266 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3b01      	subs	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004272:	d102      	bne.n	800427a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f2      	bne.n	8004260 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004286:	d112      	bne.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e011      	b.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800429c:	e007      	b.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800429e:	4b07      	ldr	r3, [pc, #28]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40007000 	.word	0x40007000
 80042c0:	20000008 	.word	0x20000008
 80042c4:	431bde83 	.word	0x431bde83

080042c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042d6:	6093      	str	r3, [r2, #8]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000

080042e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e2fe      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d075      	beq.n	80043f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004306:	4b97      	ldr	r3, [pc, #604]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004310:	4b94      	ldr	r3, [pc, #592]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b0c      	cmp	r3, #12
 800431e:	d102      	bne.n	8004326 <HAL_RCC_OscConfig+0x3e>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b03      	cmp	r3, #3
 8004324:	d002      	beq.n	800432c <HAL_RCC_OscConfig+0x44>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d10b      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	4b8d      	ldr	r3, [pc, #564]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05b      	beq.n	80043f0 <HAL_RCC_OscConfig+0x108>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d157      	bne.n	80043f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e2d9      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d106      	bne.n	800435c <HAL_RCC_OscConfig+0x74>
 800434e:	4b85      	ldr	r3, [pc, #532]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a84      	ldr	r2, [pc, #528]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e01d      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004364:	d10c      	bne.n	8004380 <HAL_RCC_OscConfig+0x98>
 8004366:	4b7f      	ldr	r3, [pc, #508]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a7e      	ldr	r2, [pc, #504]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800436c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	4b7c      	ldr	r3, [pc, #496]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a7b      	ldr	r2, [pc, #492]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e00b      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
 8004380:	4b78      	ldr	r3, [pc, #480]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a77      	ldr	r2, [pc, #476]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b75      	ldr	r3, [pc, #468]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a74      	ldr	r2, [pc, #464]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fd fc6a 	bl	8001c78 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fd fc66 	bl	8001c78 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e29e      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ba:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0xc0>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fd fc56 	bl	8001c78 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fd fc52 	bl	8001c78 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e28a      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043e2:	4b60      	ldr	r3, [pc, #384]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0xe8>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d075      	beq.n	80044ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fe:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004408:	4b56      	ldr	r3, [pc, #344]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	d102      	bne.n	800441e <HAL_RCC_OscConfig+0x136>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d002      	beq.n	8004424 <HAL_RCC_OscConfig+0x13c>
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d11f      	bne.n	8004464 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004424:	4b4f      	ldr	r3, [pc, #316]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_OscConfig+0x154>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e25d      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b49      	ldr	r3, [pc, #292]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	4946      	ldr	r1, [pc, #280]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004450:	4b45      	ldr	r3, [pc, #276]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd fbc3 	bl	8001be0 <HAL_InitTick>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d043      	beq.n	80044e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e249      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d023      	beq.n	80044b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446c:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a3c      	ldr	r2, [pc, #240]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd fbfe 	bl	8001c78 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004480:	f7fd fbfa 	bl	8001c78 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e232      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004492:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b31      	ldr	r3, [pc, #196]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	492d      	ldr	r1, [pc, #180]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
 80044b2:	e01a      	b.n	80044ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 80044ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fd fbda 	bl	8001c78 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fd fbd6 	bl	8001c78 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e20e      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044da:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x1e0>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d041      	beq.n	800457a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01c      	beq.n	8004538 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fe:	4b19      	ldr	r3, [pc, #100]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fd fbb3 	bl	8001c78 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004516:	f7fd fbaf 	bl	8001c78 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e1e7      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004528:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ef      	beq.n	8004516 <HAL_RCC_OscConfig+0x22e>
 8004536:	e020      	b.n	800457a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800453a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd fb96 	bl	8001c78 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800454e:	e00d      	b.n	800456c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004550:	f7fd fb92 	bl	8001c78 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d906      	bls.n	800456c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e1ca      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800456c:	4b8c      	ldr	r3, [pc, #560]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 800456e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1ea      	bne.n	8004550 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80a6 	beq.w	80046d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004588:	2300      	movs	r3, #0
 800458a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800458c:	4b84      	ldr	r3, [pc, #528]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_OscConfig+0x2b4>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x2b6>
 800459c:	2300      	movs	r3, #0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b7f      	ldr	r3, [pc, #508]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	4a7e      	ldr	r2, [pc, #504]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	6593      	str	r3, [r2, #88]	; 0x58
 80045ae:	4b7c      	ldr	r3, [pc, #496]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045be:	4b79      	ldr	r3, [pc, #484]	; (80047a4 <HAL_RCC_OscConfig+0x4bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d118      	bne.n	80045fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ca:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <HAL_RCC_OscConfig+0x4bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a75      	ldr	r2, [pc, #468]	; (80047a4 <HAL_RCC_OscConfig+0x4bc>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7fd fb4f 	bl	8001c78 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fd fb4b 	bl	8001c78 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e183      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f0:	4b6c      	ldr	r3, [pc, #432]	; (80047a4 <HAL_RCC_OscConfig+0x4bc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d108      	bne.n	8004616 <HAL_RCC_OscConfig+0x32e>
 8004604:	4b66      	ldr	r3, [pc, #408]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	4a65      	ldr	r2, [pc, #404]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004614:	e024      	b.n	8004660 <HAL_RCC_OscConfig+0x378>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b05      	cmp	r3, #5
 800461c:	d110      	bne.n	8004640 <HAL_RCC_OscConfig+0x358>
 800461e:	4b60      	ldr	r3, [pc, #384]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	4a5e      	ldr	r2, [pc, #376]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800462e:	4b5c      	ldr	r3, [pc, #368]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	4a5a      	ldr	r2, [pc, #360]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800463e:	e00f      	b.n	8004660 <HAL_RCC_OscConfig+0x378>
 8004640:	4b57      	ldr	r3, [pc, #348]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	4a56      	ldr	r2, [pc, #344]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004650:	4b53      	ldr	r3, [pc, #332]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	4a52      	ldr	r2, [pc, #328]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fd fb06 	bl	8001c78 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fd fb02 	bl	8001c78 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e138      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004686:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ed      	beq.n	8004670 <HAL_RCC_OscConfig+0x388>
 8004694:	e015      	b.n	80046c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004696:	f7fd faef 	bl	8001c78 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fd faeb 	bl	8001c78 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e121      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b4:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ed      	bne.n	800469e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046c2:	7ffb      	ldrb	r3, [r7, #31]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c8:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	4a34      	ldr	r2, [pc, #208]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d03c      	beq.n	800475a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01c      	beq.n	8004722 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046e8:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 80046ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ee:	4a2c      	ldr	r2, [pc, #176]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd fabe 	bl	8001c78 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004700:	f7fd faba 	bl	8001c78 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0f2      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ef      	beq.n	8004700 <HAL_RCC_OscConfig+0x418>
 8004720:	e01b      	b.n	800475a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004722:	4b1f      	ldr	r3, [pc, #124]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004728:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fd faa1 	bl	8001c78 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800473a:	f7fd fa9d 	bl	8001c78 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0d5      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800474c:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 800474e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1ef      	bne.n	800473a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80c9 	beq.w	80048f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b0c      	cmp	r3, #12
 800476e:	f000 8083 	beq.w	8004878 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d15e      	bne.n	8004838 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <HAL_RCC_OscConfig+0x4b8>)
 8004780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fd fa77 	bl	8001c78 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478c:	e00c      	b.n	80047a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478e:	f7fd fa73 	bl	8001c78 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d905      	bls.n	80047a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0ab      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
 80047a0:	40021000 	.word	0x40021000
 80047a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a8:	4b55      	ldr	r3, [pc, #340]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ec      	bne.n	800478e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b4:	4b52      	ldr	r3, [pc, #328]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	4b52      	ldr	r3, [pc, #328]	; (8004904 <HAL_RCC_OscConfig+0x61c>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6a11      	ldr	r1, [r2, #32]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047c4:	3a01      	subs	r2, #1
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	4311      	orrs	r1, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047ce:	0212      	lsls	r2, r2, #8
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047d6:	0852      	lsrs	r2, r2, #1
 80047d8:	3a01      	subs	r2, #1
 80047da:	0552      	lsls	r2, r2, #21
 80047dc:	4311      	orrs	r1, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047e2:	0852      	lsrs	r2, r2, #1
 80047e4:	3a01      	subs	r2, #1
 80047e6:	0652      	lsls	r2, r2, #25
 80047e8:	4311      	orrs	r1, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047ee:	06d2      	lsls	r2, r2, #27
 80047f0:	430a      	orrs	r2, r1
 80047f2:	4943      	ldr	r1, [pc, #268]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f8:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a40      	ldr	r2, [pc, #256]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 80047fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004804:	4b3e      	ldr	r3, [pc, #248]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 800480a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fd fa32 	bl	8001c78 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fd fa2e 	bl	8001c78 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e066      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482a:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x530>
 8004836:	e05e      	b.n	80048f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004838:	4b31      	ldr	r3, [pc, #196]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a30      	ldr	r2, [pc, #192]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 800483e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd fa18 	bl	8001c78 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484c:	f7fd fa14 	bl	8001c78 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e04c      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800485e:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800486a:	4b25      	ldr	r3, [pc, #148]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	4924      	ldr	r1, [pc, #144]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 8004870:	4b25      	ldr	r3, [pc, #148]	; (8004908 <HAL_RCC_OscConfig+0x620>)
 8004872:	4013      	ands	r3, r2
 8004874:	60cb      	str	r3, [r1, #12]
 8004876:	e03e      	b.n	80048f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e039      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004884:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <HAL_RCC_OscConfig+0x618>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0203 	and.w	r2, r3, #3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	429a      	cmp	r2, r3
 8004896:	d12c      	bne.n	80048f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	3b01      	subs	r3, #1
 80048a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d123      	bne.n	80048f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d11b      	bne.n	80048f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d113      	bne.n	80048f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	3b01      	subs	r3, #1
 80048d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048da:	429a      	cmp	r2, r3
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	3b01      	subs	r3, #1
 80048ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d001      	beq.n	80048f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	019f800c 	.word	0x019f800c
 8004908:	feeefffc 	.word	0xfeeefffc

0800490c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e11e      	b.n	8004b62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004924:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <HAL_RCC_ClockConfig+0x260>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d910      	bls.n	8004954 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b8e      	ldr	r3, [pc, #568]	; (8004b6c <HAL_RCC_ClockConfig+0x260>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 020f 	bic.w	r2, r3, #15
 800493a:	498c      	ldr	r1, [pc, #560]	; (8004b6c <HAL_RCC_ClockConfig+0x260>)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b8a      	ldr	r3, [pc, #552]	; (8004b6c <HAL_RCC_ClockConfig+0x260>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e106      	b.n	8004b62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d073      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d129      	bne.n	80049bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004968:	4b81      	ldr	r3, [pc, #516]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0f4      	b.n	8004b62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004978:	f000 f99e 	bl	8004cb8 <RCC_GetSysClockFreqFromPLLSource>
 800497c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a7c      	ldr	r2, [pc, #496]	; (8004b74 <HAL_RCC_ClockConfig+0x268>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d93f      	bls.n	8004a06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004986:	4b7a      	ldr	r3, [pc, #488]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800499a:	2b00      	cmp	r3, #0
 800499c:	d033      	beq.n	8004a06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d12f      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049a6:	4b72      	ldr	r3, [pc, #456]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ae:	4a70      	ldr	r2, [pc, #448]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 80049b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e024      	b.n	8004a06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c4:	4b6a      	ldr	r3, [pc, #424]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0c6      	b.n	8004b62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d4:	4b66      	ldr	r3, [pc, #408]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0be      	b.n	8004b62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049e4:	f000 f8ce 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4a61      	ldr	r2, [pc, #388]	; (8004b74 <HAL_RCC_ClockConfig+0x268>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d909      	bls.n	8004a06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049f2:	4b5f      	ldr	r3, [pc, #380]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049fa:	4a5d      	ldr	r2, [pc, #372]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a06:	4b5a      	ldr	r3, [pc, #360]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f023 0203 	bic.w	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4957      	ldr	r1, [pc, #348]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a18:	f7fd f92e 	bl	8001c78 <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a20:	f7fd f92a 	bl	8001c78 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e095      	b.n	8004b62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	4b4e      	ldr	r3, [pc, #312]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 020c 	and.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d1eb      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d023      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a60:	4b43      	ldr	r3, [pc, #268]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a42      	ldr	r2, [pc, #264]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a78:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a80:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a88:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4936      	ldr	r1, [pc, #216]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d105      	bne.n	8004aae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004aa2:	4b33      	ldr	r3, [pc, #204]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4a32      	ldr	r2, [pc, #200]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aae:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <HAL_RCC_ClockConfig+0x260>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d21d      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abc:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_RCC_ClockConfig+0x260>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 020f 	bic.w	r2, r3, #15
 8004ac4:	4929      	ldr	r1, [pc, #164]	; (8004b6c <HAL_RCC_ClockConfig+0x260>)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004acc:	f7fd f8d4 	bl	8001c78 <HAL_GetTick>
 8004ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	e00a      	b.n	8004aea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad4:	f7fd f8d0 	bl	8001c78 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e03b      	b.n	8004b62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <HAL_RCC_ClockConfig+0x260>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d1ed      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b04:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4917      	ldr	r1, [pc, #92]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b22:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	490f      	ldr	r1, [pc, #60]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b36:	f000 f825 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <HAL_RCC_ClockConfig+0x264>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	490c      	ldr	r1, [pc, #48]	; (8004b78 <HAL_RCC_ClockConfig+0x26c>)
 8004b48:	5ccb      	ldrb	r3, [r1, r3]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b52:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <HAL_RCC_ClockConfig+0x270>)
 8004b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <HAL_RCC_ClockConfig+0x274>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fd f840 	bl	8001be0 <HAL_InitTick>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40022000 	.word	0x40022000
 8004b70:	40021000 	.word	0x40021000
 8004b74:	04c4b400 	.word	0x04c4b400
 8004b78:	0800884c 	.word	0x0800884c
 8004b7c:	20000008 	.word	0x20000008
 8004b80:	2000000c 	.word	0x2000000c

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d102      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b96:	4b2a      	ldr	r3, [pc, #168]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e047      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b9c:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d102      	bne.n	8004bae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ba8:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	e03e      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d136      	bne.n	8004c28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc4:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bd8:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004be2:	68d2      	ldr	r2, [r2, #12]
 8004be4:	0a12      	lsrs	r2, r2, #8
 8004be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	617b      	str	r3, [r7, #20]
      break;
 8004bf0:	e00c      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	0a12      	lsrs	r2, r2, #8
 8004c00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
      break;
 8004c0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0e5b      	lsrs	r3, r3, #25
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	3301      	adds	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	e001      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c2c:	693b      	ldr	r3, [r7, #16]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	016e3600 	.word	0x016e3600

08004c48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000008 	.word	0x20000008

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c64:	f7ff fff0 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4904      	ldr	r1, [pc, #16]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	0800885c 	.word	0x0800885c

08004c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c90:	f7ff ffda 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0adb      	lsrs	r3, r3, #11
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4904      	ldr	r1, [pc, #16]	; (8004cb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	0800885c 	.word	0x0800885c

08004cb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d10c      	bne.n	8004cf6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cdc:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ce6:	68d2      	ldr	r2, [r2, #12]
 8004ce8:	0a12      	lsrs	r2, r2, #8
 8004cea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	617b      	str	r3, [r7, #20]
    break;
 8004cf4:	e00c      	b.n	8004d10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d00:	68d2      	ldr	r2, [r2, #12]
 8004d02:	0a12      	lsrs	r2, r2, #8
 8004d04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
    break;
 8004d0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	0e5b      	lsrs	r3, r3, #25
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004d2a:	687b      	ldr	r3, [r7, #4]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	016e3600 	.word	0x016e3600
 8004d40:	00f42400 	.word	0x00f42400

08004d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d50:	2300      	movs	r3, #0
 8004d52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8098 	beq.w	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d62:	2300      	movs	r3, #0
 8004d64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d72:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	4a3f      	ldr	r2, [pc, #252]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d8e:	4b3a      	ldr	r3, [pc, #232]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a39      	ldr	r2, [pc, #228]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d9a:	f7fc ff6d 	bl	8001c78 <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004da0:	e009      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da2:	f7fc ff69 	bl	8001c78 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d902      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	74fb      	strb	r3, [r7, #19]
        break;
 8004db4:	e005      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004db6:	4b30      	ldr	r3, [pc, #192]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0ef      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004dc2:	7cfb      	ldrb	r3, [r7, #19]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d159      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01e      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d019      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004de4:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004df0:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e00:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d016      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fc ff29 	bl	8001c78 <HAL_GetTick>
 8004e26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e28:	e00b      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fc ff25 	bl	8001c78 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d902      	bls.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	74fb      	strb	r3, [r7, #19]
            break;
 8004e40:	e006      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ec      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e56:	4b07      	ldr	r3, [pc, #28]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	4903      	ldr	r1, [pc, #12]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e6c:	e008      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	74bb      	strb	r3, [r7, #18]
 8004e72:	e005      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e80:	7c7b      	ldrb	r3, [r7, #17]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d105      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e86:	4ba7      	ldr	r3, [pc, #668]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	4aa6      	ldr	r2, [pc, #664]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e9e:	4ba1      	ldr	r3, [pc, #644]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f023 0203 	bic.w	r2, r3, #3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	499d      	ldr	r1, [pc, #628]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec0:	4b98      	ldr	r3, [pc, #608]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 020c 	bic.w	r2, r3, #12
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	4995      	ldr	r1, [pc, #596]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee2:	4b90      	ldr	r3, [pc, #576]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	498c      	ldr	r1, [pc, #560]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f04:	4b87      	ldr	r3, [pc, #540]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	4984      	ldr	r1, [pc, #528]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f26:	4b7f      	ldr	r3, [pc, #508]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	497b      	ldr	r1, [pc, #492]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f48:	4b76      	ldr	r3, [pc, #472]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	4973      	ldr	r1, [pc, #460]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f6a:	4b6e      	ldr	r3, [pc, #440]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	496a      	ldr	r1, [pc, #424]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f8c:	4b65      	ldr	r3, [pc, #404]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4962      	ldr	r1, [pc, #392]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fae:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	4959      	ldr	r1, [pc, #356]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fd0:	4b54      	ldr	r3, [pc, #336]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	4951      	ldr	r1, [pc, #324]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ff2:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4948      	ldr	r1, [pc, #288]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005010:	2b00      	cmp	r3, #0
 8005012:	d015      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005014:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	4940      	ldr	r1, [pc, #256]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005032:	d105      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005034:	4b3b      	ldr	r3, [pc, #236]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4a3a      	ldr	r2, [pc, #232]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800503e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005048:	2b00      	cmp	r3, #0
 800504a:	d015      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800504c:	4b35      	ldr	r3, [pc, #212]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	4932      	ldr	r1, [pc, #200]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800506a:	d105      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800506c:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005076:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d015      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005084:	4b27      	ldr	r3, [pc, #156]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	4924      	ldr	r1, [pc, #144]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050a2:	d105      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a4:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d015      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050bc:	4b19      	ldr	r3, [pc, #100]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	4916      	ldr	r1, [pc, #88]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050da:	d105      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050dc:	4b11      	ldr	r3, [pc, #68]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4a10      	ldr	r2, [pc, #64]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d019      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	4908      	ldr	r1, [pc, #32]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005112:	d109      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005114:	4b03      	ldr	r3, [pc, #12]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4a02      	ldr	r2, [pc, #8]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800511e:	60d3      	str	r3, [r2, #12]
 8005120:	e002      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d015      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005134:	4b29      	ldr	r3, [pc, #164]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	4926      	ldr	r1, [pc, #152]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005152:	d105      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005154:	4b21      	ldr	r3, [pc, #132]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4a20      	ldr	r2, [pc, #128]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d015      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517a:	4918      	ldr	r1, [pc, #96]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d105      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800518c:	4b13      	ldr	r3, [pc, #76]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	4a12      	ldr	r2, [pc, #72]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005196:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d015      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	490a      	ldr	r1, [pc, #40]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c2:	d105      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4a04      	ldr	r2, [pc, #16]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80051d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000

080051e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e049      	b.n	8005286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fbfa 	bl	8001a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fc44 	bl	8005aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d001      	beq.n	80052a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e04c      	b.n	8005342 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a26      	ldr	r2, [pc, #152]	; (8005350 <HAL_TIM_Base_Start+0xc0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <HAL_TIM_Base_Start+0x70>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c2:	d01d      	beq.n	8005300 <HAL_TIM_Base_Start+0x70>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a22      	ldr	r2, [pc, #136]	; (8005354 <HAL_TIM_Base_Start+0xc4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <HAL_TIM_Base_Start+0x70>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a21      	ldr	r2, [pc, #132]	; (8005358 <HAL_TIM_Base_Start+0xc8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <HAL_TIM_Base_Start+0x70>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	; (800535c <HAL_TIM_Base_Start+0xcc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_TIM_Base_Start+0x70>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_TIM_Base_Start+0xd0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_TIM_Base_Start+0x70>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_TIM_Base_Start+0xd4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_TIM_Base_Start+0x70>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <HAL_TIM_Base_Start+0xd8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d115      	bne.n	800532c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	4b19      	ldr	r3, [pc, #100]	; (800536c <HAL_TIM_Base_Start+0xdc>)
 8005308:	4013      	ands	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b06      	cmp	r3, #6
 8005310:	d015      	beq.n	800533e <HAL_TIM_Base_Start+0xae>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005318:	d011      	beq.n	800533e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532a:	e008      	b.n	800533e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e000      	b.n	8005340 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40012c00 	.word	0x40012c00
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40013400 	.word	0x40013400
 8005364:	40014000 	.word	0x40014000
 8005368:	40015000 	.word	0x40015000
 800536c:	00010007 	.word	0x00010007

08005370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e049      	b.n	8005416 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f841 	bl	800541e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f000 fb7c 	bl	8005aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d109      	bne.n	8005458 <HAL_TIM_PWM_Start+0x24>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e03c      	b.n	80054d2 <HAL_TIM_PWM_Start+0x9e>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b04      	cmp	r3, #4
 800545c:	d109      	bne.n	8005472 <HAL_TIM_PWM_Start+0x3e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	bf14      	ite	ne
 800546a:	2301      	movne	r3, #1
 800546c:	2300      	moveq	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e02f      	b.n	80054d2 <HAL_TIM_PWM_Start+0x9e>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d109      	bne.n	800548c <HAL_TIM_PWM_Start+0x58>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e022      	b.n	80054d2 <HAL_TIM_PWM_Start+0x9e>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d109      	bne.n	80054a6 <HAL_TIM_PWM_Start+0x72>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b01      	cmp	r3, #1
 800549c:	bf14      	ite	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	2300      	moveq	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	e015      	b.n	80054d2 <HAL_TIM_PWM_Start+0x9e>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d109      	bne.n	80054c0 <HAL_TIM_PWM_Start+0x8c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e008      	b.n	80054d2 <HAL_TIM_PWM_Start+0x9e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0a6      	b.n	8005628 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start+0xb6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e8:	e023      	b.n	8005532 <HAL_TIM_PWM_Start+0xfe>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start+0xc6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f8:	e01b      	b.n	8005532 <HAL_TIM_PWM_Start+0xfe>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start+0xd6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005508:	e013      	b.n	8005532 <HAL_TIM_PWM_Start+0xfe>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b0c      	cmp	r3, #12
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Start+0xe6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005518:	e00b      	b.n	8005532 <HAL_TIM_PWM_Start+0xfe>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b10      	cmp	r3, #16
 800551e:	d104      	bne.n	800552a <HAL_TIM_PWM_Start+0xf6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005528:	e003      	b.n	8005532 <HAL_TIM_PWM_Start+0xfe>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2201      	movs	r2, #1
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 ff30 	bl	80063a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a3a      	ldr	r2, [pc, #232]	; (8005630 <HAL_TIM_PWM_Start+0x1fc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d018      	beq.n	800557c <HAL_TIM_PWM_Start+0x148>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a39      	ldr	r2, [pc, #228]	; (8005634 <HAL_TIM_PWM_Start+0x200>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <HAL_TIM_PWM_Start+0x148>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a37      	ldr	r2, [pc, #220]	; (8005638 <HAL_TIM_PWM_Start+0x204>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00e      	beq.n	800557c <HAL_TIM_PWM_Start+0x148>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a36      	ldr	r2, [pc, #216]	; (800563c <HAL_TIM_PWM_Start+0x208>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d009      	beq.n	800557c <HAL_TIM_PWM_Start+0x148>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a34      	ldr	r2, [pc, #208]	; (8005640 <HAL_TIM_PWM_Start+0x20c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIM_PWM_Start+0x148>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a33      	ldr	r2, [pc, #204]	; (8005644 <HAL_TIM_PWM_Start+0x210>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_TIM_PWM_Start+0x14c>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_TIM_PWM_Start+0x14e>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a25      	ldr	r2, [pc, #148]	; (8005630 <HAL_TIM_PWM_Start+0x1fc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x1b2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d01d      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x1b2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a26      	ldr	r2, [pc, #152]	; (8005648 <HAL_TIM_PWM_Start+0x214>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x1b2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a24      	ldr	r2, [pc, #144]	; (800564c <HAL_TIM_PWM_Start+0x218>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x1b2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a23      	ldr	r2, [pc, #140]	; (8005650 <HAL_TIM_PWM_Start+0x21c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x1b2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_TIM_PWM_Start+0x200>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x1b2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_TIM_PWM_Start+0x204>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x1b2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a18      	ldr	r2, [pc, #96]	; (8005644 <HAL_TIM_PWM_Start+0x210>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d115      	bne.n	8005612 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	4b19      	ldr	r3, [pc, #100]	; (8005654 <HAL_TIM_PWM_Start+0x220>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b06      	cmp	r3, #6
 80055f6:	d015      	beq.n	8005624 <HAL_TIM_PWM_Start+0x1f0>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fe:	d011      	beq.n	8005624 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	e008      	b.n	8005624 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	e000      	b.n	8005626 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005624:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40013400 	.word	0x40013400
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800
 8005644:	40015000 	.word	0x40015000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	00010007 	.word	0x00010007

08005658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005672:	2302      	movs	r3, #2
 8005674:	e0ff      	b.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b14      	cmp	r3, #20
 8005682:	f200 80f0 	bhi.w	8005866 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056e1 	.word	0x080056e1
 8005690:	08005867 	.word	0x08005867
 8005694:	08005867 	.word	0x08005867
 8005698:	08005867 	.word	0x08005867
 800569c:	08005721 	.word	0x08005721
 80056a0:	08005867 	.word	0x08005867
 80056a4:	08005867 	.word	0x08005867
 80056a8:	08005867 	.word	0x08005867
 80056ac:	08005763 	.word	0x08005763
 80056b0:	08005867 	.word	0x08005867
 80056b4:	08005867 	.word	0x08005867
 80056b8:	08005867 	.word	0x08005867
 80056bc:	080057a3 	.word	0x080057a3
 80056c0:	08005867 	.word	0x08005867
 80056c4:	08005867 	.word	0x08005867
 80056c8:	08005867 	.word	0x08005867
 80056cc:	080057e5 	.word	0x080057e5
 80056d0:	08005867 	.word	0x08005867
 80056d4:	08005867 	.word	0x08005867
 80056d8:	08005867 	.word	0x08005867
 80056dc:	08005825 	.word	0x08005825
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fa94 	bl	8005c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0208 	orr.w	r2, r2, #8
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0204 	bic.w	r2, r2, #4
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	619a      	str	r2, [r3, #24]
      break;
 800571e:	e0a5      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fb0e 	bl	8005d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6999      	ldr	r1, [r3, #24]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	619a      	str	r2, [r3, #24]
      break;
 8005760:	e084      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fb81 	bl	8005e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0208 	orr.w	r2, r2, #8
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0204 	bic.w	r2, r2, #4
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	61da      	str	r2, [r3, #28]
      break;
 80057a0:	e064      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fbf3 	bl	8005f94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69d9      	ldr	r1, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	021a      	lsls	r2, r3, #8
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	61da      	str	r2, [r3, #28]
      break;
 80057e2:	e043      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fc66 	bl	80060bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0208 	orr.w	r2, r2, #8
 80057fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0204 	bic.w	r2, r2, #4
 800580e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005822:	e023      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fcb0 	bl	8006190 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800583e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005864:	e002      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	75fb      	strb	r3, [r7, #23]
      break;
 800586a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop

08005880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIM_ConfigClockSource+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e0f6      	b.n	8005a8a <HAL_TIM_ConfigClockSource+0x20a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80058ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a6f      	ldr	r2, [pc, #444]	; (8005a94 <HAL_TIM_ConfigClockSource+0x214>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f000 80c1 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80058dc:	4a6d      	ldr	r2, [pc, #436]	; (8005a94 <HAL_TIM_ConfigClockSource+0x214>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f200 80c6 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80058e4:	4a6c      	ldr	r2, [pc, #432]	; (8005a98 <HAL_TIM_ConfigClockSource+0x218>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	f000 80b9 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80058ec:	4a6a      	ldr	r2, [pc, #424]	; (8005a98 <HAL_TIM_ConfigClockSource+0x218>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	f200 80be 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80058f4:	4a69      	ldr	r2, [pc, #420]	; (8005a9c <HAL_TIM_ConfigClockSource+0x21c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	f000 80b1 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80058fc:	4a67      	ldr	r2, [pc, #412]	; (8005a9c <HAL_TIM_ConfigClockSource+0x21c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	f200 80b6 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005904:	4a66      	ldr	r2, [pc, #408]	; (8005aa0 <HAL_TIM_ConfigClockSource+0x220>)
 8005906:	4293      	cmp	r3, r2
 8005908:	f000 80a9 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800590c:	4a64      	ldr	r2, [pc, #400]	; (8005aa0 <HAL_TIM_ConfigClockSource+0x220>)
 800590e:	4293      	cmp	r3, r2
 8005910:	f200 80ae 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005914:	4a63      	ldr	r2, [pc, #396]	; (8005aa4 <HAL_TIM_ConfigClockSource+0x224>)
 8005916:	4293      	cmp	r3, r2
 8005918:	f000 80a1 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800591c:	4a61      	ldr	r2, [pc, #388]	; (8005aa4 <HAL_TIM_ConfigClockSource+0x224>)
 800591e:	4293      	cmp	r3, r2
 8005920:	f200 80a6 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005924:	4a60      	ldr	r2, [pc, #384]	; (8005aa8 <HAL_TIM_ConfigClockSource+0x228>)
 8005926:	4293      	cmp	r3, r2
 8005928:	f000 8099 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800592c:	4a5e      	ldr	r2, [pc, #376]	; (8005aa8 <HAL_TIM_ConfigClockSource+0x228>)
 800592e:	4293      	cmp	r3, r2
 8005930:	f200 809e 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005934:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005938:	f000 8091 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800593c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005940:	f200 8096 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005948:	f000 8089 	beq.w	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800594c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005950:	f200 808e 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005958:	d03e      	beq.n	80059d8 <HAL_TIM_ConfigClockSource+0x158>
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595e:	f200 8087 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	f000 8086 	beq.w	8005a76 <HAL_TIM_ConfigClockSource+0x1f6>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d87f      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005970:	2b70      	cmp	r3, #112	; 0x70
 8005972:	d01a      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x12a>
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	d87b      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005978:	2b60      	cmp	r3, #96	; 0x60
 800597a:	d050      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x19e>
 800597c:	2b60      	cmp	r3, #96	; 0x60
 800597e:	d877      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005980:	2b50      	cmp	r3, #80	; 0x50
 8005982:	d03c      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x17e>
 8005984:	2b50      	cmp	r3, #80	; 0x50
 8005986:	d873      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d058      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x1be>
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d86f      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	d064      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 8005994:	2b30      	cmp	r3, #48	; 0x30
 8005996:	d86b      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d060      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d867      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d05c      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d05a      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x1de>
 80059a8:	e062      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059ba:	f000 fcd1 	bl	8006360 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	609a      	str	r2, [r3, #8]
      break;
 80059d6:	e04f      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059e8:	f000 fcba 	bl	8006360 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059fa:	609a      	str	r2, [r3, #8]
      break;
 80059fc:	e03c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 fc2c 	bl	8006268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2150      	movs	r1, #80	; 0x50
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fc85 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8005a1c:	e02c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 fc4b 	bl	80062c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2160      	movs	r1, #96	; 0x60
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fc75 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e01c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f000 fc0c 	bl	8006268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2140      	movs	r1, #64	; 0x40
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fc65 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8005a5c:	e00c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f000 fc5c 	bl	8006326 <TIM_ITRx_SetConfig>
      break;
 8005a6e:	e003      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
      break;
 8005a74:	e000      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	00100070 	.word	0x00100070
 8005a98:	00100060 	.word	0x00100060
 8005a9c:	00100050 	.word	0x00100050
 8005aa0:	00100040 	.word	0x00100040
 8005aa4:	00100030 	.word	0x00100030
 8005aa8:	00100020 	.word	0x00100020

08005aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a4c      	ldr	r2, [pc, #304]	; (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d017      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d013      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a49      	ldr	r2, [pc, #292]	; (8005bf4 <TIM_Base_SetConfig+0x148>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00f      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a48      	ldr	r2, [pc, #288]	; (8005bf8 <TIM_Base_SetConfig+0x14c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a47      	ldr	r2, [pc, #284]	; (8005bfc <TIM_Base_SetConfig+0x150>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a46      	ldr	r2, [pc, #280]	; (8005c00 <TIM_Base_SetConfig+0x154>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a45      	ldr	r2, [pc, #276]	; (8005c04 <TIM_Base_SetConfig+0x158>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d108      	bne.n	8005b06 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a39      	ldr	r2, [pc, #228]	; (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d023      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b14:	d01f      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a36      	ldr	r2, [pc, #216]	; (8005bf4 <TIM_Base_SetConfig+0x148>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01b      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a35      	ldr	r2, [pc, #212]	; (8005bf8 <TIM_Base_SetConfig+0x14c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d017      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a34      	ldr	r2, [pc, #208]	; (8005bfc <TIM_Base_SetConfig+0x150>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <TIM_Base_SetConfig+0x154>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a33      	ldr	r2, [pc, #204]	; (8005c08 <TIM_Base_SetConfig+0x15c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a32      	ldr	r2, [pc, #200]	; (8005c0c <TIM_Base_SetConfig+0x160>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a31      	ldr	r2, [pc, #196]	; (8005c10 <TIM_Base_SetConfig+0x164>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2c      	ldr	r2, [pc, #176]	; (8005c04 <TIM_Base_SetConfig+0x158>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <TIM_Base_SetConfig+0x154>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00f      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a1a      	ldr	r2, [pc, #104]	; (8005c08 <TIM_Base_SetConfig+0x15c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <TIM_Base_SetConfig+0x160>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <TIM_Base_SetConfig+0x164>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <TIM_Base_SetConfig+0x158>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d103      	bne.n	8005bc4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d105      	bne.n	8005be2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f023 0201 	bic.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	611a      	str	r2, [r3, #16]
  }
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40013400 	.word	0x40013400
 8005c04:	40015000 	.word	0x40015000
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800

08005c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f023 0201 	bic.w	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f023 0302 	bic.w	r3, r3, #2
 8005c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a30      	ldr	r2, [pc, #192]	; (8005d30 <TIM_OC1_SetConfig+0x11c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <TIM_OC1_SetConfig+0x88>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a2f      	ldr	r2, [pc, #188]	; (8005d34 <TIM_OC1_SetConfig+0x120>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00f      	beq.n	8005c9c <TIM_OC1_SetConfig+0x88>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a2e      	ldr	r2, [pc, #184]	; (8005d38 <TIM_OC1_SetConfig+0x124>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <TIM_OC1_SetConfig+0x88>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <TIM_OC1_SetConfig+0x128>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <TIM_OC1_SetConfig+0x88>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a2c      	ldr	r2, [pc, #176]	; (8005d40 <TIM_OC1_SetConfig+0x12c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC1_SetConfig+0x88>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a2b      	ldr	r2, [pc, #172]	; (8005d44 <TIM_OC1_SetConfig+0x130>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d10c      	bne.n	8005cb6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0308 	bic.w	r3, r3, #8
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 0304 	bic.w	r3, r3, #4
 8005cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <TIM_OC1_SetConfig+0x11c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <TIM_OC1_SetConfig+0xd2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <TIM_OC1_SetConfig+0x120>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00f      	beq.n	8005ce6 <TIM_OC1_SetConfig+0xd2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <TIM_OC1_SetConfig+0x124>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00b      	beq.n	8005ce6 <TIM_OC1_SetConfig+0xd2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1a      	ldr	r2, [pc, #104]	; (8005d3c <TIM_OC1_SetConfig+0x128>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <TIM_OC1_SetConfig+0xd2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a19      	ldr	r2, [pc, #100]	; (8005d40 <TIM_OC1_SetConfig+0x12c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_OC1_SetConfig+0xd2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <TIM_OC1_SetConfig+0x130>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d111      	bne.n	8005d0a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800
 8005d44:	40015000 	.word	0x40015000

08005d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f023 0210 	bic.w	r2, r3, #16
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0320 	bic.w	r3, r3, #32
 8005d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a2c      	ldr	r2, [pc, #176]	; (8005e58 <TIM_OC2_SetConfig+0x110>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d007      	beq.n	8005dbc <TIM_OC2_SetConfig+0x74>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <TIM_OC2_SetConfig+0x114>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_OC2_SetConfig+0x74>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <TIM_OC2_SetConfig+0x118>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d10d      	bne.n	8005dd8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a1f      	ldr	r2, [pc, #124]	; (8005e58 <TIM_OC2_SetConfig+0x110>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <TIM_OC2_SetConfig+0xc0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1e      	ldr	r2, [pc, #120]	; (8005e5c <TIM_OC2_SetConfig+0x114>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <TIM_OC2_SetConfig+0xc0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1e      	ldr	r2, [pc, #120]	; (8005e64 <TIM_OC2_SetConfig+0x11c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_OC2_SetConfig+0xc0>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <TIM_OC2_SetConfig+0x120>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_OC2_SetConfig+0xc0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a1c      	ldr	r2, [pc, #112]	; (8005e6c <TIM_OC2_SetConfig+0x124>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC2_SetConfig+0xc0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <TIM_OC2_SetConfig+0x118>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d113      	bne.n	8005e30 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40013400 	.word	0x40013400
 8005e60:	40015000 	.word	0x40015000
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800

08005e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2b      	ldr	r2, [pc, #172]	; (8005f7c <TIM_OC3_SetConfig+0x10c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_OC3_SetConfig+0x72>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <TIM_OC3_SetConfig+0x110>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC3_SetConfig+0x72>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a29      	ldr	r2, [pc, #164]	; (8005f84 <TIM_OC3_SetConfig+0x114>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10d      	bne.n	8005efe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <TIM_OC3_SetConfig+0x10c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <TIM_OC3_SetConfig+0xbe>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <TIM_OC3_SetConfig+0x110>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00f      	beq.n	8005f2e <TIM_OC3_SetConfig+0xbe>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1d      	ldr	r2, [pc, #116]	; (8005f88 <TIM_OC3_SetConfig+0x118>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00b      	beq.n	8005f2e <TIM_OC3_SetConfig+0xbe>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <TIM_OC3_SetConfig+0x11c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d007      	beq.n	8005f2e <TIM_OC3_SetConfig+0xbe>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <TIM_OC3_SetConfig+0x120>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_OC3_SetConfig+0xbe>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <TIM_OC3_SetConfig+0x114>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d113      	bne.n	8005f56 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	621a      	str	r2, [r3, #32]
}
 8005f70:	bf00      	nop
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40013400 	.word	0x40013400
 8005f84:	40015000 	.word	0x40015000
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40014400 	.word	0x40014400
 8005f90:	40014800 	.word	0x40014800

08005f94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	031b      	lsls	r3, r3, #12
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a2c      	ldr	r2, [pc, #176]	; (80060a4 <TIM_OC4_SetConfig+0x110>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <TIM_OC4_SetConfig+0x74>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2b      	ldr	r2, [pc, #172]	; (80060a8 <TIM_OC4_SetConfig+0x114>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_OC4_SetConfig+0x74>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <TIM_OC4_SetConfig+0x118>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d10d      	bne.n	8006024 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800600e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	031b      	lsls	r3, r3, #12
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <TIM_OC4_SetConfig+0x110>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d013      	beq.n	8006054 <TIM_OC4_SetConfig+0xc0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <TIM_OC4_SetConfig+0x114>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00f      	beq.n	8006054 <TIM_OC4_SetConfig+0xc0>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <TIM_OC4_SetConfig+0x11c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00b      	beq.n	8006054 <TIM_OC4_SetConfig+0xc0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <TIM_OC4_SetConfig+0x120>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d007      	beq.n	8006054 <TIM_OC4_SetConfig+0xc0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1c      	ldr	r2, [pc, #112]	; (80060b8 <TIM_OC4_SetConfig+0x124>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <TIM_OC4_SetConfig+0xc0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a17      	ldr	r2, [pc, #92]	; (80060ac <TIM_OC4_SetConfig+0x118>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d113      	bne.n	800607c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800605a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006062:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	019b      	lsls	r3, r3, #6
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40013400 	.word	0x40013400
 80060ac:	40015000 	.word	0x40015000
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006100:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <TIM_OC5_SetConfig+0xbc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <TIM_OC5_SetConfig+0x82>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a18      	ldr	r2, [pc, #96]	; (800617c <TIM_OC5_SetConfig+0xc0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00f      	beq.n	800613e <TIM_OC5_SetConfig+0x82>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a17      	ldr	r2, [pc, #92]	; (8006180 <TIM_OC5_SetConfig+0xc4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_OC5_SetConfig+0x82>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a16      	ldr	r2, [pc, #88]	; (8006184 <TIM_OC5_SetConfig+0xc8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_OC5_SetConfig+0x82>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <TIM_OC5_SetConfig+0xcc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_OC5_SetConfig+0x82>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <TIM_OC5_SetConfig+0xd0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d109      	bne.n	8006152 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006144:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40013400 	.word	0x40013400
 8006180:	40014000 	.word	0x40014000
 8006184:	40014400 	.word	0x40014400
 8006188:	40014800 	.word	0x40014800
 800618c:	40015000 	.word	0x40015000

08006190 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	051b      	lsls	r3, r3, #20
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a1a      	ldr	r2, [pc, #104]	; (8006250 <TIM_OC6_SetConfig+0xc0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d013      	beq.n	8006214 <TIM_OC6_SetConfig+0x84>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a19      	ldr	r2, [pc, #100]	; (8006254 <TIM_OC6_SetConfig+0xc4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00f      	beq.n	8006214 <TIM_OC6_SetConfig+0x84>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a18      	ldr	r2, [pc, #96]	; (8006258 <TIM_OC6_SetConfig+0xc8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00b      	beq.n	8006214 <TIM_OC6_SetConfig+0x84>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a17      	ldr	r2, [pc, #92]	; (800625c <TIM_OC6_SetConfig+0xcc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <TIM_OC6_SetConfig+0x84>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a16      	ldr	r2, [pc, #88]	; (8006260 <TIM_OC6_SetConfig+0xd0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_OC6_SetConfig+0x84>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a15      	ldr	r2, [pc, #84]	; (8006264 <TIM_OC6_SetConfig+0xd4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d109      	bne.n	8006228 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800621a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	029b      	lsls	r3, r3, #10
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	621a      	str	r2, [r3, #32]
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40014000 	.word	0x40014000
 800625c:	40014400 	.word	0x40014400
 8006260:	40014800 	.word	0x40014800
 8006264:	40015000 	.word	0x40015000

08006268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0201 	bic.w	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f023 030a 	bic.w	r3, r3, #10
 80062a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f023 0210 	bic.w	r2, r3, #16
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	031b      	lsls	r3, r3, #12
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006302:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	f043 0307 	orr.w	r3, r3, #7
 800634c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800637a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	021a      	lsls	r2, r3, #8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	431a      	orrs	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4313      	orrs	r3, r2
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	609a      	str	r2, [r3, #8]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2201      	movs	r2, #1
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006400:	2302      	movs	r3, #2
 8006402:	e074      	b.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a34      	ldr	r2, [pc, #208]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d009      	beq.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a33      	ldr	r2, [pc, #204]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d004      	beq.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a31      	ldr	r2, [pc, #196]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d108      	bne.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006448:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a21      	ldr	r2, [pc, #132]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d022      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006484:	d01d      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1d      	ldr	r2, [pc, #116]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1c      	ldr	r2, [pc, #112]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a15      	ldr	r2, [pc, #84]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a18      	ldr	r2, [pc, #96]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10c      	bne.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40015000 	.word	0x40015000
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40014000 	.word	0x40014000

08006518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e042      	b.n	80065b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fb f9ff 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2224      	movs	r2, #36	; 0x24
 8006546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0201 	bic.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 ff42 	bl	80073ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fc43 	bl	8006df4 <UART_SetConfig>
 800656e:	4603      	mov	r3, r0
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e01b      	b.n	80065b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 ffc1 	bl	8007530 <UART_CheckIdleState>
 80065ae:	4603      	mov	r3, r0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	4613      	mov	r3, r2
 80065c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d17b      	bne.n	80066ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_UART_Transmit+0x26>
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e074      	b.n	80066cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2221      	movs	r2, #33	; 0x21
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065f2:	f7fb fb41 	bl	8001c78 <HAL_GetTick>
 80065f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	88fa      	ldrh	r2, [r7, #6]
 80065fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	88fa      	ldrh	r2, [r7, #6]
 8006604:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006610:	d108      	bne.n	8006624 <HAL_UART_Transmit+0x6c>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	e003      	b.n	800662c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800662c:	e030      	b.n	8006690 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2200      	movs	r2, #0
 8006636:	2180      	movs	r1, #128	; 0x80
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f001 f823 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e03d      	b.n	80066cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006664:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	3302      	adds	r3, #2
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	e007      	b.n	800667e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3301      	adds	r3, #1
 800667c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1c8      	bne.n	800662e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2200      	movs	r2, #0
 80066a4:	2140      	movs	r1, #64	; 0x40
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 ffec 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e006      	b.n	80066cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3720      	adds	r7, #32
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d137      	bne.n	800675c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_UART_Receive_IT+0x24>
 80066f2:	88fb      	ldrh	r3, [r7, #6]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e030      	b.n	800675e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a18      	ldr	r2, [pc, #96]	; (8006768 <HAL_UART_Receive_IT+0x94>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01f      	beq.n	800674c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d018      	beq.n	800674c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	623b      	str	r3, [r7, #32]
 800673a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	69f9      	ldr	r1, [r7, #28]
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	61bb      	str	r3, [r7, #24]
   return(result);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e6      	bne.n	800671a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800674c:	88fb      	ldrh	r3, [r7, #6]
 800674e:	461a      	mov	r2, r3
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f001 f804 	bl	8007760 <UART_Start_Receive_IT>
 8006758:	4603      	mov	r3, r0
 800675a:	e000      	b.n	800675e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800675c:	2302      	movs	r3, #2
  }
}
 800675e:	4618      	mov	r0, r3
 8006760:	3728      	adds	r7, #40	; 0x28
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40008000 	.word	0x40008000

0800676c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b0ba      	sub	sp, #232	; 0xe8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006792:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006796:	f640 030f 	movw	r3, #2063	; 0x80f
 800679a:	4013      	ands	r3, r2
 800679c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80067a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11b      	bne.n	80067e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d015      	beq.n	80067e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 82e3 	beq.w	8006d9c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
      }
      return;
 80067de:	e2dd      	b.n	8006d9c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8123 	beq.w	8006a30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80067ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067ee:	4b8d      	ldr	r3, [pc, #564]	; (8006a24 <HAL_UART_IRQHandler+0x2b8>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80067f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80067fa:	4b8b      	ldr	r3, [pc, #556]	; (8006a28 <HAL_UART_IRQHandler+0x2bc>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 8116 	beq.w	8006a30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d011      	beq.n	8006834 <HAL_UART_IRQHandler+0xc8>
 8006810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2201      	movs	r2, #1
 8006822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	f043 0201 	orr.w	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d011      	beq.n	8006864 <HAL_UART_IRQHandler+0xf8>
 8006840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2202      	movs	r2, #2
 8006852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f043 0204 	orr.w	r2, r3, #4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d011      	beq.n	8006894 <HAL_UART_IRQHandler+0x128>
 8006870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2204      	movs	r2, #4
 8006882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688a:	f043 0202 	orr.w	r2, r3, #2
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d017      	beq.n	80068d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80068b0:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <HAL_UART_IRQHandler+0x2b8>)
 80068b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2208      	movs	r2, #8
 80068be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c6:	f043 0208 	orr.w	r2, r3, #8
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d012      	beq.n	8006902 <HAL_UART_IRQHandler+0x196>
 80068dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00c      	beq.n	8006902 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8249 	beq.w	8006da0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d013      	beq.n	8006942 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800691a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d105      	bne.n	8006932 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800692a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d005      	beq.n	8006966 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800695a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800695e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006962:	2b00      	cmp	r3, #0
 8006964:	d054      	beq.n	8006a10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f81c 	bl	80079a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d146      	bne.n	8006a08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1d9      	bne.n	800697a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d017      	beq.n	8006a00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d6:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <HAL_UART_IRQHandler+0x2c0>)
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fd f859 	bl	8003a98 <HAL_DMA_Abort_IT>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d019      	beq.n	8006a20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fe:	e00f      	b.n	8006a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f9e1 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a06:	e00b      	b.n	8006a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f9dd 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0e:	e007      	b.n	8006a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f9d9 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a1e:	e1bf      	b.n	8006da0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a20:	bf00      	nop
    return;
 8006a22:	e1bd      	b.n	8006da0 <HAL_UART_IRQHandler+0x634>
 8006a24:	10000001 	.word	0x10000001
 8006a28:	04000120 	.word	0x04000120
 8006a2c:	08007a71 	.word	0x08007a71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	f040 8153 	bne.w	8006ce0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3e:	f003 0310 	and.w	r3, r3, #16
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 814c 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8145 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a68:	2b40      	cmp	r3, #64	; 0x40
 8006a6a:	f040 80bb 	bne.w	8006be4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 818f 	beq.w	8006da4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a90:	429a      	cmp	r2, r3
 8006a92:	f080 8187 	bcs.w	8006da4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 8087 	bne.w	8006bc2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ade:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ae2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1da      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e1      	bne.n	8006afe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b90:	f023 0310 	bic.w	r3, r3, #16
 8006b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ba4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e4      	bne.n	8006b80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fc ff12 	bl	80039e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f8fd 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006be2:	e0df      	b.n	8006da4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80d1 	beq.w	8006da8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80cc 	beq.w	8006da8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c32:	647b      	str	r3, [r7, #68]	; 0x44
 8006c34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e4      	bne.n	8006c10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	623b      	str	r3, [r7, #32]
   return(result);
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c6e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e1      	bne.n	8006c46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0310 	bic.w	r3, r3, #16
 8006caa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e4      	bne.n	8006c96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f87f 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cde:	e063      	b.n	8006da8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00e      	beq.n	8006d0a <HAL_UART_IRQHandler+0x59e>
 8006cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fc12 	bl	800852c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d08:	e051      	b.n	8006dae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d014      	beq.n	8006d40 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d03a      	beq.n	8006dac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
    }
    return;
 8006d3e:	e035      	b.n	8006dac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <HAL_UART_IRQHandler+0x5f4>
 8006d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fe9f 	bl	8007a9c <UART_EndTransmit_IT>
    return;
 8006d5e:	e026      	b.n	8006dae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d009      	beq.n	8006d80 <HAL_UART_IRQHandler+0x614>
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 fbeb 	bl	8008554 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7e:	e016      	b.n	8006dae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d010      	beq.n	8006dae <HAL_UART_IRQHandler+0x642>
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	da0c      	bge.n	8006dae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fbd3 	bl	8008540 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d9a:	e008      	b.n	8006dae <HAL_UART_IRQHandler+0x642>
      return;
 8006d9c:	bf00      	nop
 8006d9e:	e006      	b.n	8006dae <HAL_UART_IRQHandler+0x642>
    return;
 8006da0:	bf00      	nop
 8006da2:	e004      	b.n	8006dae <HAL_UART_IRQHandler+0x642>
      return;
 8006da4:	bf00      	nop
 8006da6:	e002      	b.n	8006dae <HAL_UART_IRQHandler+0x642>
      return;
 8006da8:	bf00      	nop
 8006daa:	e000      	b.n	8006dae <HAL_UART_IRQHandler+0x642>
    return;
 8006dac:	bf00      	nop
  }
}
 8006dae:	37e8      	adds	r7, #232	; 0xe8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df8:	b08c      	sub	sp, #48	; 0x30
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4baa      	ldr	r3, [pc, #680]	; (80070cc <UART_SetConfig+0x2d8>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a9f      	ldr	r2, [pc, #636]	; (80070d0 <UART_SetConfig+0x2dc>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	f023 010f 	bic.w	r1, r3, #15
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a90      	ldr	r2, [pc, #576]	; (80070d4 <UART_SetConfig+0x2e0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d125      	bne.n	8006ee4 <UART_SetConfig+0xf0>
 8006e98:	4b8f      	ldr	r3, [pc, #572]	; (80070d8 <UART_SetConfig+0x2e4>)
 8006e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d81a      	bhi.n	8006edc <UART_SetConfig+0xe8>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0xb8>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ecd 	.word	0x08006ecd
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ed5 	.word	0x08006ed5
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec2:	e116      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eca:	e112      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed2:	e10e      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eda:	e10a      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006edc:	2310      	movs	r3, #16
 8006ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee2:	e106      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a7c      	ldr	r2, [pc, #496]	; (80070dc <UART_SetConfig+0x2e8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d138      	bne.n	8006f60 <UART_SetConfig+0x16c>
 8006eee:	4b7a      	ldr	r3, [pc, #488]	; (80070d8 <UART_SetConfig+0x2e4>)
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef4:	f003 030c 	and.w	r3, r3, #12
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d82d      	bhi.n	8006f58 <UART_SetConfig+0x164>
 8006efc:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x110>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f39 	.word	0x08006f39
 8006f08:	08006f59 	.word	0x08006f59
 8006f0c:	08006f59 	.word	0x08006f59
 8006f10:	08006f59 	.word	0x08006f59
 8006f14:	08006f49 	.word	0x08006f49
 8006f18:	08006f59 	.word	0x08006f59
 8006f1c:	08006f59 	.word	0x08006f59
 8006f20:	08006f59 	.word	0x08006f59
 8006f24:	08006f41 	.word	0x08006f41
 8006f28:	08006f59 	.word	0x08006f59
 8006f2c:	08006f59 	.word	0x08006f59
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3e:	e0d8      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006f40:	2302      	movs	r3, #2
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f46:	e0d4      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f4e:	e0d0      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006f50:	2308      	movs	r3, #8
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f56:	e0cc      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006f58:	2310      	movs	r3, #16
 8006f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f5e:	e0c8      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a5e      	ldr	r2, [pc, #376]	; (80070e0 <UART_SetConfig+0x2ec>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d125      	bne.n	8006fb6 <UART_SetConfig+0x1c2>
 8006f6a:	4b5b      	ldr	r3, [pc, #364]	; (80070d8 <UART_SetConfig+0x2e4>)
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f74:	2b30      	cmp	r3, #48	; 0x30
 8006f76:	d016      	beq.n	8006fa6 <UART_SetConfig+0x1b2>
 8006f78:	2b30      	cmp	r3, #48	; 0x30
 8006f7a:	d818      	bhi.n	8006fae <UART_SetConfig+0x1ba>
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d00a      	beq.n	8006f96 <UART_SetConfig+0x1a2>
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d814      	bhi.n	8006fae <UART_SetConfig+0x1ba>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <UART_SetConfig+0x19a>
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d008      	beq.n	8006f9e <UART_SetConfig+0x1aa>
 8006f8c:	e00f      	b.n	8006fae <UART_SetConfig+0x1ba>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f94:	e0ad      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006f96:	2302      	movs	r3, #2
 8006f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9c:	e0a9      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006f9e:	2304      	movs	r3, #4
 8006fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fa4:	e0a5      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fac:	e0a1      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006fae:	2310      	movs	r3, #16
 8006fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb4:	e09d      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a4a      	ldr	r2, [pc, #296]	; (80070e4 <UART_SetConfig+0x2f0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d125      	bne.n	800700c <UART_SetConfig+0x218>
 8006fc0:	4b45      	ldr	r3, [pc, #276]	; (80070d8 <UART_SetConfig+0x2e4>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fca:	2bc0      	cmp	r3, #192	; 0xc0
 8006fcc:	d016      	beq.n	8006ffc <UART_SetConfig+0x208>
 8006fce:	2bc0      	cmp	r3, #192	; 0xc0
 8006fd0:	d818      	bhi.n	8007004 <UART_SetConfig+0x210>
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d00a      	beq.n	8006fec <UART_SetConfig+0x1f8>
 8006fd6:	2b80      	cmp	r3, #128	; 0x80
 8006fd8:	d814      	bhi.n	8007004 <UART_SetConfig+0x210>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <UART_SetConfig+0x1f0>
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d008      	beq.n	8006ff4 <UART_SetConfig+0x200>
 8006fe2:	e00f      	b.n	8007004 <UART_SetConfig+0x210>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fea:	e082      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006fec:	2302      	movs	r3, #2
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ff2:	e07e      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ffa:	e07a      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8006ffc:	2308      	movs	r3, #8
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007002:	e076      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8007004:	2310      	movs	r3, #16
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700a:	e072      	b.n	80070f2 <UART_SetConfig+0x2fe>
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a35      	ldr	r2, [pc, #212]	; (80070e8 <UART_SetConfig+0x2f4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d12a      	bne.n	800706c <UART_SetConfig+0x278>
 8007016:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <UART_SetConfig+0x2e4>)
 8007018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007024:	d01a      	beq.n	800705c <UART_SetConfig+0x268>
 8007026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800702a:	d81b      	bhi.n	8007064 <UART_SetConfig+0x270>
 800702c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007030:	d00c      	beq.n	800704c <UART_SetConfig+0x258>
 8007032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007036:	d815      	bhi.n	8007064 <UART_SetConfig+0x270>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <UART_SetConfig+0x250>
 800703c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007040:	d008      	beq.n	8007054 <UART_SetConfig+0x260>
 8007042:	e00f      	b.n	8007064 <UART_SetConfig+0x270>
 8007044:	2300      	movs	r3, #0
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800704a:	e052      	b.n	80070f2 <UART_SetConfig+0x2fe>
 800704c:	2302      	movs	r3, #2
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007052:	e04e      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8007054:	2304      	movs	r3, #4
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800705a:	e04a      	b.n	80070f2 <UART_SetConfig+0x2fe>
 800705c:	2308      	movs	r3, #8
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007062:	e046      	b.n	80070f2 <UART_SetConfig+0x2fe>
 8007064:	2310      	movs	r3, #16
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706a:	e042      	b.n	80070f2 <UART_SetConfig+0x2fe>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <UART_SetConfig+0x2dc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d13a      	bne.n	80070ec <UART_SetConfig+0x2f8>
 8007076:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <UART_SetConfig+0x2e4>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007084:	d01a      	beq.n	80070bc <UART_SetConfig+0x2c8>
 8007086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800708a:	d81b      	bhi.n	80070c4 <UART_SetConfig+0x2d0>
 800708c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007090:	d00c      	beq.n	80070ac <UART_SetConfig+0x2b8>
 8007092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007096:	d815      	bhi.n	80070c4 <UART_SetConfig+0x2d0>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <UART_SetConfig+0x2b0>
 800709c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a0:	d008      	beq.n	80070b4 <UART_SetConfig+0x2c0>
 80070a2:	e00f      	b.n	80070c4 <UART_SetConfig+0x2d0>
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070aa:	e022      	b.n	80070f2 <UART_SetConfig+0x2fe>
 80070ac:	2302      	movs	r3, #2
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b2:	e01e      	b.n	80070f2 <UART_SetConfig+0x2fe>
 80070b4:	2304      	movs	r3, #4
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ba:	e01a      	b.n	80070f2 <UART_SetConfig+0x2fe>
 80070bc:	2308      	movs	r3, #8
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c2:	e016      	b.n	80070f2 <UART_SetConfig+0x2fe>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ca:	e012      	b.n	80070f2 <UART_SetConfig+0x2fe>
 80070cc:	cfff69f3 	.word	0xcfff69f3
 80070d0:	40008000 	.word	0x40008000
 80070d4:	40013800 	.word	0x40013800
 80070d8:	40021000 	.word	0x40021000
 80070dc:	40004400 	.word	0x40004400
 80070e0:	40004800 	.word	0x40004800
 80070e4:	40004c00 	.word	0x40004c00
 80070e8:	40005000 	.word	0x40005000
 80070ec:	2310      	movs	r3, #16
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4aae      	ldr	r2, [pc, #696]	; (80073b0 <UART_SetConfig+0x5bc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	f040 8097 	bne.w	800722c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007102:	2b08      	cmp	r3, #8
 8007104:	d823      	bhi.n	800714e <UART_SetConfig+0x35a>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <UART_SetConfig+0x318>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	08007131 	.word	0x08007131
 8007110:	0800714f 	.word	0x0800714f
 8007114:	08007139 	.word	0x08007139
 8007118:	0800714f 	.word	0x0800714f
 800711c:	0800713f 	.word	0x0800713f
 8007120:	0800714f 	.word	0x0800714f
 8007124:	0800714f 	.word	0x0800714f
 8007128:	0800714f 	.word	0x0800714f
 800712c:	08007147 	.word	0x08007147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fd fd96 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8007134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007136:	e010      	b.n	800715a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007138:	4b9e      	ldr	r3, [pc, #632]	; (80073b4 <UART_SetConfig+0x5c0>)
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800713c:	e00d      	b.n	800715a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713e:	f7fd fd21 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8007142:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007144:	e009      	b.n	800715a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800714c:	e005      	b.n	800715a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8130 	beq.w	80073c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	4a94      	ldr	r2, [pc, #592]	; (80073b8 <UART_SetConfig+0x5c4>)
 8007168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800716c:	461a      	mov	r2, r3
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	fbb3 f3f2 	udiv	r3, r3, r2
 8007174:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	4613      	mov	r3, r2
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	4413      	add	r3, r2
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	429a      	cmp	r2, r3
 8007184:	d305      	bcc.n	8007192 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	429a      	cmp	r2, r3
 8007190:	d903      	bls.n	800719a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007198:	e113      	b.n	80073c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	2200      	movs	r2, #0
 800719e:	60bb      	str	r3, [r7, #8]
 80071a0:	60fa      	str	r2, [r7, #12]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	4a84      	ldr	r2, [pc, #528]	; (80073b8 <UART_SetConfig+0x5c4>)
 80071a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2200      	movs	r2, #0
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071bc:	f7f9 fc92 	bl	8000ae4 <__aeabi_uldivmod>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4610      	mov	r0, r2
 80071c6:	4619      	mov	r1, r3
 80071c8:	f04f 0200 	mov.w	r2, #0
 80071cc:	f04f 0300 	mov.w	r3, #0
 80071d0:	020b      	lsls	r3, r1, #8
 80071d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071d6:	0202      	lsls	r2, r0, #8
 80071d8:	6979      	ldr	r1, [r7, #20]
 80071da:	6849      	ldr	r1, [r1, #4]
 80071dc:	0849      	lsrs	r1, r1, #1
 80071de:	2000      	movs	r0, #0
 80071e0:	460c      	mov	r4, r1
 80071e2:	4605      	mov	r5, r0
 80071e4:	eb12 0804 	adds.w	r8, r2, r4
 80071e8:	eb43 0905 	adc.w	r9, r3, r5
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	469a      	mov	sl, r3
 80071f4:	4693      	mov	fp, r2
 80071f6:	4652      	mov	r2, sl
 80071f8:	465b      	mov	r3, fp
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 fc71 	bl	8000ae4 <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4613      	mov	r3, r2
 8007208:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007210:	d308      	bcc.n	8007224 <UART_SetConfig+0x430>
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007218:	d204      	bcs.n	8007224 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6a3a      	ldr	r2, [r7, #32]
 8007220:	60da      	str	r2, [r3, #12]
 8007222:	e0ce      	b.n	80073c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800722a:	e0ca      	b.n	80073c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007234:	d166      	bne.n	8007304 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800723a:	2b08      	cmp	r3, #8
 800723c:	d827      	bhi.n	800728e <UART_SetConfig+0x49a>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <UART_SetConfig+0x450>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007269 	.word	0x08007269
 8007248:	08007271 	.word	0x08007271
 800724c:	08007279 	.word	0x08007279
 8007250:	0800728f 	.word	0x0800728f
 8007254:	0800727f 	.word	0x0800727f
 8007258:	0800728f 	.word	0x0800728f
 800725c:	0800728f 	.word	0x0800728f
 8007260:	0800728f 	.word	0x0800728f
 8007264:	08007287 	.word	0x08007287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007268:	f7fd fcfa 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 800726c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800726e:	e014      	b.n	800729a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007270:	f7fd fd0c 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 8007274:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007276:	e010      	b.n	800729a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007278:	4b4e      	ldr	r3, [pc, #312]	; (80073b4 <UART_SetConfig+0x5c0>)
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800727c:	e00d      	b.n	800729a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727e:	f7fd fc81 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8007282:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007284:	e009      	b.n	800729a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800728c:	e005      	b.n	800729a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8090 	beq.w	80073c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	4a44      	ldr	r2, [pc, #272]	; (80073b8 <UART_SetConfig+0x5c4>)
 80072a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072b4:	005a      	lsls	r2, r3, #1
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	441a      	add	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	2b0f      	cmp	r3, #15
 80072cc:	d916      	bls.n	80072fc <UART_SetConfig+0x508>
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d4:	d212      	bcs.n	80072fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f023 030f 	bic.w	r3, r3, #15
 80072de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	085b      	lsrs	r3, r3, #1
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	8bfb      	ldrh	r3, [r7, #30]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	8bfa      	ldrh	r2, [r7, #30]
 80072f8:	60da      	str	r2, [r3, #12]
 80072fa:	e062      	b.n	80073c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007302:	e05e      	b.n	80073c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007304:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007308:	2b08      	cmp	r3, #8
 800730a:	d828      	bhi.n	800735e <UART_SetConfig+0x56a>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x520>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007339 	.word	0x08007339
 8007318:	08007341 	.word	0x08007341
 800731c:	08007349 	.word	0x08007349
 8007320:	0800735f 	.word	0x0800735f
 8007324:	0800734f 	.word	0x0800734f
 8007328:	0800735f 	.word	0x0800735f
 800732c:	0800735f 	.word	0x0800735f
 8007330:	0800735f 	.word	0x0800735f
 8007334:	08007357 	.word	0x08007357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fd fc92 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 800733c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800733e:	e014      	b.n	800736a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007340:	f7fd fca4 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 8007344:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007346:	e010      	b.n	800736a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007348:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <UART_SetConfig+0x5c0>)
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800734c:	e00d      	b.n	800736a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734e:	f7fd fc19 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8007352:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007354:	e009      	b.n	800736a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800735c:	e005      	b.n	800736a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007368:	bf00      	nop
    }

    if (pclk != 0U)
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d028      	beq.n	80073c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	4a10      	ldr	r2, [pc, #64]	; (80073b8 <UART_SetConfig+0x5c4>)
 8007376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800737a:	461a      	mov	r2, r3
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	441a      	add	r2, r3
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007392:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	2b0f      	cmp	r3, #15
 8007398:	d910      	bls.n	80073bc <UART_SetConfig+0x5c8>
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a0:	d20c      	bcs.n	80073bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60da      	str	r2, [r3, #12]
 80073ac:	e009      	b.n	80073c2 <UART_SetConfig+0x5ce>
 80073ae:	bf00      	nop
 80073b0:	40008000 	.word	0x40008000
 80073b4:	00f42400 	.word	0x00f42400
 80073b8:	08008864 	.word	0x08008864
      }
      else
      {
        ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2200      	movs	r2, #0
 80073d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2200      	movs	r2, #0
 80073dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80073de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3730      	adds	r7, #48	; 0x30
 80073e6:	46bd      	mov	sp, r7
 80073e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080073ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01a      	beq.n	8007502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ea:	d10a      	bne.n	8007502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	605a      	str	r2, [r3, #4]
  }
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b098      	sub	sp, #96	; 0x60
 8007534:	af02      	add	r7, sp, #8
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007540:	f7fa fb9a 	bl	8001c78 <HAL_GetTick>
 8007544:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b08      	cmp	r3, #8
 8007552:	d12f      	bne.n	80075b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755c:	2200      	movs	r2, #0
 800755e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f88e 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d022      	beq.n	80075b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007582:	653b      	str	r3, [r7, #80]	; 0x50
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758c:	647b      	str	r3, [r7, #68]	; 0x44
 800758e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800759a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e6      	bne.n	800756e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e063      	b.n	800767c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d149      	bne.n	8007656 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ca:	2200      	movs	r2, #0
 80075cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f857 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d03c      	beq.n	8007656 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	623b      	str	r3, [r7, #32]
   return(result);
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
 80075fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	60fb      	str	r3, [r7, #12]
   return(result);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	64bb      	str	r3, [r7, #72]	; 0x48
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762e:	61fa      	str	r2, [r7, #28]
 8007630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	617b      	str	r3, [r7, #20]
   return(result);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e012      	b.n	800767c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3758      	adds	r7, #88	; 0x58
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007694:	e04f      	b.n	8007736 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d04b      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769e:	f7fa faeb 	bl	8001c78 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e04e      	b.n	8007756 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d037      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b80      	cmp	r3, #128	; 0x80
 80076ca:	d034      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d031      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d110      	bne.n	8007702 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2208      	movs	r2, #8
 80076e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f95b 	bl	80079a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2208      	movs	r2, #8
 80076f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e029      	b.n	8007756 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800770c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007710:	d111      	bne.n	8007736 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800771a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f941 	bl	80079a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e00f      	b.n	8007756 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4013      	ands	r3, r2
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	429a      	cmp	r2, r3
 8007744:	bf0c      	ite	eq
 8007746:	2301      	moveq	r3, #1
 8007748:	2300      	movne	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	429a      	cmp	r2, r3
 8007752:	d0a0      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007760:	b480      	push	{r7}
 8007762:	b0a3      	sub	sp, #140	; 0x8c
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	88fa      	ldrh	r2, [r7, #6]
 8007778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	88fa      	ldrh	r2, [r7, #6]
 8007780:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007792:	d10e      	bne.n	80077b2 <UART_Start_Receive_IT+0x52>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d105      	bne.n	80077a8 <UART_Start_Receive_IT+0x48>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077a6:	e02d      	b.n	8007804 <UART_Start_Receive_IT+0xa4>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	22ff      	movs	r2, #255	; 0xff
 80077ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077b0:	e028      	b.n	8007804 <UART_Start_Receive_IT+0xa4>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10d      	bne.n	80077d6 <UART_Start_Receive_IT+0x76>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <UART_Start_Receive_IT+0x6c>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077ca:	e01b      	b.n	8007804 <UART_Start_Receive_IT+0xa4>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	227f      	movs	r2, #127	; 0x7f
 80077d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077d4:	e016      	b.n	8007804 <UART_Start_Receive_IT+0xa4>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077de:	d10d      	bne.n	80077fc <UART_Start_Receive_IT+0x9c>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <UART_Start_Receive_IT+0x92>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	227f      	movs	r2, #127	; 0x7f
 80077ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077f0:	e008      	b.n	8007804 <UART_Start_Receive_IT+0xa4>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	223f      	movs	r2, #63	; 0x3f
 80077f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077fa:	e003      	b.n	8007804 <UART_Start_Receive_IT+0xa4>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2222      	movs	r2, #34	; 0x22
 8007810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3308      	adds	r3, #8
 800781a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007826:	f043 0301 	orr.w	r3, r3, #1
 800782a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3308      	adds	r3, #8
 8007834:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007838:	673a      	str	r2, [r7, #112]	; 0x70
 800783a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800783e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e3      	bne.n	8007814 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007854:	d14f      	bne.n	80078f6 <UART_Start_Receive_IT+0x196>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800785c:	88fa      	ldrh	r2, [r7, #6]
 800785e:	429a      	cmp	r2, r3
 8007860:	d349      	bcc.n	80078f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786a:	d107      	bne.n	800787c <UART_Start_Receive_IT+0x11c>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4a47      	ldr	r2, [pc, #284]	; (8007994 <UART_Start_Receive_IT+0x234>)
 8007878:	675a      	str	r2, [r3, #116]	; 0x74
 800787a:	e002      	b.n	8007882 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4a46      	ldr	r2, [pc, #280]	; (8007998 <UART_Start_Receive_IT+0x238>)
 8007880:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01a      	beq.n	80078c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800789e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e4      	bne.n	800788a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3308      	adds	r3, #8
 80078de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80078e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80078e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e5      	bne.n	80078c0 <UART_Start_Receive_IT+0x160>
 80078f4:	e046      	b.n	8007984 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fe:	d107      	bne.n	8007910 <UART_Start_Receive_IT+0x1b0>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d103      	bne.n	8007910 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4a24      	ldr	r2, [pc, #144]	; (800799c <UART_Start_Receive_IT+0x23c>)
 800790c:	675a      	str	r2, [r3, #116]	; 0x74
 800790e:	e002      	b.n	8007916 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4a23      	ldr	r2, [pc, #140]	; (80079a0 <UART_Start_Receive_IT+0x240>)
 8007914:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d019      	beq.n	8007952 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007932:	677b      	str	r3, [r7, #116]	; 0x74
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
 800793e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e6      	bne.n	800791e <UART_Start_Receive_IT+0x1be>
 8007950:	e018      	b.n	8007984 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	613b      	str	r3, [r7, #16]
   return(result);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f043 0320 	orr.w	r3, r3, #32
 8007966:	67bb      	str	r3, [r7, #120]	; 0x78
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007970:	623b      	str	r3, [r7, #32]
 8007972:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	69f9      	ldr	r1, [r7, #28]
 8007976:	6a3a      	ldr	r2, [r7, #32]
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	61bb      	str	r3, [r7, #24]
   return(result);
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e6      	bne.n	8007952 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	378c      	adds	r7, #140	; 0x8c
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	080081c5 	.word	0x080081c5
 8007998:	08007e65 	.word	0x08007e65
 800799c:	08007cad 	.word	0x08007cad
 80079a0:	08007af5 	.word	0x08007af5

080079a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b095      	sub	sp, #84	; 0x54
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ca:	643b      	str	r3, [r7, #64]	; 0x40
 80079cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e6      	bne.n	80079ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3308      	adds	r3, #8
 80079e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f4:	f023 0301 	bic.w	r3, r3, #1
 80079f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3308      	adds	r3, #8
 8007a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e3      	bne.n	80079de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d118      	bne.n	8007a50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f023 0310 	bic.w	r3, r3, #16
 8007a32:	647b      	str	r3, [r7, #68]	; 0x44
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6979      	ldr	r1, [r7, #20]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e6      	bne.n	8007a1e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a64:	bf00      	nop
 8007a66:	3754      	adds	r7, #84	; 0x54
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff f99a 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a94:	bf00      	nop
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab8:	61fb      	str	r3, [r7, #28]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6979      	ldr	r1, [r7, #20]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e6      	bne.n	8007aa4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff f965 	bl	8006db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aea:	bf00      	nop
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b09c      	sub	sp, #112	; 0x70
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b0c:	2b22      	cmp	r3, #34	; 0x22
 8007b0e:	f040 80be 	bne.w	8007c8e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b20:	b2d9      	uxtb	r1, r3
 8007b22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2c:	400a      	ands	r2, r1
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f040 80a1 	bne.w	8007c9e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e6      	bne.n	8007b5c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	f023 0301 	bic.w	r3, r3, #1
 8007ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3308      	adds	r3, #8
 8007bac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bae:	647a      	str	r2, [r7, #68]	; 0x44
 8007bb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e5      	bne.n	8007b8e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a33      	ldr	r2, [pc, #204]	; (8007ca8 <UART_RxISR_8BIT+0x1b4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d01f      	beq.n	8007c20 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d018      	beq.n	8007c20 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	623b      	str	r3, [r7, #32]
   return(result);
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c02:	663b      	str	r3, [r7, #96]	; 0x60
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e6      	bne.n	8007bee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d12e      	bne.n	8007c86 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0310 	bic.w	r3, r3, #16
 8007c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	69b9      	ldr	r1, [r7, #24]
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	e841 2300 	strex	r3, r2, [r1]
 8007c58:	617b      	str	r3, [r7, #20]
   return(result);
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e6      	bne.n	8007c2e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d103      	bne.n	8007c76 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2210      	movs	r2, #16
 8007c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff f8ac 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c84:	e00b      	b.n	8007c9e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7f9 fc5e 	bl	8001548 <HAL_UART_RxCpltCallback>
}
 8007c8c:	e007      	b.n	8007c9e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0208 	orr.w	r2, r2, #8
 8007c9c:	619a      	str	r2, [r3, #24]
}
 8007c9e:	bf00      	nop
 8007ca0:	3770      	adds	r7, #112	; 0x70
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40008000 	.word	0x40008000

08007cac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b09c      	sub	sp, #112	; 0x70
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc4:	2b22      	cmp	r3, #34	; 0x22
 8007cc6:	f040 80be 	bne.w	8007e46 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007cda:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007cde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ce8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cee:	1c9a      	adds	r2, r3, #2
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f040 80a1 	bne.w	8007e56 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
 8007d20:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d28:	667b      	str	r3, [r7, #100]	; 0x64
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d32:	657b      	str	r3, [r7, #84]	; 0x54
 8007d34:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1e6      	bne.n	8007d14 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	f023 0301 	bic.w	r3, r3, #1
 8007d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3308      	adds	r3, #8
 8007d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d66:	643a      	str	r2, [r7, #64]	; 0x40
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e5      	bne.n	8007d46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a33      	ldr	r2, [pc, #204]	; (8007e60 <UART_RxISR_16BIT+0x1b4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d01f      	beq.n	8007dd8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d018      	beq.n	8007dd8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e6      	bne.n	8007da6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d12e      	bne.n	8007e3e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f023 0310 	bic.w	r3, r3, #16
 8007dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6979      	ldr	r1, [r7, #20]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	613b      	str	r3, [r7, #16]
   return(result);
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e6      	bne.n	8007de6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f003 0310 	and.w	r3, r3, #16
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d103      	bne.n	8007e2e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2210      	movs	r2, #16
 8007e2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7fe ffd0 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e3c:	e00b      	b.n	8007e56 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7f9 fb82 	bl	8001548 <HAL_UART_RxCpltCallback>
}
 8007e44:	e007      	b.n	8007e56 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	699a      	ldr	r2, [r3, #24]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0208 	orr.w	r2, r2, #8
 8007e54:	619a      	str	r2, [r3, #24]
}
 8007e56:	bf00      	nop
 8007e58:	3770      	adds	r7, #112	; 0x70
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40008000 	.word	0x40008000

08007e64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b0ac      	sub	sp, #176	; 0xb0
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e72:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e9a:	2b22      	cmp	r3, #34	; 0x22
 8007e9c:	f040 8182 	bne.w	80081a4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ea6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007eaa:	e125      	b.n	80080f8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007eb6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007eba:	b2d9      	uxtb	r1, r3
 8007ebc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec6:	400a      	ands	r2, r1
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d053      	beq.n	8007fa6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d011      	beq.n	8007f2e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f24:	f043 0201 	orr.w	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f54:	f043 0204 	orr.w	r2, r3, #4
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d011      	beq.n	8007f8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	f043 0202 	orr.w	r2, r3, #2
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d006      	beq.n	8007fa6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7fe ff15 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 80a2 	bne.w	80080f8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fd8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007fdc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e4      	bne.n	8007fb4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3308      	adds	r3, #8
 800800e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008012:	66ba      	str	r2, [r7, #104]	; 0x68
 8008014:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008018:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e1      	bne.n	8007fea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a5f      	ldr	r2, [pc, #380]	; (80081bc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d021      	beq.n	8008088 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01a      	beq.n	8008088 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008062:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008074:	657b      	str	r3, [r7, #84]	; 0x54
 8008076:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800807a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800807c:	e841 2300 	strex	r3, r2, [r1]
 8008080:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e4      	bne.n	8008052 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d130      	bne.n	80080f2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	f023 0310 	bic.w	r3, r3, #16
 80080aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080b8:	643b      	str	r3, [r7, #64]	; 0x40
 80080ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e4      	bne.n	8008096 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d103      	bne.n	80080e2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2210      	movs	r2, #16
 80080e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fe fe76 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
 80080f0:	e002      	b.n	80080f8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f9 fa28 	bl	8001548 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	f47f aecf 	bne.w	8007eac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008114:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008118:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800811c:	2b00      	cmp	r3, #0
 800811e:	d049      	beq.n	80081b4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008126:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800812a:	429a      	cmp	r2, r3
 800812c:	d242      	bcs.n	80081b4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	61fb      	str	r3, [r7, #28]
   return(result);
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3308      	adds	r3, #8
 800814e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e3      	bne.n	800812e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a15      	ldr	r2, [pc, #84]	; (80081c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800816a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	60bb      	str	r3, [r7, #8]
   return(result);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f043 0320 	orr.w	r3, r3, #32
 8008180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	6979      	ldr	r1, [r7, #20]
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	613b      	str	r3, [r7, #16]
   return(result);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e4      	bne.n	800816c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081a2:	e007      	b.n	80081b4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0208 	orr.w	r2, r2, #8
 80081b2:	619a      	str	r2, [r3, #24]
}
 80081b4:	bf00      	nop
 80081b6:	37b0      	adds	r7, #176	; 0xb0
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40008000 	.word	0x40008000
 80081c0:	08007af5 	.word	0x08007af5

080081c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b0ae      	sub	sp, #184	; 0xb8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fa:	2b22      	cmp	r3, #34	; 0x22
 80081fc:	f040 8186 	bne.w	800850c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008206:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800820a:	e129      	b.n	8008460 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800821e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008222:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008226:	4013      	ands	r3, r2
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800822e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008234:	1c9a      	adds	r2, r3, #2
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	b29a      	uxth	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	2b00      	cmp	r3, #0
 8008260:	d053      	beq.n	800830a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d011      	beq.n	8008292 <UART_RxISR_16BIT_FIFOEN+0xce>
 800826e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2201      	movs	r2, #1
 8008280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008288:	f043 0201 	orr.w	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008292:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d011      	beq.n	80082c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800829e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00b      	beq.n	80082c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2202      	movs	r2, #2
 80082b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b8:	f043 0204 	orr.w	r2, r3, #4
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d011      	beq.n	80082f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80082ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2204      	movs	r2, #4
 80082e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e8:	f043 0202 	orr.w	r2, r3, #2
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7fe fd63 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	f040 80a4 	bne.w	8008460 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800832c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	461a      	mov	r2, r3
 8008336:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800833a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800833e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008342:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800834c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e2      	bne.n	8008318 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800837a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800837c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e1      	bne.n	8008352 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a5f      	ldr	r2, [pc, #380]	; (8008524 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d021      	beq.n	80083f0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d01a      	beq.n	80083f0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80083de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e4      	bne.n	80083ba <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d130      	bne.n	800845a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	f023 0310 	bic.w	r3, r3, #16
 8008412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008420:	647b      	str	r3, [r7, #68]	; 0x44
 8008422:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e4      	bne.n	80083fe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f003 0310 	and.w	r3, r3, #16
 800843e:	2b10      	cmp	r3, #16
 8008440:	d103      	bne.n	800844a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2210      	movs	r2, #16
 8008448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7fe fcc2 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
 8008458:	e002      	b.n	8008460 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7f9 f874 	bl	8001548 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008460:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008464:	2b00      	cmp	r3, #0
 8008466:	d006      	beq.n	8008476 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008468:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	f47f aecb 	bne.w	800820c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800847c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008480:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008484:	2b00      	cmp	r3, #0
 8008486:	d049      	beq.n	800851c <UART_RxISR_16BIT_FIFOEN+0x358>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800848e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008492:	429a      	cmp	r2, r3
 8008494:	d242      	bcs.n	800851c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	623b      	str	r3, [r7, #32]
   return(result);
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80084ba:	633a      	str	r2, [r7, #48]	; 0x30
 80084bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e3      	bne.n	8008496 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a15      	ldr	r2, [pc, #84]	; (8008528 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80084d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f043 0320 	orr.w	r3, r3, #32
 80084e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084f6:	61fb      	str	r3, [r7, #28]
 80084f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	69b9      	ldr	r1, [r7, #24]
 80084fc:	69fa      	ldr	r2, [r7, #28]
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	617b      	str	r3, [r7, #20]
   return(result);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e4      	bne.n	80084d4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800850a:	e007      	b.n	800851c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0208 	orr.w	r2, r2, #8
 800851a:	619a      	str	r2, [r3, #24]
}
 800851c:	bf00      	nop
 800851e:	37b8      	adds	r7, #184	; 0xb8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	40008000 	.word	0x40008000
 8008528:	08007cad 	.word	0x08007cad

0800852c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008576:	2b01      	cmp	r3, #1
 8008578:	d101      	bne.n	800857e <HAL_UARTEx_DisableFifoMode+0x16>
 800857a:	2302      	movs	r3, #2
 800857c:	e027      	b.n	80085ce <HAL_UARTEx_DisableFifoMode+0x66>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2224      	movs	r2, #36	; 0x24
 800858a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0201 	bic.w	r2, r2, #1
 80085a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80085ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d101      	bne.n	80085f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085ee:	2302      	movs	r3, #2
 80085f0:	e02d      	b.n	800864e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2224      	movs	r2, #36	; 0x24
 80085fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f022 0201 	bic.w	r2, r2, #1
 8008618:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f850 	bl	80086d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800866a:	2302      	movs	r3, #2
 800866c:	e02d      	b.n	80086ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2224      	movs	r2, #36	; 0x24
 800867a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0201 	bic.w	r2, r2, #1
 8008694:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f812 	bl	80086d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d108      	bne.n	80086f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086f4:	e031      	b.n	800875a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086f6:	2308      	movs	r3, #8
 80086f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086fa:	2308      	movs	r3, #8
 80086fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	0e5b      	lsrs	r3, r3, #25
 8008706:	b2db      	uxtb	r3, r3
 8008708:	f003 0307 	and.w	r3, r3, #7
 800870c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	0f5b      	lsrs	r3, r3, #29
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	7b3a      	ldrb	r2, [r7, #12]
 8008722:	4911      	ldr	r1, [pc, #68]	; (8008768 <UARTEx_SetNbDataToProcess+0x94>)
 8008724:	5c8a      	ldrb	r2, [r1, r2]
 8008726:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800872a:	7b3a      	ldrb	r2, [r7, #12]
 800872c:	490f      	ldr	r1, [pc, #60]	; (800876c <UARTEx_SetNbDataToProcess+0x98>)
 800872e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008730:	fb93 f3f2 	sdiv	r3, r3, r2
 8008734:	b29a      	uxth	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	7b7a      	ldrb	r2, [r7, #13]
 8008740:	4909      	ldr	r1, [pc, #36]	; (8008768 <UARTEx_SetNbDataToProcess+0x94>)
 8008742:	5c8a      	ldrb	r2, [r1, r2]
 8008744:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008748:	7b7a      	ldrb	r2, [r7, #13]
 800874a:	4908      	ldr	r1, [pc, #32]	; (800876c <UARTEx_SetNbDataToProcess+0x98>)
 800874c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800874e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	0800887c 	.word	0x0800887c
 800876c:	08008884 	.word	0x08008884

08008770 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	edd3 7a07 	vldr	s15, [r3, #28]
 8008786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	edd3 7a08 	vldr	s15, [r3, #32]
 8008790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	edd3 7a06 	vldr	s15, [r3, #24]
 80087a0:	eeb1 7a67 	vneg.f32	s14, s15
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80087aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80087ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a1a      	ldr	r2, [r3, #32]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d006      	beq.n	80087d4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	330c      	adds	r3, #12
 80087ca:	220c      	movs	r2, #12
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 f804 	bl	80087dc <memset>
  }

}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <memset>:
 80087dc:	4402      	add	r2, r0
 80087de:	4603      	mov	r3, r0
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d100      	bne.n	80087e6 <memset+0xa>
 80087e4:	4770      	bx	lr
 80087e6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ea:	e7f9      	b.n	80087e0 <memset+0x4>

080087ec <__libc_init_array>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	4d0d      	ldr	r5, [pc, #52]	; (8008824 <__libc_init_array+0x38>)
 80087f0:	4c0d      	ldr	r4, [pc, #52]	; (8008828 <__libc_init_array+0x3c>)
 80087f2:	1b64      	subs	r4, r4, r5
 80087f4:	10a4      	asrs	r4, r4, #2
 80087f6:	2600      	movs	r6, #0
 80087f8:	42a6      	cmp	r6, r4
 80087fa:	d109      	bne.n	8008810 <__libc_init_array+0x24>
 80087fc:	4d0b      	ldr	r5, [pc, #44]	; (800882c <__libc_init_array+0x40>)
 80087fe:	4c0c      	ldr	r4, [pc, #48]	; (8008830 <__libc_init_array+0x44>)
 8008800:	f000 f818 	bl	8008834 <_init>
 8008804:	1b64      	subs	r4, r4, r5
 8008806:	10a4      	asrs	r4, r4, #2
 8008808:	2600      	movs	r6, #0
 800880a:	42a6      	cmp	r6, r4
 800880c:	d105      	bne.n	800881a <__libc_init_array+0x2e>
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	f855 3b04 	ldr.w	r3, [r5], #4
 8008814:	4798      	blx	r3
 8008816:	3601      	adds	r6, #1
 8008818:	e7ee      	b.n	80087f8 <__libc_init_array+0xc>
 800881a:	f855 3b04 	ldr.w	r3, [r5], #4
 800881e:	4798      	blx	r3
 8008820:	3601      	adds	r6, #1
 8008822:	e7f2      	b.n	800880a <__libc_init_array+0x1e>
 8008824:	08008894 	.word	0x08008894
 8008828:	08008894 	.word	0x08008894
 800882c:	08008894 	.word	0x08008894
 8008830:	08008898 	.word	0x08008898

08008834 <_init>:
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	bf00      	nop
 8008838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883a:	bc08      	pop	{r3}
 800883c:	469e      	mov	lr, r3
 800883e:	4770      	bx	lr

08008840 <_fini>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	bf00      	nop
 8008844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008846:	bc08      	pop	{r3}
 8008848:	469e      	mov	lr, r3
 800884a:	4770      	bx	lr
