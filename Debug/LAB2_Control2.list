
LAB2_Control2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d0  080083d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083d8  080083d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080083e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000000c  080083ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080083ec  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017363  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a3a  00000000  00000000  000373e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00039e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100b  00000000  00000000  0003b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174a3  00000000  00000000  00063ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea76  00000000  00000000  0007b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a54  00000000  00000000  00189c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018f65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008378 	.word	0x08008378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008378 	.word	0x08008378

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f000 fd33 	bl	800175e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f86a 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f000 fa18 	bl	8001130 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d00:	f000 f9ec 	bl	80010dc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d04:	f000 f928 	bl	8000f58 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d08:	f000 f8ae 	bl	8000e68 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d0c:	f000 f96e 	bl	8000fec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d10:	217f      	movs	r1, #127	; 0x7f
 8000d12:	4826      	ldr	r0, [pc, #152]	; (8000dac <main+0xbc>)
 8000d14:	f002 f8a2 	bl	8002e5c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000d18:	2228      	movs	r2, #40	; 0x28
 8000d1a:	4925      	ldr	r1, [pc, #148]	; (8000db0 <main+0xc0>)
 8000d1c:	4823      	ldr	r0, [pc, #140]	; (8000dac <main+0xbc>)
 8000d1e:	f001 f98f 	bl	8002040 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8000d22:	2204      	movs	r2, #4
 8000d24:	4923      	ldr	r1, [pc, #140]	; (8000db4 <main+0xc4>)
 8000d26:	4824      	ldr	r0, [pc, #144]	; (8000db8 <main+0xc8>)
 8000d28:	f005 faac 	bl	8006284 <HAL_UART_Receive_IT>
//  UARTDMAConfig();
  HAL_TIM_Base_Start(&htim3);
 8000d2c:	4823      	ldr	r0, [pc, #140]	; (8000dbc <main+0xcc>)
 8000d2e:	f004 f887 	bl	8004e40 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d32:	2100      	movs	r1, #0
 8000d34:	4821      	ldr	r0, [pc, #132]	; (8000dbc <main+0xcc>)
 8000d36:	f004 f955 	bl	8004fe4 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f002 ffb9 	bl	8003cb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <main+0xd0>)
 8000d4c:	f002 ffb4 	bl	8003cb8 <HAL_GPIO_WritePin>
//	  else{
//		  a++;
//	  }
//	  last_angle1 = ADC1_Channel.data;
	  static uint32_t TimeStamp = 0;
	  if( HAL_GetTick()>=TimeStamp){
 8000d50:	f000 fd6a 	bl	8001828 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <main+0xd4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3f8      	bcc.n	8000d50 <main+0x60>
		  TimeStamp = HAL_GetTick()+100;
 8000d5e:	f000 fd63 	bl	8001828 <HAL_GetTick>
 8000d62:	4603      	mov	r3, r0
 8000d64:	3364      	adds	r3, #100	; 0x64
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <main+0xd4>)
 8000d68:	6013      	str	r3, [r2, #0]
//		  ADC_Read_blocking();
		  angle = Average_ADC();
 8000d6a:	f000 fa65 	bl	8001238 <Average_ADC>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <main+0xd8>)
 8000d74:	801a      	strh	r2, [r3, #0]

		  TxBuffer[0] = 69; // header
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <main+0xdc>)
 8000d78:	2245      	movs	r2, #69	; 0x45
 8000d7a:	701a      	strb	r2, [r3, #0]
		  TxBuffer[1] = angle & 0xff;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <main+0xd8>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <main+0xdc>)
 8000d84:	705a      	strb	r2, [r3, #1]
		  TxBuffer[2] = (angle & 0xff00) >> 8;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <main+0xd8>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	0a1b      	lsrs	r3, r3, #8
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <main+0xdc>)
 8000d92:	709a      	strb	r2, [r3, #2]
		  TxBuffer[3] = 10; // \n
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <main+0xdc>)
 8000d96:	220a      	movs	r2, #10
 8000d98:	70da      	strb	r2, [r3, #3]

		  HAL_UART_Transmit(&hlpuart1,TxBuffer, 4, 10);
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	490b      	ldr	r1, [pc, #44]	; (8000dcc <main+0xdc>)
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <main+0xc8>)
 8000da2:	f005 f9e1 	bl	8006168 <HAL_UART_Transmit>

		  setMotor();
 8000da6:	f000 fa9f 	bl	80012e8 <setMotor>
  {
 8000daa:	e7d1      	b.n	8000d50 <main+0x60>
 8000dac:	20000028 	.word	0x20000028
 8000db0:	200001d4 	.word	0x200001d4
 8000db4:	20000228 	.word	0x20000228
 8000db8:	200000f4 	.word	0x200000f4
 8000dbc:	20000188 	.word	0x20000188
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	2000023c 	.word	0x2000023c
 8000dc8:	20000224 	.word	0x20000224
 8000dcc:	20000230 	.word	0x20000230

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b094      	sub	sp, #80	; 0x50
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	2238      	movs	r2, #56	; 0x38
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f007 fa9e 	bl	8008320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f002 ff9c 	bl	8003d30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e02:	2340      	movs	r3, #64	; 0x40
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e06:	2302      	movs	r3, #2
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e12:	2355      	movs	r3, #85	; 0x55
 8000e14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 f836 	bl	8003e98 <HAL_RCC_OscConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e32:	f000 fab1 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e36:	230f      	movs	r3, #15
 8000e38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fb34 	bl	80044bc <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e5a:	f000 fa9d 	bl	8001398 <Error_Handler>
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3750      	adds	r7, #80	; 0x50
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f007 fa4d 	bl	8008320 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e86:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000e88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e8e:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000e90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef0:	4817      	ldr	r0, [pc, #92]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000ef2:	f000 fee9 	bl	8001cc8 <HAL_ADC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000efc:	f000 fa4c 	bl	8001398 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000f0c:	f002 f808 	bl	8002f20 <HAL_ADCEx_MultiModeConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f16:	f000 fa3f 	bl	8001398 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_ADC1_Init+0xec>)
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f26:	237f      	movs	r3, #127	; 0x7f
 8000f28:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_ADC1_Init+0xe8>)
 8000f38:	f001 f974 	bl	8002224 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f42:	f000 fa29 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3730      	adds	r7, #48	; 0x30
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000028 	.word	0x20000028
 8000f54:	04300002 	.word	0x04300002

08000f58 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <MX_LPUART1_UART_Init+0x90>)
 8000f60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f9a:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000f9c:	f005 f894 	bl	80060c8 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f000 f9f7 	bl	8001398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000fae:	f007 f8ec 	bl	800818a <HAL_UARTEx_SetTxFifoThreshold>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000fb8:	f000 f9ee 	bl	8001398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000fc0:	f007 f921 	bl	8008206 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000fca:	f000 f9e5 	bl	8001398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_LPUART1_UART_Init+0x8c>)
 8000fd0:	f007 f8a2 	bl	8008118 <HAL_UARTEx_DisableFifoMode>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000fda:	f000 f9dd 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000f4 	.word	0x200000f4
 8000fe8:	40008000 	.word	0x40008000

08000fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]
 800101c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <MX_TIM3_Init+0xe8>)
 8001020:	4a2d      	ldr	r2, [pc, #180]	; (80010d8 <MX_TIM3_Init+0xec>)
 8001022:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <MX_TIM3_Init+0xe8>)
 8001026:	22a9      	movs	r2, #169	; 0xa9
 8001028:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_TIM3_Init+0xe8>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_TIM3_Init+0xe8>)
 8001032:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001036:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <MX_TIM3_Init+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_TIM3_Init+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001044:	4823      	ldr	r0, [pc, #140]	; (80010d4 <MX_TIM3_Init+0xe8>)
 8001046:	f003 fea3 	bl	8004d90 <HAL_TIM_Base_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001050:	f000 f9a2 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105e:	4619      	mov	r1, r3
 8001060:	481c      	ldr	r0, [pc, #112]	; (80010d4 <MX_TIM3_Init+0xe8>)
 8001062:	f004 f9e5 	bl	8005430 <HAL_TIM_ConfigClockSource>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800106c:	f000 f994 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <MX_TIM3_Init+0xe8>)
 8001072:	f003 ff55 	bl	8004f20 <HAL_TIM_PWM_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800107c:	f000 f98c 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_TIM3_Init+0xe8>)
 8001090:	f004 ff84 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800109a:	f000 f97d 	bl	8001398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109e:	2360      	movs	r3, #96	; 0x60
 80010a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <MX_TIM3_Init+0xe8>)
 80010b6:	f004 f8a7 	bl	8005208 <HAL_TIM_PWM_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80010c0:	f000 f96a 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <MX_TIM3_Init+0xe8>)
 80010c6:	f000 fa93 	bl	80015f0 <HAL_TIM_MspPostInit>

}
 80010ca:	bf00      	nop
 80010cc:	3738      	adds	r7, #56	; 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000188 	.word	0x20000188
 80010d8:	40000400 	.word	0x40000400

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_DMA_Init+0x50>)
 80010e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <MX_DMA_Init+0x50>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6493      	str	r3, [r2, #72]	; 0x48
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_DMA_Init+0x50>)
 80010f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_DMA_Init+0x50>)
 80010fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <MX_DMA_Init+0x50>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6493      	str	r3, [r2, #72]	; 0x48
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_DMA_Init+0x50>)
 8001108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	200b      	movs	r0, #11
 8001118:	f002 f8e5 	bl	80032e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800111c:	200b      	movs	r0, #11
 800111e:	f002 f8fc 	bl	800331a <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b39      	ldr	r3, [pc, #228]	; (800122c <MX_GPIO_Init+0xfc>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a38      	ldr	r2, [pc, #224]	; (800122c <MX_GPIO_Init+0xfc>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <MX_GPIO_Init+0xfc>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <MX_GPIO_Init+0xfc>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <MX_GPIO_Init+0xfc>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <MX_GPIO_Init+0xfc>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_GPIO_Init+0xfc>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a2c      	ldr	r2, [pc, #176]	; (800122c <MX_GPIO_Init+0xfc>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_GPIO_Init+0xfc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <MX_GPIO_Init+0xfc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a26      	ldr	r2, [pc, #152]	; (800122c <MX_GPIO_Init+0xfc>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <MX_GPIO_Init+0xfc>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	21a0      	movs	r1, #160	; 0xa0
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f002 fd83 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <MX_GPIO_Init+0x100>)
 80011b8:	f002 fd7e 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4818      	ldr	r0, [pc, #96]	; (8001234 <MX_GPIO_Init+0x104>)
 80011d4:	f002 fbee 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 80011d8:	23a0      	movs	r3, #160	; 0xa0
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f002 fbdf 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <MX_GPIO_Init+0x100>)
 800120e:	f002 fbd1 	bl	80039b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2028      	movs	r0, #40	; 0x28
 8001218:	f002 f865 	bl	80032e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121c:	2028      	movs	r0, #40	; 0x28
 800121e:	f002 f87c 	bl	800331a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	48000400 	.word	0x48000400
 8001234:	48000800 	.word	0x48000800

08001238 <Average_ADC>:

/* USER CODE BEGIN 4 */
uint16_t Average_ADC()
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
	uint16_t average = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i<40; i++){
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	e00a      	b.n	8001262 <Average_ADC+0x2a>
		sum+=ADC_RawRead[i];
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <Average_ADC+0x4c>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<40; i++){
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b27      	cmp	r3, #39	; 0x27
 8001266:	ddf1      	ble.n	800124c <Average_ADC+0x14>
	}
	average = sum/40;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <Average_ADC+0x50>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	095b      	lsrs	r3, r3, #5
 8001272:	80fb      	strh	r3, [r7, #6]
	return average;
 8001274:	88fb      	ldrh	r3, [r7, #6]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	200001d4 	.word	0x200001d4
 8001288:	cccccccd 	.word	0xcccccccd

0800128c <HAL_UART_RxCpltCallback>:
	//start UART in Interrupt Mode
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	//interupt
	if(huart == &hlpuart1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_UART_RxCpltCallback+0x50>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d11b      	bne.n	80012d4 <HAL_UART_RxCpltCallback+0x48>
	{
		if(RxBuffer[0] == 70){ // PWM
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b46      	cmp	r3, #70	; 0x46
 80012a2:	d112      	bne.n	80012ca <HAL_UART_RxCpltCallback+0x3e>
			if(RxBuffer[2] == 1)
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012a6:	789b      	ldrb	r3, [r3, #2]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <HAL_UART_RxCpltCallback+0x2c>
				PWM = RxBuffer[1];
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012ae:	785b      	ldrb	r3, [r3, #1]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_UART_RxCpltCallback+0x58>)
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e008      	b.n	80012ca <HAL_UART_RxCpltCallback+0x3e>

			else if(RxBuffer[2] == 2){
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d104      	bne.n	80012ca <HAL_UART_RxCpltCallback+0x3e>
				PWM = -RxBuffer[1];
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012c2:	785b      	ldrb	r3, [r3, #1]
 80012c4:	425b      	negs	r3, r3
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_UART_RxCpltCallback+0x58>)
 80012c8:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 80012ca:	2204      	movs	r2, #4
 80012cc:	4904      	ldr	r1, [pc, #16]	; (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <HAL_UART_RxCpltCallback+0x50>)
 80012d0:	f004 ffd8 	bl	8006284 <HAL_UART_Receive_IT>
	}
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200000f4 	.word	0x200000f4
 80012e0:	20000228 	.word	0x20000228
 80012e4:	20000238 	.word	0x20000238

080012e8 <setMotor>:

void setMotor()
{
 80012e8:	b598      	push	{r3, r4, r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	if(PWM > 0){
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <setMotor+0x9c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dd23      	ble.n	800133c <setMotor+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f002 fcdc 	bl	8003cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	4820      	ldr	r0, [pc, #128]	; (8001388 <setMotor+0xa0>)
 8001306:	f002 fcd7 	bl	8003cb8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*19999/100.0);
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <setMotor+0x9c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8d0 	bl	80004bc <__aeabi_i2d>
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <setMotor+0xa4>)
 8001322:	f7ff fa5f 	bl	80007e4 <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4919      	ldr	r1, [pc, #100]	; (8001390 <setMotor+0xa8>)
 800132c:	680c      	ldr	r4, [r1, #0]
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fb3f 	bl	80009b4 <__aeabi_d2uiz>
 8001336:	4603      	mov	r3, r0
 8001338:	6363      	str	r3, [r4, #52]	; 0x34
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*(-19999)/100.0);
	}
}
 800133a:	e021      	b.n	8001380 <setMotor+0x98>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <setMotor+0xa0>)
 8001342:	f002 fcb9 	bl	8003cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134e:	f002 fcb3 	bl	8003cb8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*(-19999)/100.0);
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <setMotor+0x9c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <setMotor+0xac>)
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8ad 	bl	80004bc <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <setMotor+0xa4>)
 8001368:	f7ff fa3c 	bl	80007e4 <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <setMotor+0xa8>)
 8001372:	680c      	ldr	r4, [r1, #0]
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb1c 	bl	80009b4 <__aeabi_d2uiz>
 800137c:	4603      	mov	r3, r0
 800137e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001380:	bf00      	nop
 8001382:	bd98      	pop	{r3, r4, r7, pc}
 8001384:	20000238 	.word	0x20000238
 8001388:	48000400 	.word	0x48000400
 800138c:	40590000 	.word	0x40590000
 8001390:	20000188 	.word	0x20000188
 8001394:	ffffb1e1 	.word	0xffffb1e1

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>
	...

080013a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_MspInit+0x44>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_MspInit+0x44>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6613      	str	r3, [r2, #96]	; 0x60
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x44>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x44>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6593      	str	r3, [r2, #88]	; 0x58
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013da:	f002 fd4d 	bl	8003e78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09e      	sub	sp, #120	; 0x78
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2254      	movs	r2, #84	; 0x54
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f006 ff87 	bl	8008320 <memset>
  if(hadc->Instance==ADC1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141a:	d15f      	bne.n	80014dc <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800141c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001420:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001422:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001426:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fa61 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001438:	f7ff ffae 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <HAL_ADC_MspInit+0xf8>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <HAL_ADC_MspInit+0xf8>)
 8001442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_ADC_MspInit+0xf8>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_ADC_MspInit+0xf8>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <HAL_ADC_MspInit+0xf8>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_ADC_MspInit+0xf8>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800146c:	2301      	movs	r3, #1
 800146e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001470:	2303      	movs	r3, #3
 8001472:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f002 fa97 	bl	80039b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_ADC_MspInit+0x100>)
 800148a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 800148e:	2205      	movs	r2, #5
 8001490:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 80014a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 80014b6:	2220      	movs	r2, #32
 80014b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 80014c2:	f001 ff45 	bl	8003350 <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80014cc:	f7ff ff64 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_ADC_MspInit+0xfc>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3778      	adds	r7, #120	; 0x78
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	20000094 	.word	0x20000094
 80014ec:	40020008 	.word	0x40020008

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b09e      	sub	sp, #120	; 0x78
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	2254      	movs	r2, #84	; 0x54
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f006 ff05 	bl	8008320 <memset>
  if(huart->Instance==LPUART1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <HAL_UART_MspInit+0xb8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d13e      	bne.n	800159e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001520:	2320      	movs	r3, #32
 8001522:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4618      	mov	r0, r3
 800152e:	f003 f9e1 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001538:	f7ff ff2e 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_UART_MspInit+0xbc>)
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <HAL_UART_MspInit+0xbc>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_UART_MspInit+0xbc>)
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_UART_MspInit+0xbc>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_UART_MspInit+0xbc>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_UART_MspInit+0xbc>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800156c:	230c      	movs	r3, #12
 800156e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800157c:	230c      	movs	r3, #12
 800157e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f002 fa13 	bl	80039b4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	205b      	movs	r0, #91	; 0x5b
 8001594:	f001 fea7 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001598:	205b      	movs	r0, #91	; 0x5b
 800159a:	f001 febe 	bl	800331a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3778      	adds	r7, #120	; 0x78
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40008000 	.word	0x40008000
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_TIM_Base_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40000400 	.word	0x40000400
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_TIM_MspPostInit+0x64>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d11c      	bne.n	800164c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_TIM_MspPostInit+0x68>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_TIM_MspPostInit+0x68>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_TIM_MspPostInit+0x68>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800162a:	2340      	movs	r3, #64	; 0x40
 800162c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800163a:	2302      	movs	r3, #2
 800163c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f002 f9b4 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40000400 	.word	0x40000400
 8001658:	40021000 	.word	0x40021000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 f8ac 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <DMA1_Channel1_IRQHandler+0x10>)
 80016b6:	f002 f82e 	bl	8003716 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000094 	.word	0x20000094

080016c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016cc:	f002 fb0c 	bl	8003ce8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <LPUART1_IRQHandler+0x10>)
 80016da:	f004 fe1f 	bl	800631c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200000f4 	.word	0x200000f4

080016e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800170e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001710:	f7ff ffea 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <LoopForever+0x6>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	; (800174c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <LoopForever+0xe>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	; (8001758 <LoopForever+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f006 fdf9 	bl	8008330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f7ff fad7 	bl	8000cf0 <main>

08001742 <LoopForever>:

LoopForever:
    b LoopForever
 8001742:	e7fe      	b.n	8001742 <LoopForever>
  ldr   r0, =_estack
 8001744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001750:	080083e0 	.word	0x080083e0
  ldr r2, =_sbss
 8001754:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001758:	20000244 	.word	0x20000244

0800175c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_2_IRQHandler>

0800175e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f001 fdb1 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f80e 	bl	8001790 <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	e001      	b.n	8001784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001780:	f7ff fe10 	bl	80013a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001784:	79fb      	ldrb	r3, [r7, #7]

}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_InitTick+0x68>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d022      	beq.n	80017ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_InitTick+0x6c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_InitTick+0x68>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fdbc 	bl	8003336 <HAL_SYSTICK_Config>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10f      	bne.n	80017e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	d809      	bhi.n	80017de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ca:	2200      	movs	r2, #0
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	f04f 30ff 	mov.w	r0, #4294967295
 80017d2:	f001 fd88 	bl	80032e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_InitTick+0x70>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e007      	b.n	80017ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e004      	b.n	80017ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e001      	b.n	80017ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_IncTick+0x1c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_IncTick+0x20>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4413      	add	r3, r2
 8001812:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_IncTick+0x1c>)
 8001814:	6013      	str	r3, [r2, #0]
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000240 	.word	0x20000240
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000240 	.word	0x20000240

08001840 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	609a      	str	r2, [r3, #8]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3360      	adds	r3, #96	; 0x60
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <LL_ADC_SetOffset+0x44>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	4313      	orrs	r3, r2
 80018d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	03fff000 	.word	0x03fff000

080018f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3360      	adds	r3, #96	; 0x60
 80018fe:	461a      	mov	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3360      	adds	r3, #96	; 0x60
 800192c:	461a      	mov	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001952:	b480      	push	{r7}
 8001954:	b087      	sub	sp, #28
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3360      	adds	r3, #96	; 0x60
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3360      	adds	r3, #96	; 0x60
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	615a      	str	r2, [r3, #20]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3330      	adds	r3, #48	; 0x30
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	4413      	add	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	211f      	movs	r1, #31
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	f003 011f 	and.w	r1, r3, #31
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b087      	sub	sp, #28
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3314      	adds	r3, #20
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	0e5b      	lsrs	r3, r3, #25
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	4413      	add	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	0d1b      	lsrs	r3, r3, #20
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2107      	movs	r1, #7
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	0d1b      	lsrs	r3, r3, #20
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0318 	and.w	r3, r3, #24
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001adc:	40d9      	lsrs	r1, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	0007ffff 	.word	0x0007ffff

08001b00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6093      	str	r3, [r2, #8]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ba4:	d101      	bne.n	8001baa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf4:	f043 0202 	orr.w	r2, r3, #2
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <LL_ADC_IsEnabled+0x18>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_ADC_IsEnabled+0x1a>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_IsDisableOngoing+0x18>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_IsDisableOngoing+0x1a>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c68:	f043 0204 	orr.w	r2, r3, #4
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d101      	bne.n	8001c94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d101      	bne.n	8001cba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1a9      	b.n	8002036 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fb7b 	bl	80013ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff19 	bl	8001b40 <LL_ADC_IsDeepPowerDownEnabled>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff feff 	bl	8001b1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff34 	bl	8001b90 <LL_ADC_IsInternalRegulatorEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d115      	bne.n	8001d5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff18 	bl	8001b68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d38:	4b9c      	ldr	r3, [pc, #624]	; (8001fac <HAL_ADC_Init+0x2e4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	4a9c      	ldr	r2, [pc, #624]	; (8001fb0 <HAL_ADC_Init+0x2e8>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d4c:	e002      	b.n	8001d54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f9      	bne.n	8001d4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff16 	bl	8001b90 <LL_ADC_IsInternalRegulatorEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff76 	bl	8001c7c <LL_ADC_REG_IsConversionOngoing>
 8001d90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 8142 	bne.w	8002024 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 813e 	bne.w	8002024 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001db0:	f043 0202 	orr.w	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff23 	bl	8001c08 <LL_ADC_IsEnabled>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d141      	bne.n	8001e4c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dd0:	d004      	beq.n	8001ddc <HAL_ADC_Init+0x114>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_ADC_Init+0x2ec>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d10f      	bne.n	8001dfc <HAL_ADC_Init+0x134>
 8001ddc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001de0:	f7ff ff12 	bl	8001c08 <LL_ADC_IsEnabled>
 8001de4:	4604      	mov	r4, r0
 8001de6:	4873      	ldr	r0, [pc, #460]	; (8001fb4 <HAL_ADC_Init+0x2ec>)
 8001de8:	f7ff ff0e 	bl	8001c08 <LL_ADC_IsEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4323      	orrs	r3, r4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e012      	b.n	8001e22 <HAL_ADC_Init+0x15a>
 8001dfc:	486e      	ldr	r0, [pc, #440]	; (8001fb8 <HAL_ADC_Init+0x2f0>)
 8001dfe:	f7ff ff03 	bl	8001c08 <LL_ADC_IsEnabled>
 8001e02:	4604      	mov	r4, r0
 8001e04:	486d      	ldr	r0, [pc, #436]	; (8001fbc <HAL_ADC_Init+0x2f4>)
 8001e06:	f7ff feff 	bl	8001c08 <LL_ADC_IsEnabled>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	431c      	orrs	r4, r3
 8001e0e:	486c      	ldr	r0, [pc, #432]	; (8001fc0 <HAL_ADC_Init+0x2f8>)
 8001e10:	f7ff fefa 	bl	8001c08 <LL_ADC_IsEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4323      	orrs	r3, r4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2e:	d004      	beq.n	8001e3a <HAL_ADC_Init+0x172>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a5f      	ldr	r2, [pc, #380]	; (8001fb4 <HAL_ADC_Init+0x2ec>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Init+0x176>
 8001e3a:	4a62      	ldr	r2, [pc, #392]	; (8001fc4 <HAL_ADC_Init+0x2fc>)
 8001e3c:	e000      	b.n	8001e40 <HAL_ADC_Init+0x178>
 8001e3e:	4a62      	ldr	r2, [pc, #392]	; (8001fc8 <HAL_ADC_Init+0x300>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4619      	mov	r1, r3
 8001e46:	4610      	mov	r0, r2
 8001e48:	f7ff fcfa 	bl	8001840 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7f5b      	ldrb	r3, [r3, #29]
 8001e50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d106      	bne.n	8001e88 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	045b      	lsls	r3, r3, #17
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <HAL_ADC_Init+0x304>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fee5 	bl	8001ca2 <LL_ADC_INJ_IsConversionOngoing>
 8001ed8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d17f      	bne.n	8001fe0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d17c      	bne.n	8001fe0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ef2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f02:	f023 0302 	bic.w	r3, r3, #2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	69b9      	ldr	r1, [r7, #24]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d017      	beq.n	8001f48 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6911      	ldr	r1, [r2, #16]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f46:	e013      	b.n	8001f70 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f6c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d12a      	bne.n	8001fd0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f90:	4311      	orrs	r1, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	e019      	b.n	8001fe0 <HAL_ADC_Init+0x318>
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	053e2d63 	.word	0x053e2d63
 8001fb4:	50000100 	.word	0x50000100
 8001fb8:	50000400 	.word	0x50000400
 8001fbc:	50000500 	.word	0x50000500
 8001fc0:	50000600 	.word	0x50000600
 8001fc4:	50000300 	.word	0x50000300
 8001fc8:	50000700 	.word	0x50000700
 8001fcc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d10c      	bne.n	8002002 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f023 010f 	bic.w	r1, r3, #15
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	1e5a      	subs	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8002000:	e007      	b.n	8002012 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 020f 	bic.w	r2, r2, #15
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	f023 0303 	bic.w	r3, r3, #3
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	65da      	str	r2, [r3, #92]	; 0x5c
 8002022:	e007      	b.n	8002034 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	f043 0210 	orr.w	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002034:	7ffb      	ldrb	r3, [r7, #31]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	bf00      	nop

08002040 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002054:	d004      	beq.n	8002060 <HAL_ADC_Start_DMA+0x20>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5a      	ldr	r2, [pc, #360]	; (80021c4 <HAL_ADC_Start_DMA+0x184>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_ADC_Start_DMA+0x24>
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_ADC_Start_DMA+0x188>)
 8002062:	e000      	b.n	8002066 <HAL_ADC_Start_DMA+0x26>
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_ADC_Start_DMA+0x18c>)
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fd4a 	bl	8001b00 <LL_ADC_GetMultimode>
 800206c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe02 	bl	8001c7c <LL_ADC_REG_IsConversionOngoing>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 809b 	bne.w	80021b6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_Start_DMA+0x4e>
 800208a:	2302      	movs	r3, #2
 800208c:	e096      	b.n	80021bc <HAL_ADC_Start_DMA+0x17c>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_ADC_Start_DMA+0x190>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d008      	beq.n	80020b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d002      	beq.n	80020b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b09      	cmp	r3, #9
 80020b0:	d17a      	bne.n	80021a8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fcf6 	bl	8002aa4 <ADC_Enable>
 80020b8:	4603      	mov	r3, r0
 80020ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d16d      	bne.n	800219e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3a      	ldr	r2, [pc, #232]	; (80021c4 <HAL_ADC_Start_DMA+0x184>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_ADC_Start_DMA+0xb4>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_ADC_Start_DMA+0x194>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d002      	beq.n	80020f0 <HAL_ADC_Start_DMA+0xb0>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	e003      	b.n	80020f8 <HAL_ADC_Start_DMA+0xb8>
 80020f0:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_ADC_Start_DMA+0x198>)
 80020f2:	e001      	b.n	80020f8 <HAL_ADC_Start_DMA+0xb8>
 80020f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d002      	beq.n	8002106 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002122:	f023 0206 	bic.w	r2, r3, #6
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	661a      	str	r2, [r3, #96]	; 0x60
 800212a:	e002      	b.n	8002132 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_ADC_Start_DMA+0x19c>)
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <HAL_ADC_Start_DMA+0x1a0>)
 8002140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002146:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <HAL_ADC_Start_DMA+0x1a4>)
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	221c      	movs	r2, #28
 8002150:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0210 	orr.w	r2, r2, #16
 8002168:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3340      	adds	r3, #64	; 0x40
 8002184:	4619      	mov	r1, r3
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f001 f989 	bl	80034a0 <HAL_DMA_Start_IT>
 800218e:	4603      	mov	r3, r0
 8002190:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fd5c 	bl	8001c54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800219c:	e00d      	b.n	80021ba <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80021a6:	e008      	b.n	80021ba <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80021b4:	e001      	b.n	80021ba <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	50000100 	.word	0x50000100
 80021c8:	50000300 	.word	0x50000300
 80021cc:	50000700 	.word	0x50000700
 80021d0:	50000600 	.word	0x50000600
 80021d4:	50000500 	.word	0x50000500
 80021d8:	50000400 	.word	0x50000400
 80021dc:	08002c8f 	.word	0x08002c8f
 80021e0:	08002d67 	.word	0x08002d67
 80021e4:	08002d83 	.word	0x08002d83

080021e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0b6      	sub	sp, #216	; 0xd8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x24>
 8002242:	2302      	movs	r3, #2
 8002244:	f000 bc13 	b.w	8002a6e <HAL_ADC_ConfigChannel+0x84a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fd11 	bl	8001c7c <LL_ADC_REG_IsConversionOngoing>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	f040 83f3 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	f7ff fbcb 	bl	8001a0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fcff 	bl	8001c7c <LL_ADC_REG_IsConversionOngoing>
 800227e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fd0b 	bl	8001ca2 <LL_ADC_INJ_IsConversionOngoing>
 800228c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002290:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 81d9 	bne.w	800264c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800229a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 81d4 	bne.w	800264c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022ac:	d10f      	bne.n	80022ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7ff fbd2 	bl	8001a62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fb79 	bl	80019be <LL_ADC_SetSamplingTimeCommonConfig>
 80022cc:	e00e      	b.n	80022ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	461a      	mov	r2, r3
 80022dc:	f7ff fbc1 	bl	8001a62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fb69 	bl	80019be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	08db      	lsrs	r3, r3, #3
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d022      	beq.n	8002354 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800231e:	f7ff fac3 	bl	80018a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	461a      	mov	r2, r3
 8002330:	f7ff fb0f 	bl	8001952 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002340:	2b01      	cmp	r3, #1
 8002342:	d102      	bne.n	800234a <HAL_ADC_ConfigChannel+0x126>
 8002344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002348:	e000      	b.n	800234c <HAL_ADC_ConfigChannel+0x128>
 800234a:	2300      	movs	r3, #0
 800234c:	461a      	mov	r2, r3
 800234e:	f7ff fb1b 	bl	8001988 <LL_ADC_SetOffsetSaturation>
 8002352:	e17b      	b.n	800264c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fac8 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x15c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fabd 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	0e9b      	lsrs	r3, r3, #26
 800237a:	f003 021f 	and.w	r2, r3, #31
 800237e:	e01e      	b.n	80023be <HAL_ADC_ConfigChannel+0x19a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fab2 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800239e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e004      	b.n	80023bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80023b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x1b2>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	e018      	b.n	8002408 <HAL_ADC_ConfigChannel+0x1e4>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e004      	b.n	8002408 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80023fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002408:	429a      	cmp	r2, r3
 800240a:	d106      	bne.n	800241a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fa81 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2101      	movs	r1, #1
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fa65 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x222>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fa5a 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	0e9b      	lsrs	r3, r3, #26
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	e01e      	b.n	8002484 <HAL_ADC_ConfigChannel+0x260>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fa4f 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800246c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002474:	2320      	movs	r3, #32
 8002476:	e004      	b.n	8002482 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_ADC_ConfigChannel+0x278>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	e018      	b.n	80024ce <HAL_ADC_ConfigChannel+0x2aa>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e004      	b.n	80024ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80024c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d106      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2101      	movs	r1, #1
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fa1e 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2102      	movs	r1, #2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fa02 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_ADC_ConfigChannel+0x2e8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2102      	movs	r1, #2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff f9f7 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	e01e      	b.n	800254a <HAL_ADC_ConfigChannel+0x326>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff f9ec 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800252a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800252e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800253a:	2320      	movs	r3, #32
 800253c:	e004      	b.n	8002548 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800253e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x33e>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	0e9b      	lsrs	r3, r3, #26
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	e016      	b.n	8002590 <HAL_ADC_ConfigChannel+0x36c>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800257a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002582:	2320      	movs	r3, #32
 8002584:	e004      	b.n	8002590 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	2102      	movs	r1, #2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f9bd 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2103      	movs	r1, #3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f9a1 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x3aa>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2103      	movs	r1, #3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff f996 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	e017      	b.n	80025fe <HAL_ADC_ConfigChannel+0x3da>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2103      	movs	r1, #3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff f98b 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x3f2>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	e011      	b.n	800263a <HAL_ADC_ConfigChannel+0x416>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002626:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e003      	b.n	800263a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	2103      	movs	r1, #3
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f968 	bl	800191c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fad9 	bl	8001c08 <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 813d 	bne.w	80028d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	461a      	mov	r2, r3
 800266c:	f7ff fa24 	bl	8001ab8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4aa2      	ldr	r2, [pc, #648]	; (8002900 <HAL_ADC_ConfigChannel+0x6dc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	f040 812e 	bne.w	80028d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10b      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x480>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	3301      	adds	r3, #1
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	2b09      	cmp	r3, #9
 800269a:	bf94      	ite	ls
 800269c:	2301      	movls	r3, #1
 800269e:	2300      	movhi	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e019      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x4b4>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e003      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80026c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2b09      	cmp	r3, #9
 80026d0:	bf94      	ite	ls
 80026d2:	2301      	movls	r3, #1
 80026d4:	2300      	movhi	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d079      	beq.n	80027d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x4d4>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0e9b      	lsrs	r3, r3, #26
 80026ee:	3301      	adds	r3, #1
 80026f0:	069b      	lsls	r3, r3, #26
 80026f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f6:	e015      	b.n	8002724 <HAL_ADC_ConfigChannel+0x500>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002708:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800270a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e003      	b.n	800271c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	069b      	lsls	r3, r3, #26
 8002720:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x520>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	3301      	adds	r3, #1
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2101      	movs	r1, #1
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	e017      	b.n	8002774 <HAL_ADC_ConfigChannel+0x550>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002754:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e003      	b.n	8002768 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	ea42 0103 	orr.w	r1, r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <HAL_ADC_ConfigChannel+0x576>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	3301      	adds	r3, #1
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	051b      	lsls	r3, r3, #20
 8002798:	e018      	b.n	80027cc <HAL_ADC_ConfigChannel+0x5a8>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e003      	b.n	80027be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027cc:	430b      	orrs	r3, r1
 80027ce:	e07e      	b.n	80028ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x5c8>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	3301      	adds	r3, #1
 80027e4:	069b      	lsls	r3, r3, #26
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ea:	e015      	b.n	8002818 <HAL_ADC_ConfigChannel+0x5f4>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e003      	b.n	8002810 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3301      	adds	r3, #1
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d109      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x614>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	3301      	adds	r3, #1
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2101      	movs	r1, #1
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	e017      	b.n	8002868 <HAL_ADC_ConfigChannel+0x644>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	61fb      	str	r3, [r7, #28]
  return result;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e003      	b.n	800285c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	ea42 0103 	orr.w	r1, r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x670>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	3301      	adds	r3, #1
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	3b1e      	subs	r3, #30
 800288c:	051b      	lsls	r3, r3, #20
 800288e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002892:	e01b      	b.n	80028cc <HAL_ADC_ConfigChannel+0x6a8>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	613b      	str	r3, [r7, #16]
  return result;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e003      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f003 021f 	and.w	r2, r3, #31
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	3b1e      	subs	r3, #30
 80028c6:	051b      	lsls	r3, r3, #20
 80028c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7ff f8c5 	bl	8001a62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_ADC_ConfigChannel+0x6e0>)
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80be 	beq.w	8002a62 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ee:	d004      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x6d6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_ADC_ConfigChannel+0x6e4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10a      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x6ec>
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <HAL_ADC_ConfigChannel+0x6e8>)
 80028fc:	e009      	b.n	8002912 <HAL_ADC_ConfigChannel+0x6ee>
 80028fe:	bf00      	nop
 8002900:	407f0000 	.word	0x407f0000
 8002904:	80080000 	.word	0x80080000
 8002908:	50000100 	.word	0x50000100
 800290c:	50000300 	.word	0x50000300
 8002910:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_ADC_ConfigChannel+0x854>)
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe ffba 	bl	800188c <LL_ADC_GetCommonPathInternalCh>
 8002918:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_ADC_ConfigChannel+0x858>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x70c>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <HAL_ADC_ConfigChannel+0x85c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d13a      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d134      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002944:	d005      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x72e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a4e      	ldr	r2, [pc, #312]	; (8002a84 <HAL_ADC_ConfigChannel+0x860>)
 800294c:	4293      	cmp	r3, r2
 800294e:	f040 8085 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800295a:	d004      	beq.n	8002966 <HAL_ADC_ConfigChannel+0x742>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a49      	ldr	r2, [pc, #292]	; (8002a88 <HAL_ADC_ConfigChannel+0x864>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x746>
 8002966:	4a49      	ldr	r2, [pc, #292]	; (8002a8c <HAL_ADC_ConfigChannel+0x868>)
 8002968:	e000      	b.n	800296c <HAL_ADC_ConfigChannel+0x748>
 800296a:	4a43      	ldr	r2, [pc, #268]	; (8002a78 <HAL_ADC_ConfigChannel+0x854>)
 800296c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f7fe ff75 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_ADC_ConfigChannel+0x86c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	4a44      	ldr	r2, [pc, #272]	; (8002a94 <HAL_ADC_ConfigChannel+0x870>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002996:	e002      	b.n	800299e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3b01      	subs	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a4:	e05a      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a3b      	ldr	r2, [pc, #236]	; (8002a98 <HAL_ADC_ConfigChannel+0x874>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d125      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11f      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <HAL_ADC_ConfigChannel+0x864>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d104      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x7ac>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <HAL_ADC_ConfigChannel+0x878>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d047      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d8:	d004      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x7c0>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_ADC_ConfigChannel+0x864>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x7c4>
 80029e4:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <HAL_ADC_ConfigChannel+0x868>)
 80029e6:	e000      	b.n	80029ea <HAL_ADC_ConfigChannel+0x7c6>
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <HAL_ADC_ConfigChannel+0x854>)
 80029ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f7fe ff36 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029fa:	e031      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <HAL_ADC_ConfigChannel+0x87c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d12d      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d127      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_ADC_ConfigChannel+0x864>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a24:	d004      	beq.n	8002a30 <HAL_ADC_ConfigChannel+0x80c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_ADC_ConfigChannel+0x864>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x810>
 8002a30:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_ADC_ConfigChannel+0x868>)
 8002a32:	e000      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x812>
 8002a34:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_ADC_ConfigChannel+0x854>)
 8002a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7fe ff10 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
 8002a46:	e00c      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a5a:	e002      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	37d8      	adds	r7, #216	; 0xd8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	50000700 	.word	0x50000700
 8002a7c:	c3210000 	.word	0xc3210000
 8002a80:	90c00010 	.word	0x90c00010
 8002a84:	50000600 	.word	0x50000600
 8002a88:	50000100 	.word	0x50000100
 8002a8c:	50000300 	.word	0x50000300
 8002a90:	20000000 	.word	0x20000000
 8002a94:	053e2d63 	.word	0x053e2d63
 8002a98:	c7520000 	.word	0xc7520000
 8002a9c:	50000500 	.word	0x50000500
 8002aa0:	cb840000 	.word	0xcb840000

08002aa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f8a7 	bl	8001c08 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d176      	bne.n	8002bae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <ADC_Enable+0x114>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00d      	beq.n	8002aea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	f043 0210 	orr.w	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e062      	b.n	8002bb0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f862 	bl	8001bb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afc:	d004      	beq.n	8002b08 <ADC_Enable+0x64>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2e      	ldr	r2, [pc, #184]	; (8002bbc <ADC_Enable+0x118>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d101      	bne.n	8002b0c <ADC_Enable+0x68>
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <ADC_Enable+0x11c>)
 8002b0a:	e000      	b.n	8002b0e <ADC_Enable+0x6a>
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <ADC_Enable+0x120>)
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe febc 	bl	800188c <LL_ADC_GetCommonPathInternalCh>
 8002b14:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <ADC_Enable+0x124>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	099b      	lsrs	r3, r3, #6
 8002b24:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <ADC_Enable+0x128>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b38:	e002      	b.n	8002b40 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f9      	bne.n	8002b3a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b46:	f7fe fe6f 	bl	8001828 <HAL_GetTick>
 8002b4a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b4c:	e028      	b.n	8002ba0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f858 	bl	8001c08 <LL_ADC_IsEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f828 	bl	8001bb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b68:	f7fe fe5e 	bl	8001828 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d914      	bls.n	8002ba0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d00d      	beq.n	8002ba0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f043 0210 	orr.w	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e007      	b.n	8002bb0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d1cf      	bne.n	8002b4e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	8000003f 	.word	0x8000003f
 8002bbc:	50000100 	.word	0x50000100
 8002bc0:	50000300 	.word	0x50000300
 8002bc4:	50000700 	.word	0x50000700
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	053e2d63 	.word	0x053e2d63

08002bd0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff f826 	bl	8001c2e <LL_ADC_IsDisableOngoing>
 8002be2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f80d 	bl	8001c08 <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d047      	beq.n	8002c84 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d144      	bne.n	8002c84 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030d 	and.w	r3, r3, #13
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10c      	bne.n	8002c22 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe ffe7 	bl	8001be0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2203      	movs	r2, #3
 8002c18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c1a:	f7fe fe05 	bl	8001828 <HAL_GetTick>
 8002c1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c20:	e029      	b.n	8002c76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e023      	b.n	8002c86 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c3e:	f7fe fdf3 	bl	8001828 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d914      	bls.n	8002c76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	f043 0210 	orr.w	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e007      	b.n	8002c86 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1dc      	bne.n	8002c3e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d14b      	bne.n	8002d40 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d021      	beq.n	8002d06 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fe8c 	bl	80019e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d032      	beq.n	8002d38 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d12b      	bne.n	8002d38 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d11f      	bne.n	8002d38 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d04:	e018      	b.n	8002d38 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d111      	bne.n	8002d38 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fa55 	bl	80021e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d3e:	e00e      	b.n	8002d5e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff fa5f 	bl	8002210 <HAL_ADC_ErrorCallback>
}
 8002d52:	e004      	b.n	8002d5e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fa41 	bl	80021fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da0:	f043 0204 	orr.w	r2, r3, #4
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fa31 	bl	8002210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <LL_ADC_IsEnabled>:
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <LL_ADC_IsEnabled+0x18>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <LL_ADC_IsEnabled+0x1a>
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_StartCalibration>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002dee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_IsCalibrationOnGoing>:
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e22:	d101      	bne.n	8002e28 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_ADCEx_Calibration_Start+0x1c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e04d      	b.n	8002f14 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff fea5 	bl	8002bd0 <ADC_Disable>
 8002e86:	4603      	mov	r3, r0
 8002e88:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d136      	bne.n	8002efe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e98:	f023 0302 	bic.w	r3, r3, #2
 8002e9c:	f043 0202 	orr.w	r2, r3, #2
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff96 	bl	8002ddc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002eb0:	e014      	b.n	8002edc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d90d      	bls.n	8002edc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	f023 0312 	bic.w	r3, r3, #18
 8002ec8:	f043 0210 	orr.w	r2, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01b      	b.n	8002f14 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff94 	bl	8002e0e <LL_ADC_IsCalibrationOnGoing>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e2      	bne.n	8002eb2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f023 0303 	bic.w	r3, r3, #3
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	; 0x5c
 8002efc:	e005      	b.n	8002f0a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	f043 0210 	orr.w	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	0004de01 	.word	0x0004de01

08002f20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b0a1      	sub	sp, #132	; 0x84
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0e7      	b.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f46:	2300      	movs	r3, #0
 8002f48:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f56:	d102      	bne.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f58:	4b6f      	ldr	r3, [pc, #444]	; (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	e009      	b.n	8002f72 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6e      	ldr	r2, [pc, #440]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d102      	bne.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002f68:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	e001      	b.n	8002f72 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0be      	b.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff4f 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8002f98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff49 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 80a0 	bne.w	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 809c 	bne.w	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fbc:	d004      	beq.n	8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a55      	ldr	r2, [pc, #340]	; (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002fc8:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002fca:	e000      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002fcc:	4b56      	ldr	r3, [pc, #344]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002fce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d04b      	beq.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fea:	035b      	lsls	r3, r3, #13
 8002fec:	430b      	orrs	r3, r1
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffc:	d004      	beq.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a45      	ldr	r2, [pc, #276]	; (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10f      	bne.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003008:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800300c:	f7ff fed3 	bl	8002db6 <LL_ADC_IsEnabled>
 8003010:	4604      	mov	r4, r0
 8003012:	4841      	ldr	r0, [pc, #260]	; (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003014:	f7ff fecf 	bl	8002db6 <LL_ADC_IsEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	4323      	orrs	r3, r4
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e012      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003028:	483c      	ldr	r0, [pc, #240]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800302a:	f7ff fec4 	bl	8002db6 <LL_ADC_IsEnabled>
 800302e:	4604      	mov	r4, r0
 8003030:	483b      	ldr	r0, [pc, #236]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003032:	f7ff fec0 	bl	8002db6 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	431c      	orrs	r4, r3
 800303a:	483c      	ldr	r0, [pc, #240]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800303c:	f7ff febb 	bl	8002db6 <LL_ADC_IsEnabled>
 8003040:	4603      	mov	r3, r0
 8003042:	4323      	orrs	r3, r4
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d056      	beq.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800305a:	f023 030f 	bic.w	r3, r3, #15
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	6811      	ldr	r1, [r2, #0]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	6892      	ldr	r2, [r2, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	431a      	orrs	r2, r3
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800306e:	e047      	b.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003084:	d004      	beq.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a23      	ldr	r2, [pc, #140]	; (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10f      	bne.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003090:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003094:	f7ff fe8f 	bl	8002db6 <LL_ADC_IsEnabled>
 8003098:	4604      	mov	r4, r0
 800309a:	481f      	ldr	r0, [pc, #124]	; (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800309c:	f7ff fe8b 	bl	8002db6 <LL_ADC_IsEnabled>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4323      	orrs	r3, r4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e012      	b.n	80030d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80030b0:	481a      	ldr	r0, [pc, #104]	; (800311c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030b2:	f7ff fe80 	bl	8002db6 <LL_ADC_IsEnabled>
 80030b6:	4604      	mov	r4, r0
 80030b8:	4819      	ldr	r0, [pc, #100]	; (8003120 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030ba:	f7ff fe7c 	bl	8002db6 <LL_ADC_IsEnabled>
 80030be:	4603      	mov	r3, r0
 80030c0:	431c      	orrs	r4, r3
 80030c2:	481a      	ldr	r0, [pc, #104]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80030c4:	f7ff fe77 	bl	8002db6 <LL_ADC_IsEnabled>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4323      	orrs	r3, r4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030e2:	f023 030f 	bic.w	r3, r3, #15
 80030e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030ea:	e009      	b.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030fe:	e000      	b.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003100:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800310a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800310e:	4618      	mov	r0, r3
 8003110:	3784      	adds	r7, #132	; 0x84
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	bf00      	nop
 8003118:	50000100 	.word	0x50000100
 800311c:	50000400 	.word	0x50000400
 8003120:	50000500 	.word	0x50000500
 8003124:	50000300 	.word	0x50000300
 8003128:	50000700 	.word	0x50000700
 800312c:	50000600 	.word	0x50000600

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7ff ff8e 	bl	80031d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff29 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032f4:	f7ff ff40 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	6978      	ldr	r0, [r7, #20]
 8003300:	f7ff ff90 	bl	8003224 <NVIC_EncodePriority>
 8003304:	4602      	mov	r2, r0
 8003306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff5f 	bl	80031d0 <__NVIC_SetPriority>
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff33 	bl	8003194 <__NVIC_EnableIRQ>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffa4 	bl	800328c <SysTick_Config>
 8003344:	4603      	mov	r3, r0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e08d      	b.n	800347e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_DMA_Init+0x138>)
 800336a:	429a      	cmp	r2, r3
 800336c:	d80f      	bhi.n	800338e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	4b45      	ldr	r3, [pc, #276]	; (800348c <HAL_DMA_Init+0x13c>)
 8003376:	4413      	add	r3, r2
 8003378:	4a45      	ldr	r2, [pc, #276]	; (8003490 <HAL_DMA_Init+0x140>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	009a      	lsls	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_DMA_Init+0x144>)
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
 800338c:	e00e      	b.n	80033ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	4b40      	ldr	r3, [pc, #256]	; (8003498 <HAL_DMA_Init+0x148>)
 8003396:	4413      	add	r3, r2
 8003398:	4a3d      	ldr	r2, [pc, #244]	; (8003490 <HAL_DMA_Init+0x140>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	009a      	lsls	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a3c      	ldr	r2, [pc, #240]	; (800349c <HAL_DMA_Init+0x14c>)
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa76 	bl	80038f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800340c:	d102      	bne.n	8003414 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003428:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d010      	beq.n	8003454 <HAL_DMA_Init+0x104>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b04      	cmp	r3, #4
 8003438:	d80c      	bhi.n	8003454 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa96 	bl	800396c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	e008      	b.n	8003466 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40020407 	.word	0x40020407
 800348c:	bffdfff8 	.word	0xbffdfff8
 8003490:	cccccccd 	.word	0xcccccccd
 8003494:	40020000 	.word	0x40020000
 8003498:	bffdfbf8 	.word	0xbffdfbf8
 800349c:	40020400 	.word	0x40020400

080034a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA_Start_IT+0x20>
 80034bc:	2302      	movs	r3, #2
 80034be:	e066      	b.n	800358e <HAL_DMA_Start_IT+0xee>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d155      	bne.n	8003580 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f9bb 	bl	8003874 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 020e 	orr.w	r2, r2, #14
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e00f      	b.n	8003538 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0204 	bic.w	r2, r2, #4
 8003526:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 020a 	orr.w	r2, r2, #10
 8003536:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003554:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800356c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e005      	b.n	800358c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003588:	2302      	movs	r3, #2
 800358a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d005      	beq.n	80035ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e037      	b.n	800362a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 020e 	bic.w	r2, r2, #14
 80035c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f003 021f 	and.w	r2, r3, #31
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003606:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00c      	beq.n	800362a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003628:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d00d      	beq.n	800367c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2204      	movs	r2, #4
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e047      	b.n	800370c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020e 	bic.w	r2, r2, #14
 800368a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
    }
  }
  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2204      	movs	r2, #4
 8003738:	409a      	lsls	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d026      	beq.n	8003790 <HAL_DMA_IRQHandler+0x7a>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d021      	beq.n	8003790 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d107      	bne.n	800376a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0204 	bic.w	r2, r2, #4
 8003768:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f003 021f 	and.w	r2, r3, #31
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2104      	movs	r1, #4
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	2b00      	cmp	r3, #0
 8003784:	d071      	beq.n	800386a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800378e:	e06c      	b.n	800386a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2202      	movs	r2, #2
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d02e      	beq.n	8003802 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d029      	beq.n	8003802 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020a 	bic.w	r2, r2, #10
 80037ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	2102      	movs	r1, #2
 80037e2:	fa01 f202 	lsl.w	r2, r1, r2
 80037e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d038      	beq.n	800386a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003800:	e033      	b.n	800386a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2208      	movs	r2, #8
 800380c:	409a      	lsls	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d02a      	beq.n	800386c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d025      	beq.n	800386c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020e 	bic.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800386a:	bf00      	nop
 800386c:	bf00      	nop
}
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800388a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800389c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f003 021f 	and.w	r2, r3, #31
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d108      	bne.n	80038d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038d2:	e007      	b.n	80038e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003900:	429a      	cmp	r2, r3
 8003902:	d802      	bhi.n	800390a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e001      	b.n	800390e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800390c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3b08      	subs	r3, #8
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	009a      	lsls	r2, r3, #2
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	461a      	mov	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800393a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	651a      	str	r2, [r3, #80]	; 0x50
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40020407 	.word	0x40020407
 800395c:	40020800 	.word	0x40020800
 8003960:	40020820 	.word	0x40020820
 8003964:	cccccccd 	.word	0xcccccccd
 8003968:	40020880 	.word	0x40020880

0800396c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	461a      	mov	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800398e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b01      	subs	r3, #1
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2201      	movs	r2, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	1000823f 	.word	0x1000823f
 80039b0:	40020940 	.word	0x40020940

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039c2:	e15a      	b.n	8003c7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 814c 	beq.w	8003c74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 0201 	and.w	r2, r3, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d017      	beq.n	8003a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d123      	bne.n	8003ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	6939      	ldr	r1, [r7, #16]
 8003ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0203 	and.w	r2, r3, #3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a6 	beq.w	8003c74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b28:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <HAL_GPIO_Init+0x2e4>)
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2c:	4a5a      	ldr	r2, [pc, #360]	; (8003c98 <HAL_GPIO_Init+0x2e4>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6613      	str	r3, [r2, #96]	; 0x60
 8003b34:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <HAL_GPIO_Init+0x2e4>)
 8003b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b40:	4a56      	ldr	r2, [pc, #344]	; (8003c9c <HAL_GPIO_Init+0x2e8>)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b6a:	d01f      	beq.n	8003bac <HAL_GPIO_Init+0x1f8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a4c      	ldr	r2, [pc, #304]	; (8003ca0 <HAL_GPIO_Init+0x2ec>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d019      	beq.n	8003ba8 <HAL_GPIO_Init+0x1f4>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a4b      	ldr	r2, [pc, #300]	; (8003ca4 <HAL_GPIO_Init+0x2f0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_GPIO_Init+0x1f0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <HAL_GPIO_Init+0x2f4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00d      	beq.n	8003ba0 <HAL_GPIO_Init+0x1ec>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a49      	ldr	r2, [pc, #292]	; (8003cac <HAL_GPIO_Init+0x2f8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <HAL_GPIO_Init+0x1e8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a48      	ldr	r2, [pc, #288]	; (8003cb0 <HAL_GPIO_Init+0x2fc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_GPIO_Init+0x1e4>
 8003b94:	2305      	movs	r3, #5
 8003b96:	e00a      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003b98:	2306      	movs	r3, #6
 8003b9a:	e008      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e006      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e004      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e002      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003bac:	2300      	movs	r3, #0
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	f002 0203 	and.w	r2, r2, #3
 8003bb4:	0092      	lsls	r2, r2, #2
 8003bb6:	4093      	lsls	r3, r2
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bbe:	4937      	ldr	r1, [pc, #220]	; (8003c9c <HAL_GPIO_Init+0x2e8>)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bcc:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bf0:	4a30      	ldr	r2, [pc, #192]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bf6:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c1a:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c6e:	4a11      	ldr	r2, [pc, #68]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3301      	adds	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f47f ae9d 	bne.w	80039c4 <HAL_GPIO_Init+0x10>
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	48000400 	.word	0x48000400
 8003ca4:	48000800 	.word	0x48000800
 8003ca8:	48000c00 	.word	0x48000c00
 8003cac:	48001000 	.word	0x48001000
 8003cb0:	48001400 	.word	0x48001400
 8003cb4:	40010400 	.word	0x40010400

08003cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc8:	787b      	ldrb	r3, [r7, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cce:	887a      	ldrh	r2, [r7, #2]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cf2:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d006      	beq.n	8003d0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cfe:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f806 	bl	8003d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40010400 	.word	0x40010400

08003d18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d141      	bne.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d131      	bne.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d4c:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d52:	4a46      	ldr	r2, [pc, #280]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d5c:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d64:	4a41      	ldr	r2, [pc, #260]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d6c:	4b40      	ldr	r3, [pc, #256]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2232      	movs	r2, #50	; 0x32
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	4a3f      	ldr	r2, [pc, #252]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	0c9b      	lsrs	r3, r3, #18
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d82:	e002      	b.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	4b38      	ldr	r3, [pc, #224]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d102      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f2      	bne.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9e:	4b33      	ldr	r3, [pc, #204]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d158      	bne.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e057      	b.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db0:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db6:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dc0:	e04d      	b.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	d141      	bne.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dca:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd6:	d131      	bne.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd8:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dde:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de8:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2232      	movs	r2, #50	; 0x32
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0e:	e002      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e22:	d102      	bne.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f2      	bne.n	8003e10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e36:	d112      	bne.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e011      	b.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e42:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e4c:	e007      	b.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e56:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	20000000 	.word	0x20000000
 8003e74:	431bde83 	.word	0x431bde83

08003e78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e86:	6093      	str	r3, [r2, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40007000 	.word	0x40007000

08003e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e2fe      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d075      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	4b97      	ldr	r3, [pc, #604]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec0:	4b94      	ldr	r3, [pc, #592]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3e>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_OscConfig+0x44>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	4b8d      	ldr	r3, [pc, #564]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d05b      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x108>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d157      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e2d9      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d106      	bne.n	8003f0c <HAL_RCC_OscConfig+0x74>
 8003efe:	4b85      	ldr	r3, [pc, #532]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a84      	ldr	r2, [pc, #528]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e01d      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x98>
 8003f16:	4b7f      	ldr	r3, [pc, #508]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a7e      	ldr	r2, [pc, #504]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b7c      	ldr	r3, [pc, #496]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7b      	ldr	r2, [pc, #492]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f30:	4b78      	ldr	r3, [pc, #480]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a77      	ldr	r2, [pc, #476]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b75      	ldr	r3, [pc, #468]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a74      	ldr	r2, [pc, #464]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd fc6a 	bl	8001828 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd fc66 	bl	8001828 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e29e      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0xc0>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fc56 	bl	8001828 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd fc52 	bl	8001828 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e28a      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f92:	4b60      	ldr	r3, [pc, #384]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0xe8>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d075      	beq.n	800409a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fae:	4b59      	ldr	r3, [pc, #356]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb8:	4b56      	ldr	r3, [pc, #344]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d102      	bne.n	8003fce <HAL_RCC_OscConfig+0x136>
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d002      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x13c>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11f      	bne.n	8004014 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd4:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_OscConfig+0x154>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e25d      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b49      	ldr	r3, [pc, #292]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4946      	ldr	r1, [pc, #280]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004000:	4b45      	ldr	r3, [pc, #276]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd fbc3 	bl	8001790 <HAL_InitTick>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d043      	beq.n	8004098 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e249      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d023      	beq.n	8004064 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401c:	4b3d      	ldr	r3, [pc, #244]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3c      	ldr	r2, [pc, #240]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fbfe 	bl	8001828 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004030:	f7fd fbfa 	bl	8001828 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e232      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b31      	ldr	r3, [pc, #196]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	492d      	ldr	r1, [pc, #180]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
 8004062:	e01a      	b.n	800409a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004064:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 800406a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd fbda 	bl	8001828 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004078:	f7fd fbd6 	bl	8001828 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e20e      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x1e0>
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d041      	beq.n	800412a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ae:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fd fbb3 	bl	8001828 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fd fbaf 	bl	8001828 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1e7      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0ef      	beq.n	80040c6 <HAL_RCC_OscConfig+0x22e>
 80040e6:	e020      	b.n	800412a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fd fb96 	bl	8001828 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040fe:	e00d      	b.n	800411c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fd fb92 	bl	8001828 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d906      	bls.n	800411c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e1ca      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800411c:	4b8c      	ldr	r3, [pc, #560]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800411e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1ea      	bne.n	8004100 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80a6 	beq.w	8004284 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004138:	2300      	movs	r3, #0
 800413a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800413c:	4b84      	ldr	r3, [pc, #528]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x2b4>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x2b6>
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	4a7e      	ldr	r2, [pc, #504]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415c:	6593      	str	r3, [r2, #88]	; 0x58
 800415e:	4b7c      	ldr	r3, [pc, #496]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416e:	4b79      	ldr	r3, [pc, #484]	; (8004354 <HAL_RCC_OscConfig+0x4bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417a:	4b76      	ldr	r3, [pc, #472]	; (8004354 <HAL_RCC_OscConfig+0x4bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a75      	ldr	r2, [pc, #468]	; (8004354 <HAL_RCC_OscConfig+0x4bc>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fd fb4f 	bl	8001828 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fd fb4b 	bl	8001828 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e183      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a0:	4b6c      	ldr	r3, [pc, #432]	; (8004354 <HAL_RCC_OscConfig+0x4bc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d108      	bne.n	80041c6 <HAL_RCC_OscConfig+0x32e>
 80041b4:	4b66      	ldr	r3, [pc, #408]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	4a65      	ldr	r2, [pc, #404]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c4:	e024      	b.n	8004210 <HAL_RCC_OscConfig+0x378>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d110      	bne.n	80041f0 <HAL_RCC_OscConfig+0x358>
 80041ce:	4b60      	ldr	r3, [pc, #384]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	4a5e      	ldr	r2, [pc, #376]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041d6:	f043 0304 	orr.w	r3, r3, #4
 80041da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041de:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	4a5a      	ldr	r2, [pc, #360]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ee:	e00f      	b.n	8004210 <HAL_RCC_OscConfig+0x378>
 80041f0:	4b57      	ldr	r3, [pc, #348]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	4a56      	ldr	r2, [pc, #344]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d016      	beq.n	8004246 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fd fb06 	bl	8001828 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421e:	e00a      	b.n	8004236 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004220:	f7fd fb02 	bl	8001828 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e138      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004236:	4b46      	ldr	r3, [pc, #280]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ed      	beq.n	8004220 <HAL_RCC_OscConfig+0x388>
 8004244:	e015      	b.n	8004272 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fd faef 	bl	8001828 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fd faeb 	bl	8001828 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e121      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004264:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ed      	bne.n	800424e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004272:	7ffb      	ldrb	r3, [r7, #31]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	4a34      	ldr	r2, [pc, #208]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800427e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004282:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03c      	beq.n	800430a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004298:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429e:	4a2c      	ldr	r2, [pc, #176]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fd fabe 	bl	8001828 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b0:	f7fd faba 	bl	8001828 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0f2      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ef      	beq.n	80042b0 <HAL_RCC_OscConfig+0x418>
 80042d0:	e01b      	b.n	800430a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042d2:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d8:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd faa1 	bl	8001828 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ea:	f7fd fa9d 	bl	8001828 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0d5      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1ef      	bne.n	80042ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80c9 	beq.w	80044a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b0c      	cmp	r3, #12
 800431e:	f000 8083 	beq.w	8004428 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d15e      	bne.n	80043e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a08      	ldr	r2, [pc, #32]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd fa77 	bl	8001828 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800433c:	e00c      	b.n	8004358 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433e:	f7fd fa73 	bl	8001828 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d905      	bls.n	8004358 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0ab      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
 8004350:	40021000 	.word	0x40021000
 8004354:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004358:	4b55      	ldr	r3, [pc, #340]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1ec      	bne.n	800433e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004364:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	4b52      	ldr	r3, [pc, #328]	; (80044b4 <HAL_RCC_OscConfig+0x61c>)
 800436a:	4013      	ands	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6a11      	ldr	r1, [r2, #32]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004374:	3a01      	subs	r2, #1
 8004376:	0112      	lsls	r2, r2, #4
 8004378:	4311      	orrs	r1, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800437e:	0212      	lsls	r2, r2, #8
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	3a01      	subs	r2, #1
 800438a:	0552      	lsls	r2, r2, #21
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004392:	0852      	lsrs	r2, r2, #1
 8004394:	3a01      	subs	r2, #1
 8004396:	0652      	lsls	r2, r2, #25
 8004398:	4311      	orrs	r1, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800439e:	06d2      	lsls	r2, r2, #27
 80043a0:	430a      	orrs	r2, r1
 80043a2:	4943      	ldr	r1, [pc, #268]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a8:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a40      	ldr	r2, [pc, #256]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b4:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a3d      	ldr	r2, [pc, #244]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd fa32 	bl	8001828 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd fa2e 	bl	8001828 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e066      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	4b35      	ldr	r3, [pc, #212]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x530>
 80043e6:	e05e      	b.n	80044a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e8:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a30      	ldr	r2, [pc, #192]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 80043ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fd fa18 	bl	8001828 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fd fa14 	bl	8001828 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e04c      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440e:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800441a:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4924      	ldr	r1, [pc, #144]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0x620>)
 8004422:	4013      	ands	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]
 8004426:	e03e      	b.n	80044a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e039      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004434:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <HAL_RCC_OscConfig+0x618>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0203 	and.w	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	429a      	cmp	r2, r3
 8004446:	d12c      	bne.n	80044a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	3b01      	subs	r3, #1
 8004454:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d123      	bne.n	80044a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d11b      	bne.n	80044a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d113      	bne.n	80044a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	3b01      	subs	r3, #1
 8004488:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d109      	bne.n	80044a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	3b01      	subs	r3, #1
 800449c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000
 80044b4:	019f800c 	.word	0x019f800c
 80044b8:	feeefffc 	.word	0xfeeefffc

080044bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e11e      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d4:	4b91      	ldr	r3, [pc, #580]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d910      	bls.n	8004504 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b8e      	ldr	r3, [pc, #568]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 020f 	bic.w	r2, r3, #15
 80044ea:	498c      	ldr	r1, [pc, #560]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b8a      	ldr	r3, [pc, #552]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e106      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d073      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d129      	bne.n	800456c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004518:	4b81      	ldr	r3, [pc, #516]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0f4      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004528:	f000 f99e 	bl	8004868 <RCC_GetSysClockFreqFromPLLSource>
 800452c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4a7c      	ldr	r2, [pc, #496]	; (8004724 <HAL_RCC_ClockConfig+0x268>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d93f      	bls.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004536:	4b7a      	ldr	r3, [pc, #488]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800454a:	2b00      	cmp	r3, #0
 800454c:	d033      	beq.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004552:	2b00      	cmp	r3, #0
 8004554:	d12f      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004556:	4b72      	ldr	r3, [pc, #456]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455e:	4a70      	ldr	r2, [pc, #448]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e024      	b.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d107      	bne.n	8004584 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0c6      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004584:	4b66      	ldr	r3, [pc, #408]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0be      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004594:	f000 f8ce 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8004598:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4a61      	ldr	r2, [pc, #388]	; (8004724 <HAL_RCC_ClockConfig+0x268>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d909      	bls.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045a2:	4b5f      	ldr	r3, [pc, #380]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045aa:	4a5d      	ldr	r2, [pc, #372]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045b6:	4b5a      	ldr	r3, [pc, #360]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 0203 	bic.w	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4957      	ldr	r1, [pc, #348]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fd f92e 	bl	8001828 <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	e00a      	b.n	80045e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d0:	f7fd f92a 	bl	8001828 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e095      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	4b4e      	ldr	r3, [pc, #312]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 020c 	and.w	r2, r3, #12
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d1eb      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d023      	beq.n	800464c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a42      	ldr	r2, [pc, #264]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800461a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004628:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004630:	4a3b      	ldr	r2, [pc, #236]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b39      	ldr	r3, [pc, #228]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4936      	ldr	r1, [pc, #216]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
 800464a:	e008      	b.n	800465e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d105      	bne.n	800465e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004652:	4b33      	ldr	r3, [pc, #204]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4a32      	ldr	r2, [pc, #200]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800465e:	4b2f      	ldr	r3, [pc, #188]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d21d      	bcs.n	80046a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 020f 	bic.w	r2, r3, #15
 8004674:	4929      	ldr	r1, [pc, #164]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800467c:	f7fd f8d4 	bl	8001828 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	e00a      	b.n	800469a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004684:	f7fd f8d0 	bl	8001828 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e03b      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b20      	ldr	r3, [pc, #128]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d1ed      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4917      	ldr	r1, [pc, #92]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	490f      	ldr	r1, [pc, #60]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046e6:	f000 f825 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	490c      	ldr	r1, [pc, #48]	; (8004728 <HAL_RCC_ClockConfig+0x26c>)
 80046f8:	5ccb      	ldrb	r3, [r1, r3]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HAL_RCC_ClockConfig+0x270>)
 8004704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <HAL_RCC_ClockConfig+0x274>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd f840 	bl	8001790 <HAL_InitTick>
 8004710:	4603      	mov	r3, r0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40022000 	.word	0x40022000
 8004720:	40021000 	.word	0x40021000
 8004724:	04c4b400 	.word	0x04c4b400
 8004728:	08008390 	.word	0x08008390
 800472c:	20000000 	.word	0x20000000
 8004730:	20000004 	.word	0x20000004

08004734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800473a:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d102      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004746:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e047      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800474c:	4b27      	ldr	r3, [pc, #156]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d102      	bne.n	800475e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	e03e      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800475e:	4b23      	ldr	r3, [pc, #140]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d136      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	3301      	adds	r3, #1
 8004780:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d10c      	bne.n	80047a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004788:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004792:	68d2      	ldr	r2, [r2, #12]
 8004794:	0a12      	lsrs	r2, r2, #8
 8004796:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	617b      	str	r3, [r7, #20]
      break;
 80047a0:	e00c      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047a2:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	0a12      	lsrs	r2, r2, #8
 80047b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
      break;
 80047ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	0e5b      	lsrs	r3, r3, #25
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	3301      	adds	r3, #1
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e001      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047dc:	693b      	ldr	r3, [r7, #16]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	016e3600 	.word	0x016e3600

080047f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCC_GetHCLKFreq+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000000 	.word	0x20000000

08004810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004814:	f7ff fff0 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	080083a0 	.word	0x080083a0

0800483c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004840:	f7ff ffda 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0adb      	lsrs	r3, r3, #11
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4904      	ldr	r1, [pc, #16]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000
 8004864:	080083a0 	.word	0x080083a0

08004868 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800486e:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004878:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d10c      	bne.n	80048a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800488c:	4a17      	ldr	r2, [pc, #92]	; (80048ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004896:	68d2      	ldr	r2, [r2, #12]
 8004898:	0a12      	lsrs	r2, r2, #8
 800489a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
    break;
 80048a4:	e00c      	b.n	80048c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	4a0e      	ldr	r2, [pc, #56]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	0a12      	lsrs	r2, r2, #8
 80048b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
    break;
 80048be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0e5b      	lsrs	r3, r3, #25
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048da:	687b      	ldr	r3, [r7, #4]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40021000 	.word	0x40021000
 80048ec:	016e3600 	.word	0x016e3600
 80048f0:	00f42400 	.word	0x00f42400

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048fc:	2300      	movs	r3, #0
 80048fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004900:	2300      	movs	r3, #0
 8004902:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8098 	beq.w	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004912:	2300      	movs	r3, #0
 8004914:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004916:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10d      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	4a3f      	ldr	r2, [pc, #252]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	6593      	str	r3, [r2, #88]	; 0x58
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493a:	2301      	movs	r3, #1
 800493c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800493e:	4b3a      	ldr	r3, [pc, #232]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a39      	ldr	r2, [pc, #228]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800494a:	f7fc ff6d 	bl	8001828 <HAL_GetTick>
 800494e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004950:	e009      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004952:	f7fc ff69 	bl	8001828 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d902      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	74fb      	strb	r3, [r7, #19]
        break;
 8004964:	e005      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004972:	7cfb      	ldrb	r3, [r7, #19]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d159      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004978:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01e      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	429a      	cmp	r2, r3
 8004992:	d019      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004994:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049a0:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049b0:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fc ff29 	bl	8001828 <HAL_GetTick>
 80049d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d8:	e00b      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049da:	f7fc ff25 	bl	8001828 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d902      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	74fb      	strb	r3, [r7, #19]
            break;
 80049f0:	e006      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ec      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10b      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	4903      	ldr	r1, [pc, #12]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a1c:	e008      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
 8004a20:	74bb      	strb	r3, [r7, #18]
 8004a22:	e005      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a30:	7c7b      	ldrb	r3, [r7, #17]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a36:	4ba7      	ldr	r3, [pc, #668]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	4aa6      	ldr	r2, [pc, #664]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a4e:	4ba1      	ldr	r3, [pc, #644]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a54:	f023 0203 	bic.w	r2, r3, #3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	499d      	ldr	r1, [pc, #628]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a70:	4b98      	ldr	r3, [pc, #608]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f023 020c 	bic.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4995      	ldr	r1, [pc, #596]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a92:	4b90      	ldr	r3, [pc, #576]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	498c      	ldr	r1, [pc, #560]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ab4:	4b87      	ldr	r3, [pc, #540]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	4984      	ldr	r1, [pc, #528]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ad6:	4b7f      	ldr	r3, [pc, #508]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	497b      	ldr	r1, [pc, #492]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004af8:	4b76      	ldr	r3, [pc, #472]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	4973      	ldr	r1, [pc, #460]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b1a:	4b6e      	ldr	r3, [pc, #440]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	496a      	ldr	r1, [pc, #424]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b3c:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	4962      	ldr	r1, [pc, #392]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b5e:	4b5d      	ldr	r3, [pc, #372]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	4959      	ldr	r1, [pc, #356]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b80:	4b54      	ldr	r3, [pc, #336]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b86:	f023 0203 	bic.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	4951      	ldr	r1, [pc, #324]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ba2:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	4948      	ldr	r1, [pc, #288]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bc4:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4940      	ldr	r1, [pc, #256]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be4:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a3a      	ldr	r2, [pc, #232]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d015      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bfc:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	4932      	ldr	r1, [pc, #200]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4a2c      	ldr	r2, [pc, #176]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d015      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	4924      	ldr	r1, [pc, #144]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c52:	d105      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c54:	4b1f      	ldr	r3, [pc, #124]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d015      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	4916      	ldr	r1, [pc, #88]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d019      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4908      	ldr	r1, [pc, #32]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc2:	d109      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a02      	ldr	r2, [pc, #8]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cce:	60d3      	str	r3, [r2, #12]
 8004cd0:	e002      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004cd2:	bf00      	nop
 8004cd4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ce4:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf2:	4926      	ldr	r1, [pc, #152]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d02:	d105      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d04:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a20      	ldr	r2, [pc, #128]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d015      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d1c:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2a:	4918      	ldr	r1, [pc, #96]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d3c:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d015      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d54:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	490a      	ldr	r1, [pc, #40]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d72:	d105      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000

08004d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e049      	b.n	8004e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc fbfa 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f000 fc44 	bl	800565c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d001      	beq.n	8004e58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e04c      	b.n	8004ef2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <HAL_TIM_Base_Start+0xc0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d022      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x70>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d01d      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x70>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <HAL_TIM_Base_Start+0xc4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x70>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <HAL_TIM_Base_Start+0xc8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x70>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <HAL_TIM_Base_Start+0xcc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x70>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_TIM_Base_Start+0xd0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x70>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <HAL_TIM_Base_Start+0xd4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x70>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <HAL_TIM_Base_Start+0xd8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d115      	bne.n	8004edc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <HAL_TIM_Base_Start+0xdc>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d015      	beq.n	8004eee <HAL_TIM_Base_Start+0xae>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec8:	d011      	beq.n	8004eee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0201 	orr.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eda:	e008      	b.n	8004eee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e000      	b.n	8004ef0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40013400 	.word	0x40013400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40015000 	.word	0x40015000
 8004f1c:	00010007 	.word	0x00010007

08004f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e049      	b.n	8004fc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f841 	bl	8004fce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 fb7c 	bl	800565c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_TIM_PWM_Start+0x24>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e03c      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d109      	bne.n	8005022 <HAL_TIM_PWM_Start+0x3e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	bf14      	ite	ne
 800501a:	2301      	movne	r3, #1
 800501c:	2300      	moveq	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e02f      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d109      	bne.n	800503c <HAL_TIM_PWM_Start+0x58>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e022      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d109      	bne.n	8005056 <HAL_TIM_PWM_Start+0x72>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e015      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b10      	cmp	r3, #16
 800505a:	d109      	bne.n	8005070 <HAL_TIM_PWM_Start+0x8c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e008      	b.n	8005082 <HAL_TIM_PWM_Start+0x9e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0a6      	b.n	80051d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_TIM_PWM_Start+0xb6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005098:	e023      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d104      	bne.n	80050aa <HAL_TIM_PWM_Start+0xc6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a8:	e01b      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_PWM_Start+0xd6>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b8:	e013      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d104      	bne.n	80050ca <HAL_TIM_PWM_Start+0xe6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c8:	e00b      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Start+0xf6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d8:	e003      	b.n	80050e2 <HAL_TIM_PWM_Start+0xfe>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2201      	movs	r2, #1
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 ff30 	bl	8005f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <HAL_TIM_PWM_Start+0x1fc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d018      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a39      	ldr	r2, [pc, #228]	; (80051e4 <HAL_TIM_PWM_Start+0x200>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d013      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <HAL_TIM_PWM_Start+0x204>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00e      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a36      	ldr	r2, [pc, #216]	; (80051ec <HAL_TIM_PWM_Start+0x208>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d009      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a34      	ldr	r2, [pc, #208]	; (80051f0 <HAL_TIM_PWM_Start+0x20c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d004      	beq.n	800512c <HAL_TIM_PWM_Start+0x148>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a33      	ldr	r2, [pc, #204]	; (80051f4 <HAL_TIM_PWM_Start+0x210>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d101      	bne.n	8005130 <HAL_TIM_PWM_Start+0x14c>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <HAL_TIM_PWM_Start+0x14e>
 8005130:	2300      	movs	r3, #0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <HAL_TIM_PWM_Start+0x1fc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d01d      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <HAL_TIM_PWM_Start+0x214>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a24      	ldr	r2, [pc, #144]	; (80051fc <HAL_TIM_PWM_Start+0x218>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_TIM_PWM_Start+0x21c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a19      	ldr	r2, [pc, #100]	; (80051e4 <HAL_TIM_PWM_Start+0x200>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <HAL_TIM_PWM_Start+0x204>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIM_PWM_Start+0x1b2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_PWM_Start+0x210>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d115      	bne.n	80051c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_TIM_PWM_Start+0x220>)
 800519e:	4013      	ands	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b06      	cmp	r3, #6
 80051a6:	d015      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x1f0>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ae:	d011      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	e008      	b.n	80051d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e000      	b.n	80051d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40013400 	.word	0x40013400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800
 80051f4:	40015000 	.word	0x40015000
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	00010007 	.word	0x00010007

08005208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005222:	2302      	movs	r3, #2
 8005224:	e0ff      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b14      	cmp	r3, #20
 8005232:	f200 80f0 	bhi.w	8005416 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005291 	.word	0x08005291
 8005240:	08005417 	.word	0x08005417
 8005244:	08005417 	.word	0x08005417
 8005248:	08005417 	.word	0x08005417
 800524c:	080052d1 	.word	0x080052d1
 8005250:	08005417 	.word	0x08005417
 8005254:	08005417 	.word	0x08005417
 8005258:	08005417 	.word	0x08005417
 800525c:	08005313 	.word	0x08005313
 8005260:	08005417 	.word	0x08005417
 8005264:	08005417 	.word	0x08005417
 8005268:	08005417 	.word	0x08005417
 800526c:	08005353 	.word	0x08005353
 8005270:	08005417 	.word	0x08005417
 8005274:	08005417 	.word	0x08005417
 8005278:	08005417 	.word	0x08005417
 800527c:	08005395 	.word	0x08005395
 8005280:	08005417 	.word	0x08005417
 8005284:	08005417 	.word	0x08005417
 8005288:	08005417 	.word	0x08005417
 800528c:	080053d5 	.word	0x080053d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fa94 	bl	80057c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6999      	ldr	r1, [r3, #24]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	619a      	str	r2, [r3, #24]
      break;
 80052ce:	e0a5      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb0e 	bl	80058f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	619a      	str	r2, [r3, #24]
      break;
 8005310:	e084      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fb81 	bl	8005a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0204 	bic.w	r2, r2, #4
 800533c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69d9      	ldr	r1, [r3, #28]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
      break;
 8005350:	e064      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fbf3 	bl	8005b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	021a      	lsls	r2, r3, #8
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	61da      	str	r2, [r3, #28]
      break;
 8005392:	e043      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc66 	bl	8005c6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80053d2:	e023      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fcb0 	bl	8005d40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005414:	e002      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
      break;
 800541a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop

08005430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_TIM_ConfigClockSource+0x1c>
 8005448:	2302      	movs	r3, #2
 800544a:	e0f6      	b.n	800563a <HAL_TIM_ConfigClockSource+0x20a>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800546a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800546e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a6f      	ldr	r2, [pc, #444]	; (8005644 <HAL_TIM_ConfigClockSource+0x214>)
 8005486:	4293      	cmp	r3, r2
 8005488:	f000 80c1 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x1de>
 800548c:	4a6d      	ldr	r2, [pc, #436]	; (8005644 <HAL_TIM_ConfigClockSource+0x214>)
 800548e:	4293      	cmp	r3, r2
 8005490:	f200 80c6 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005494:	4a6c      	ldr	r2, [pc, #432]	; (8005648 <HAL_TIM_ConfigClockSource+0x218>)
 8005496:	4293      	cmp	r3, r2
 8005498:	f000 80b9 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x1de>
 800549c:	4a6a      	ldr	r2, [pc, #424]	; (8005648 <HAL_TIM_ConfigClockSource+0x218>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f200 80be 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 80054a4:	4a69      	ldr	r2, [pc, #420]	; (800564c <HAL_TIM_ConfigClockSource+0x21c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	f000 80b1 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x1de>
 80054ac:	4a67      	ldr	r2, [pc, #412]	; (800564c <HAL_TIM_ConfigClockSource+0x21c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	f200 80b6 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 80054b4:	4a66      	ldr	r2, [pc, #408]	; (8005650 <HAL_TIM_ConfigClockSource+0x220>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	f000 80a9 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x1de>
 80054bc:	4a64      	ldr	r2, [pc, #400]	; (8005650 <HAL_TIM_ConfigClockSource+0x220>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	f200 80ae 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 80054c4:	4a63      	ldr	r2, [pc, #396]	; (8005654 <HAL_TIM_ConfigClockSource+0x224>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	f000 80a1 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x1de>
 80054cc:	4a61      	ldr	r2, [pc, #388]	; (8005654 <HAL_TIM_ConfigClockSource+0x224>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	f200 80a6 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 80054d4:	4a60      	ldr	r2, [pc, #384]	; (8005658 <HAL_TIM_ConfigClockSource+0x228>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	f000 8099 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x1de>
 80054dc:	4a5e      	ldr	r2, [pc, #376]	; (8005658 <HAL_TIM_ConfigClockSource+0x228>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	f200 809e 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 80054e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054e8:	f000 8091 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x1de>
 80054ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054f0:	f200 8096 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 80054f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f8:	f000 8089 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x1de>
 80054fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005500:	f200 808e 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005508:	d03e      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0x158>
 800550a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550e:	f200 8087 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	f000 8086 	beq.w	8005626 <HAL_TIM_ConfigClockSource+0x1f6>
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551e:	d87f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005520:	2b70      	cmp	r3, #112	; 0x70
 8005522:	d01a      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x12a>
 8005524:	2b70      	cmp	r3, #112	; 0x70
 8005526:	d87b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005528:	2b60      	cmp	r3, #96	; 0x60
 800552a:	d050      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x19e>
 800552c:	2b60      	cmp	r3, #96	; 0x60
 800552e:	d877      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005530:	2b50      	cmp	r3, #80	; 0x50
 8005532:	d03c      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x17e>
 8005534:	2b50      	cmp	r3, #80	; 0x50
 8005536:	d873      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d058      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x1be>
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d86f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005540:	2b30      	cmp	r3, #48	; 0x30
 8005542:	d064      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x1de>
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d86b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d060      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x1de>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d867      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05c      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x1de>
 8005554:	2b10      	cmp	r3, #16
 8005556:	d05a      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x1de>
 8005558:	e062      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800556a:	f000 fcd1 	bl	8005f10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800557c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	609a      	str	r2, [r3, #8]
      break;
 8005586:	e04f      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005598:	f000 fcba 	bl	8005f10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055aa:	609a      	str	r2, [r3, #8]
      break;
 80055ac:	e03c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 fc2c 	bl	8005e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2150      	movs	r1, #80	; 0x50
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fc85 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e02c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fc4b 	bl	8005e76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2160      	movs	r1, #96	; 0x60
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fc75 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e01c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 fc0c 	bl	8005e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2140      	movs	r1, #64	; 0x40
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fc65 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 800560c:	e00c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 fc5c 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 800561e:	e003      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
      break;
 8005624:	e000      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	00100070 	.word	0x00100070
 8005648:	00100060 	.word	0x00100060
 800564c:	00100050 	.word	0x00100050
 8005650:	00100040 	.word	0x00100040
 8005654:	00100030 	.word	0x00100030
 8005658:	00100020 	.word	0x00100020

0800565c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a4c      	ldr	r2, [pc, #304]	; (80057a0 <TIM_Base_SetConfig+0x144>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d017      	beq.n	80056a4 <TIM_Base_SetConfig+0x48>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567a:	d013      	beq.n	80056a4 <TIM_Base_SetConfig+0x48>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a49      	ldr	r2, [pc, #292]	; (80057a4 <TIM_Base_SetConfig+0x148>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0x48>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a48      	ldr	r2, [pc, #288]	; (80057a8 <TIM_Base_SetConfig+0x14c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0x48>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a47      	ldr	r2, [pc, #284]	; (80057ac <TIM_Base_SetConfig+0x150>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0x48>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a46      	ldr	r2, [pc, #280]	; (80057b0 <TIM_Base_SetConfig+0x154>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0x48>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a45      	ldr	r2, [pc, #276]	; (80057b4 <TIM_Base_SetConfig+0x158>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d108      	bne.n	80056b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a39      	ldr	r2, [pc, #228]	; (80057a0 <TIM_Base_SetConfig+0x144>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d023      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d01f      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a36      	ldr	r2, [pc, #216]	; (80057a4 <TIM_Base_SetConfig+0x148>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01b      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a35      	ldr	r2, [pc, #212]	; (80057a8 <TIM_Base_SetConfig+0x14c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d017      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a34      	ldr	r2, [pc, #208]	; (80057ac <TIM_Base_SetConfig+0x150>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a33      	ldr	r2, [pc, #204]	; (80057b0 <TIM_Base_SetConfig+0x154>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a33      	ldr	r2, [pc, #204]	; (80057b8 <TIM_Base_SetConfig+0x15c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a32      	ldr	r2, [pc, #200]	; (80057bc <TIM_Base_SetConfig+0x160>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a31      	ldr	r2, [pc, #196]	; (80057c0 <TIM_Base_SetConfig+0x164>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0xaa>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2c      	ldr	r2, [pc, #176]	; (80057b4 <TIM_Base_SetConfig+0x158>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <TIM_Base_SetConfig+0x144>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <TIM_Base_SetConfig+0x110>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <TIM_Base_SetConfig+0x154>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00f      	beq.n	800576c <TIM_Base_SetConfig+0x110>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <TIM_Base_SetConfig+0x15c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00b      	beq.n	800576c <TIM_Base_SetConfig+0x110>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a19      	ldr	r2, [pc, #100]	; (80057bc <TIM_Base_SetConfig+0x160>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d007      	beq.n	800576c <TIM_Base_SetConfig+0x110>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <TIM_Base_SetConfig+0x164>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_Base_SetConfig+0x110>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <TIM_Base_SetConfig+0x158>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d103      	bne.n	8005774 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d105      	bne.n	8005792 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	611a      	str	r2, [r3, #16]
  }
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40015000 	.word	0x40015000
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40014400 	.word	0x40014400
 80057c0:	40014800 	.word	0x40014800

080057c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	f023 0201 	bic.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 0302 	bic.w	r3, r3, #2
 8005810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <TIM_OC1_SetConfig+0x11c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <TIM_OC1_SetConfig+0x88>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2f      	ldr	r2, [pc, #188]	; (80058e4 <TIM_OC1_SetConfig+0x120>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00f      	beq.n	800584c <TIM_OC1_SetConfig+0x88>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a2e      	ldr	r2, [pc, #184]	; (80058e8 <TIM_OC1_SetConfig+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00b      	beq.n	800584c <TIM_OC1_SetConfig+0x88>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a2d      	ldr	r2, [pc, #180]	; (80058ec <TIM_OC1_SetConfig+0x128>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_OC1_SetConfig+0x88>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a2c      	ldr	r2, [pc, #176]	; (80058f0 <TIM_OC1_SetConfig+0x12c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_OC1_SetConfig+0x88>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <TIM_OC1_SetConfig+0x130>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10c      	bne.n	8005866 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0308 	bic.w	r3, r3, #8
 8005852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 0304 	bic.w	r3, r3, #4
 8005864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <TIM_OC1_SetConfig+0x11c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <TIM_OC1_SetConfig+0xd2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <TIM_OC1_SetConfig+0x120>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00f      	beq.n	8005896 <TIM_OC1_SetConfig+0xd2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1b      	ldr	r2, [pc, #108]	; (80058e8 <TIM_OC1_SetConfig+0x124>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00b      	beq.n	8005896 <TIM_OC1_SetConfig+0xd2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1a      	ldr	r2, [pc, #104]	; (80058ec <TIM_OC1_SetConfig+0x128>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <TIM_OC1_SetConfig+0xd2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <TIM_OC1_SetConfig+0x12c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_OC1_SetConfig+0xd2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <TIM_OC1_SetConfig+0x130>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d111      	bne.n	80058ba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40014400 	.word	0x40014400
 80058f0:	40014800 	.word	0x40014800
 80058f4:	40015000 	.word	0x40015000

080058f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f023 0210 	bic.w	r2, r3, #16
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 0320 	bic.w	r3, r3, #32
 8005946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a2c      	ldr	r2, [pc, #176]	; (8005a08 <TIM_OC2_SetConfig+0x110>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_OC2_SetConfig+0x74>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a2b      	ldr	r2, [pc, #172]	; (8005a0c <TIM_OC2_SetConfig+0x114>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC2_SetConfig+0x74>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a2a      	ldr	r2, [pc, #168]	; (8005a10 <TIM_OC2_SetConfig+0x118>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10d      	bne.n	8005988 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005986:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <TIM_OC2_SetConfig+0x110>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <TIM_OC2_SetConfig+0xc0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <TIM_OC2_SetConfig+0x114>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00f      	beq.n	80059b8 <TIM_OC2_SetConfig+0xc0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <TIM_OC2_SetConfig+0x11c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_OC2_SetConfig+0xc0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <TIM_OC2_SetConfig+0x120>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_OC2_SetConfig+0xc0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <TIM_OC2_SetConfig+0x124>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC2_SetConfig+0xc0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a17      	ldr	r2, [pc, #92]	; (8005a10 <TIM_OC2_SetConfig+0x118>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d113      	bne.n	80059e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40013400 	.word	0x40013400
 8005a10:	40015000 	.word	0x40015000
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800

08005a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0303 	bic.w	r3, r3, #3
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <TIM_OC3_SetConfig+0x10c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <TIM_OC3_SetConfig+0x72>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <TIM_OC3_SetConfig+0x110>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC3_SetConfig+0x72>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a29      	ldr	r2, [pc, #164]	; (8005b34 <TIM_OC3_SetConfig+0x114>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d10d      	bne.n	8005aae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <TIM_OC3_SetConfig+0x10c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <TIM_OC3_SetConfig+0xbe>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <TIM_OC3_SetConfig+0x110>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_OC3_SetConfig+0xbe>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <TIM_OC3_SetConfig+0x118>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_OC3_SetConfig+0xbe>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	; (8005b3c <TIM_OC3_SetConfig+0x11c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_OC3_SetConfig+0xbe>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <TIM_OC3_SetConfig+0x120>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_OC3_SetConfig+0xbe>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a16      	ldr	r2, [pc, #88]	; (8005b34 <TIM_OC3_SetConfig+0x114>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d113      	bne.n	8005b06 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	621a      	str	r2, [r3, #32]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40013400 	.word	0x40013400
 8005b34:	40015000 	.word	0x40015000
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800

08005b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	031b      	lsls	r3, r3, #12
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a2c      	ldr	r2, [pc, #176]	; (8005c54 <TIM_OC4_SetConfig+0x110>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_OC4_SetConfig+0x74>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a2b      	ldr	r2, [pc, #172]	; (8005c58 <TIM_OC4_SetConfig+0x114>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC4_SetConfig+0x74>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a2a      	ldr	r2, [pc, #168]	; (8005c5c <TIM_OC4_SetConfig+0x118>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10d      	bne.n	8005bd4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a1f      	ldr	r2, [pc, #124]	; (8005c54 <TIM_OC4_SetConfig+0x110>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <TIM_OC4_SetConfig+0xc0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <TIM_OC4_SetConfig+0x114>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00f      	beq.n	8005c04 <TIM_OC4_SetConfig+0xc0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1e      	ldr	r2, [pc, #120]	; (8005c60 <TIM_OC4_SetConfig+0x11c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_OC4_SetConfig+0xc0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <TIM_OC4_SetConfig+0x120>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_OC4_SetConfig+0xc0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a1c      	ldr	r2, [pc, #112]	; (8005c68 <TIM_OC4_SetConfig+0x124>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_OC4_SetConfig+0xc0>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <TIM_OC4_SetConfig+0x118>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d113      	bne.n	8005c2c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c12:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	019b      	lsls	r3, r3, #6
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	621a      	str	r2, [r3, #32]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40012c00 	.word	0x40012c00
 8005c58:	40013400 	.word	0x40013400
 8005c5c:	40015000 	.word	0x40015000
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800

08005c6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	041b      	lsls	r3, r3, #16
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a19      	ldr	r2, [pc, #100]	; (8005d28 <TIM_OC5_SetConfig+0xbc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <TIM_OC5_SetConfig+0x82>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <TIM_OC5_SetConfig+0xc0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_OC5_SetConfig+0x82>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <TIM_OC5_SetConfig+0xc4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_OC5_SetConfig+0x82>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <TIM_OC5_SetConfig+0xc8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_OC5_SetConfig+0x82>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <TIM_OC5_SetConfig+0xcc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_OC5_SetConfig+0x82>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a14      	ldr	r2, [pc, #80]	; (8005d3c <TIM_OC5_SetConfig+0xd0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d109      	bne.n	8005d02 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40013400 	.word	0x40013400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800
 8005d3c:	40015000 	.word	0x40015000

08005d40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	051b      	lsls	r3, r3, #20
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <TIM_OC6_SetConfig+0xc0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <TIM_OC6_SetConfig+0x84>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <TIM_OC6_SetConfig+0xc4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_OC6_SetConfig+0x84>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <TIM_OC6_SetConfig+0xc8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_OC6_SetConfig+0x84>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <TIM_OC6_SetConfig+0xcc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_OC6_SetConfig+0x84>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <TIM_OC6_SetConfig+0xd0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC6_SetConfig+0x84>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <TIM_OC6_SetConfig+0xd4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800
 8005e14:	40015000 	.word	0x40015000

08005e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f023 0201 	bic.w	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 030a 	bic.w	r3, r3, #10
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f023 0210 	bic.w	r2, r3, #16
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f043 0307 	orr.w	r3, r3, #7
 8005efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	609a      	str	r2, [r3, #8]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	021a      	lsls	r2, r3, #8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	609a      	str	r2, [r3, #8]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2201      	movs	r2, #1
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	401a      	ands	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a1a      	ldr	r2, [r3, #32]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	fa01 f303 	lsl.w	r3, r1, r3
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e074      	b.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a34      	ldr	r2, [pc, #208]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a33      	ldr	r2, [pc, #204]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a31      	ldr	r2, [pc, #196]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ff8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a21      	ldr	r2, [pc, #132]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d022      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d01d      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d018      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00e      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d009      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d004      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a11      	ldr	r2, [pc, #68]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10c      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4313      	orrs	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40013400 	.word	0x40013400
 80060b4:	40015000 	.word	0x40015000
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40014000 	.word	0x40014000

080060c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e042      	b.n	8006160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7fb f9ff 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2224      	movs	r2, #36	; 0x24
 80060f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 ff42 	bl	8006f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fc43 	bl	80069a4 <UART_SetConfig>
 800611e:	4603      	mov	r3, r0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e01b      	b.n	8006160 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 ffc1 	bl	80070e0 <UART_CheckIdleState>
 800615e:	4603      	mov	r3, r0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	4613      	mov	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	2b20      	cmp	r3, #32
 8006180:	d17b      	bne.n	800627a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_UART_Transmit+0x26>
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e074      	b.n	800627c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2221      	movs	r2, #33	; 0x21
 800619e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a2:	f7fb fb41 	bl	8001828 <HAL_GetTick>
 80061a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	88fa      	ldrh	r2, [r7, #6]
 80061ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c0:	d108      	bne.n	80061d4 <HAL_UART_Transmit+0x6c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	e003      	b.n	80061dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061dc:	e030      	b.n	8006240 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2180      	movs	r1, #128	; 0x80
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f001 f823 	bl	8007234 <UART_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e03d      	b.n	800627c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006214:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	3302      	adds	r3, #2
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	e007      	b.n	800622e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	3301      	adds	r3, #1
 800622c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1c8      	bne.n	80061de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2200      	movs	r2, #0
 8006254:	2140      	movs	r1, #64	; 0x40
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 ffec 	bl	8007234 <UART_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e006      	b.n	800627c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e000      	b.n	800627c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
  }
}
 800627c:	4618      	mov	r0, r3
 800627e:	3720      	adds	r7, #32
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006298:	2b20      	cmp	r3, #32
 800629a:	d137      	bne.n	800630c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_UART_Receive_IT+0x24>
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e030      	b.n	800630e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a18      	ldr	r2, [pc, #96]	; (8006318 <HAL_UART_Receive_IT+0x94>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01f      	beq.n	80062fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d018      	beq.n	80062fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	613b      	str	r3, [r7, #16]
   return(result);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	623b      	str	r3, [r7, #32]
 80062ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	69f9      	ldr	r1, [r7, #28]
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062fc:	88fb      	ldrh	r3, [r7, #6]
 80062fe:	461a      	mov	r2, r3
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f001 f804 	bl	8007310 <UART_Start_Receive_IT>
 8006308:	4603      	mov	r3, r0
 800630a:	e000      	b.n	800630e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800630c:	2302      	movs	r3, #2
  }
}
 800630e:	4618      	mov	r0, r3
 8006310:	3728      	adds	r7, #40	; 0x28
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40008000 	.word	0x40008000

0800631c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b0ba      	sub	sp, #232	; 0xe8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006346:	f640 030f 	movw	r3, #2063	; 0x80f
 800634a:	4013      	ands	r3, r2
 800634c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d11b      	bne.n	8006390 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d015      	beq.n	8006390 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d009      	beq.n	8006390 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 82e3 	beq.w	800694c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
      }
      return;
 800638e:	e2dd      	b.n	800694c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8123 	beq.w	80065e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800639a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800639e:	4b8d      	ldr	r3, [pc, #564]	; (80065d4 <HAL_UART_IRQHandler+0x2b8>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063aa:	4b8b      	ldr	r3, [pc, #556]	; (80065d8 <HAL_UART_IRQHandler+0x2bc>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8116 	beq.w	80065e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d011      	beq.n	80063e4 <HAL_UART_IRQHandler+0xc8>
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2201      	movs	r2, #1
 80063d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063da:	f043 0201 	orr.w	r2, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d011      	beq.n	8006414 <HAL_UART_IRQHandler+0xf8>
 80063f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2202      	movs	r2, #2
 8006402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640a:	f043 0204 	orr.w	r2, r3, #4
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d011      	beq.n	8006444 <HAL_UART_IRQHandler+0x128>
 8006420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2204      	movs	r2, #4
 8006432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	f043 0202 	orr.w	r2, r3, #2
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d017      	beq.n	8006480 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d105      	bne.n	8006468 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800645c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006460:	4b5c      	ldr	r3, [pc, #368]	; (80065d4 <HAL_UART_IRQHandler+0x2b8>)
 8006462:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2208      	movs	r2, #8
 800646e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	f043 0208 	orr.w	r2, r3, #8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006488:	2b00      	cmp	r3, #0
 800648a:	d012      	beq.n	80064b2 <HAL_UART_IRQHandler+0x196>
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00c      	beq.n	80064b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8249 	beq.w	8006950 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d013      	beq.n	80064f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d105      	bne.n	80064e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d005      	beq.n	8006516 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800650a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800650e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006512:	2b00      	cmp	r3, #0
 8006514:	d054      	beq.n	80065c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 f81c 	bl	8007554 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	d146      	bne.n	80065b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3308      	adds	r3, #8
 8006530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006556:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800655a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006562:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800656e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1d9      	bne.n	800652a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800657c:	2b00      	cmp	r3, #0
 800657e:	d017      	beq.n	80065b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006586:	4a15      	ldr	r2, [pc, #84]	; (80065dc <HAL_UART_IRQHandler+0x2c0>)
 8006588:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006590:	4618      	mov	r0, r3
 8006592:	f7fd f859 	bl	8003648 <HAL_DMA_Abort_IT>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d019      	beq.n	80065d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80065aa:	4610      	mov	r0, r2
 80065ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ae:	e00f      	b.n	80065d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f9e1 	bl	8006978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b6:	e00b      	b.n	80065d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f9dd 	bl	8006978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065be:	e007      	b.n	80065d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f9d9 	bl	8006978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80065ce:	e1bf      	b.n	8006950 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d0:	bf00      	nop
    return;
 80065d2:	e1bd      	b.n	8006950 <HAL_UART_IRQHandler+0x634>
 80065d4:	10000001 	.word	0x10000001
 80065d8:	04000120 	.word	0x04000120
 80065dc:	08007621 	.word	0x08007621

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	f040 8153 	bne.w	8006890 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 0310 	and.w	r3, r3, #16
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 814c 	beq.w	8006890 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8145 	beq.w	8006890 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2210      	movs	r2, #16
 800660c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	f040 80bb 	bne.w	8006794 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800662c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 818f 	beq.w	8006954 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800663c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006640:	429a      	cmp	r2, r3
 8006642:	f080 8187 	bcs.w	8006954 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800664c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	f040 8087 	bne.w	8006772 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800667c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800668e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006692:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800669a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1da      	bne.n	8006664 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3308      	adds	r3, #8
 80066ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e1      	bne.n	80066ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3308      	adds	r3, #8
 800670a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800670e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006710:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800671c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e3      	bne.n	80066ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800673e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006740:	f023 0310 	bic.w	r3, r3, #16
 8006744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006752:	65bb      	str	r3, [r7, #88]	; 0x58
 8006754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e4      	bne.n	8006730 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676c:	4618      	mov	r0, r3
 800676e:	f7fc ff12 	bl	8003596 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006784:	b29b      	uxth	r3, r3
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	b29b      	uxth	r3, r3
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8fd 	bl	800698c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006792:	e0df      	b.n	8006954 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80d1 	beq.w	8006958 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80067b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 80cc 	beq.w	8006958 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067e2:	647b      	str	r3, [r7, #68]	; 0x44
 80067e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e4      	bne.n	80067c0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	623b      	str	r3, [r7, #32]
   return(result);
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3308      	adds	r3, #8
 800681a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800681e:	633a      	str	r2, [r7, #48]	; 0x30
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e1      	bne.n	80067f6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	60fb      	str	r3, [r7, #12]
   return(result);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0310 	bic.w	r3, r3, #16
 800685a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	69b9      	ldr	r1, [r7, #24]
 800686e:	69fa      	ldr	r2, [r7, #28]
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	617b      	str	r3, [r7, #20]
   return(result);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e4      	bne.n	8006846 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006882:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f87f 	bl	800698c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800688e:	e063      	b.n	8006958 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00e      	beq.n	80068ba <HAL_UART_IRQHandler+0x59e>
 800689c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d008      	beq.n	80068ba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fc12 	bl	80080dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068b8:	e051      	b.n	800695e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d014      	beq.n	80068f0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d105      	bne.n	80068de <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d008      	beq.n	80068f0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d03a      	beq.n	800695c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
    }
    return;
 80068ee:	e035      	b.n	800695c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d009      	beq.n	8006910 <HAL_UART_IRQHandler+0x5f4>
 80068fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fe9f 	bl	800764c <UART_EndTransmit_IT>
    return;
 800690e:	e026      	b.n	800695e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d009      	beq.n	8006930 <HAL_UART_IRQHandler+0x614>
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fbeb 	bl	8008104 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800692e:	e016      	b.n	800695e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d010      	beq.n	800695e <HAL_UART_IRQHandler+0x642>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006940:	2b00      	cmp	r3, #0
 8006942:	da0c      	bge.n	800695e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fbd3 	bl	80080f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800694a:	e008      	b.n	800695e <HAL_UART_IRQHandler+0x642>
      return;
 800694c:	bf00      	nop
 800694e:	e006      	b.n	800695e <HAL_UART_IRQHandler+0x642>
    return;
 8006950:	bf00      	nop
 8006952:	e004      	b.n	800695e <HAL_UART_IRQHandler+0x642>
      return;
 8006954:	bf00      	nop
 8006956:	e002      	b.n	800695e <HAL_UART_IRQHandler+0x642>
      return;
 8006958:	bf00      	nop
 800695a:	e000      	b.n	800695e <HAL_UART_IRQHandler+0x642>
    return;
 800695c:	bf00      	nop
  }
}
 800695e:	37e8      	adds	r7, #232	; 0xe8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a8:	b08c      	sub	sp, #48	; 0x30
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	431a      	orrs	r2, r3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4baa      	ldr	r3, [pc, #680]	; (8006c7c <UART_SetConfig+0x2d8>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069dc:	430b      	orrs	r3, r1
 80069de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a9f      	ldr	r2, [pc, #636]	; (8006c80 <UART_SetConfig+0x2dc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	f023 010f 	bic.w	r1, r3, #15
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a90      	ldr	r2, [pc, #576]	; (8006c84 <UART_SetConfig+0x2e0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d125      	bne.n	8006a94 <UART_SetConfig+0xf0>
 8006a48:	4b8f      	ldr	r3, [pc, #572]	; (8006c88 <UART_SetConfig+0x2e4>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d81a      	bhi.n	8006a8c <UART_SetConfig+0xe8>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <UART_SetConfig+0xb8>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006a7d 	.word	0x08006a7d
 8006a64:	08006a75 	.word	0x08006a75
 8006a68:	08006a85 	.word	0x08006a85
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a72:	e116      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a7a:	e112      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a82:	e10e      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006a84:	2308      	movs	r3, #8
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a8a:	e10a      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a92:	e106      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a7c      	ldr	r2, [pc, #496]	; (8006c8c <UART_SetConfig+0x2e8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d138      	bne.n	8006b10 <UART_SetConfig+0x16c>
 8006a9e:	4b7a      	ldr	r3, [pc, #488]	; (8006c88 <UART_SetConfig+0x2e4>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa4:	f003 030c 	and.w	r3, r3, #12
 8006aa8:	2b0c      	cmp	r3, #12
 8006aaa:	d82d      	bhi.n	8006b08 <UART_SetConfig+0x164>
 8006aac:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <UART_SetConfig+0x110>)
 8006aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab2:	bf00      	nop
 8006ab4:	08006ae9 	.word	0x08006ae9
 8006ab8:	08006b09 	.word	0x08006b09
 8006abc:	08006b09 	.word	0x08006b09
 8006ac0:	08006b09 	.word	0x08006b09
 8006ac4:	08006af9 	.word	0x08006af9
 8006ac8:	08006b09 	.word	0x08006b09
 8006acc:	08006b09 	.word	0x08006b09
 8006ad0:	08006b09 	.word	0x08006b09
 8006ad4:	08006af1 	.word	0x08006af1
 8006ad8:	08006b09 	.word	0x08006b09
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	08006b09 	.word	0x08006b09
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aee:	e0d8      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006af0:	2302      	movs	r3, #2
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006af6:	e0d4      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006af8:	2304      	movs	r3, #4
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006afe:	e0d0      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b00:	2308      	movs	r3, #8
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b06:	e0cc      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b08:	2310      	movs	r3, #16
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0e:	e0c8      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a5e      	ldr	r2, [pc, #376]	; (8006c90 <UART_SetConfig+0x2ec>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d125      	bne.n	8006b66 <UART_SetConfig+0x1c2>
 8006b1a:	4b5b      	ldr	r3, [pc, #364]	; (8006c88 <UART_SetConfig+0x2e4>)
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b24:	2b30      	cmp	r3, #48	; 0x30
 8006b26:	d016      	beq.n	8006b56 <UART_SetConfig+0x1b2>
 8006b28:	2b30      	cmp	r3, #48	; 0x30
 8006b2a:	d818      	bhi.n	8006b5e <UART_SetConfig+0x1ba>
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d00a      	beq.n	8006b46 <UART_SetConfig+0x1a2>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d814      	bhi.n	8006b5e <UART_SetConfig+0x1ba>
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <UART_SetConfig+0x19a>
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d008      	beq.n	8006b4e <UART_SetConfig+0x1aa>
 8006b3c:	e00f      	b.n	8006b5e <UART_SetConfig+0x1ba>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b44:	e0ad      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b46:	2302      	movs	r3, #2
 8006b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b4c:	e0a9      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b4e:	2304      	movs	r3, #4
 8006b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b54:	e0a5      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b56:	2308      	movs	r3, #8
 8006b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5c:	e0a1      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b5e:	2310      	movs	r3, #16
 8006b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b64:	e09d      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a4a      	ldr	r2, [pc, #296]	; (8006c94 <UART_SetConfig+0x2f0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d125      	bne.n	8006bbc <UART_SetConfig+0x218>
 8006b70:	4b45      	ldr	r3, [pc, #276]	; (8006c88 <UART_SetConfig+0x2e4>)
 8006b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b7c:	d016      	beq.n	8006bac <UART_SetConfig+0x208>
 8006b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b80:	d818      	bhi.n	8006bb4 <UART_SetConfig+0x210>
 8006b82:	2b80      	cmp	r3, #128	; 0x80
 8006b84:	d00a      	beq.n	8006b9c <UART_SetConfig+0x1f8>
 8006b86:	2b80      	cmp	r3, #128	; 0x80
 8006b88:	d814      	bhi.n	8006bb4 <UART_SetConfig+0x210>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <UART_SetConfig+0x1f0>
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d008      	beq.n	8006ba4 <UART_SetConfig+0x200>
 8006b92:	e00f      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9a:	e082      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba2:	e07e      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006baa:	e07a      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006bac:	2308      	movs	r3, #8
 8006bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb2:	e076      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bba:	e072      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a35      	ldr	r2, [pc, #212]	; (8006c98 <UART_SetConfig+0x2f4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d12a      	bne.n	8006c1c <UART_SetConfig+0x278>
 8006bc6:	4b30      	ldr	r3, [pc, #192]	; (8006c88 <UART_SetConfig+0x2e4>)
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd4:	d01a      	beq.n	8006c0c <UART_SetConfig+0x268>
 8006bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bda:	d81b      	bhi.n	8006c14 <UART_SetConfig+0x270>
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be0:	d00c      	beq.n	8006bfc <UART_SetConfig+0x258>
 8006be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be6:	d815      	bhi.n	8006c14 <UART_SetConfig+0x270>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <UART_SetConfig+0x250>
 8006bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf0:	d008      	beq.n	8006c04 <UART_SetConfig+0x260>
 8006bf2:	e00f      	b.n	8006c14 <UART_SetConfig+0x270>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e052      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e04e      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	e04a      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c12:	e046      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1a:	e042      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a17      	ldr	r2, [pc, #92]	; (8006c80 <UART_SetConfig+0x2dc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d13a      	bne.n	8006c9c <UART_SetConfig+0x2f8>
 8006c26:	4b18      	ldr	r3, [pc, #96]	; (8006c88 <UART_SetConfig+0x2e4>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c34:	d01a      	beq.n	8006c6c <UART_SetConfig+0x2c8>
 8006c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3a:	d81b      	bhi.n	8006c74 <UART_SetConfig+0x2d0>
 8006c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c40:	d00c      	beq.n	8006c5c <UART_SetConfig+0x2b8>
 8006c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c46:	d815      	bhi.n	8006c74 <UART_SetConfig+0x2d0>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <UART_SetConfig+0x2b0>
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d008      	beq.n	8006c64 <UART_SetConfig+0x2c0>
 8006c52:	e00f      	b.n	8006c74 <UART_SetConfig+0x2d0>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	e022      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c62:	e01e      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	e01a      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c72:	e016      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	e012      	b.n	8006ca2 <UART_SetConfig+0x2fe>
 8006c7c:	cfff69f3 	.word	0xcfff69f3
 8006c80:	40008000 	.word	0x40008000
 8006c84:	40013800 	.word	0x40013800
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40004400 	.word	0x40004400
 8006c90:	40004800 	.word	0x40004800
 8006c94:	40004c00 	.word	0x40004c00
 8006c98:	40005000 	.word	0x40005000
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4aae      	ldr	r2, [pc, #696]	; (8006f60 <UART_SetConfig+0x5bc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	f040 8097 	bne.w	8006ddc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d823      	bhi.n	8006cfe <UART_SetConfig+0x35a>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x318>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006cff 	.word	0x08006cff
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006cff 	.word	0x08006cff
 8006ccc:	08006cef 	.word	0x08006cef
 8006cd0:	08006cff 	.word	0x08006cff
 8006cd4:	08006cff 	.word	0x08006cff
 8006cd8:	08006cff 	.word	0x08006cff
 8006cdc:	08006cf7 	.word	0x08006cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7fd fd96 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8006ce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ce6:	e010      	b.n	8006d0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce8:	4b9e      	ldr	r3, [pc, #632]	; (8006f64 <UART_SetConfig+0x5c0>)
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cec:	e00d      	b.n	8006d0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cee:	f7fd fd21 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8006cf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cf4:	e009      	b.n	8006d0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cfc:	e005      	b.n	8006d0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8130 	beq.w	8006f72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	4a94      	ldr	r2, [pc, #592]	; (8006f68 <UART_SetConfig+0x5c4>)
 8006d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d305      	bcc.n	8006d42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d903      	bls.n	8006d4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d48:	e113      	b.n	8006f72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	60bb      	str	r3, [r7, #8]
 8006d50:	60fa      	str	r2, [r7, #12]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	4a84      	ldr	r2, [pc, #528]	; (8006f68 <UART_SetConfig+0x5c4>)
 8006d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2200      	movs	r2, #0
 8006d60:	603b      	str	r3, [r7, #0]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d6c:	f7f9 fe42 	bl	80009f4 <__aeabi_uldivmod>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4610      	mov	r0, r2
 8006d76:	4619      	mov	r1, r3
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	020b      	lsls	r3, r1, #8
 8006d82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d86:	0202      	lsls	r2, r0, #8
 8006d88:	6979      	ldr	r1, [r7, #20]
 8006d8a:	6849      	ldr	r1, [r1, #4]
 8006d8c:	0849      	lsrs	r1, r1, #1
 8006d8e:	2000      	movs	r0, #0
 8006d90:	460c      	mov	r4, r1
 8006d92:	4605      	mov	r5, r0
 8006d94:	eb12 0804 	adds.w	r8, r2, r4
 8006d98:	eb43 0905 	adc.w	r9, r3, r5
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	469a      	mov	sl, r3
 8006da4:	4693      	mov	fp, r2
 8006da6:	4652      	mov	r2, sl
 8006da8:	465b      	mov	r3, fp
 8006daa:	4640      	mov	r0, r8
 8006dac:	4649      	mov	r1, r9
 8006dae:	f7f9 fe21 	bl	80009f4 <__aeabi_uldivmod>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4613      	mov	r3, r2
 8006db8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc0:	d308      	bcc.n	8006dd4 <UART_SetConfig+0x430>
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc8:	d204      	bcs.n	8006dd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6a3a      	ldr	r2, [r7, #32]
 8006dd0:	60da      	str	r2, [r3, #12]
 8006dd2:	e0ce      	b.n	8006f72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dda:	e0ca      	b.n	8006f72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de4:	d166      	bne.n	8006eb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d827      	bhi.n	8006e3e <UART_SetConfig+0x49a>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0x450>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e21 	.word	0x08006e21
 8006dfc:	08006e29 	.word	0x08006e29
 8006e00:	08006e3f 	.word	0x08006e3f
 8006e04:	08006e2f 	.word	0x08006e2f
 8006e08:	08006e3f 	.word	0x08006e3f
 8006e0c:	08006e3f 	.word	0x08006e3f
 8006e10:	08006e3f 	.word	0x08006e3f
 8006e14:	08006e37 	.word	0x08006e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e18:	f7fd fcfa 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e1e:	e014      	b.n	8006e4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e20:	f7fd fd0c 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 8006e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e26:	e010      	b.n	8006e4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e28:	4b4e      	ldr	r3, [pc, #312]	; (8006f64 <UART_SetConfig+0x5c0>)
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e2c:	e00d      	b.n	8006e4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2e:	f7fd fc81 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e34:	e009      	b.n	8006e4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e3c:	e005      	b.n	8006e4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8090 	beq.w	8006f72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	4a44      	ldr	r2, [pc, #272]	; (8006f68 <UART_SetConfig+0x5c4>)
 8006e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e64:	005a      	lsls	r2, r3, #1
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	441a      	add	r2, r3
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	d916      	bls.n	8006eac <UART_SetConfig+0x508>
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d212      	bcs.n	8006eac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f023 030f 	bic.w	r3, r3, #15
 8006e8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	8bfb      	ldrh	r3, [r7, #30]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	8bfa      	ldrh	r2, [r7, #30]
 8006ea8:	60da      	str	r2, [r3, #12]
 8006eaa:	e062      	b.n	8006f72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006eb2:	e05e      	b.n	8006f72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d828      	bhi.n	8006f0e <UART_SetConfig+0x56a>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x520>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ee9 	.word	0x08006ee9
 8006ec8:	08006ef1 	.word	0x08006ef1
 8006ecc:	08006ef9 	.word	0x08006ef9
 8006ed0:	08006f0f 	.word	0x08006f0f
 8006ed4:	08006eff 	.word	0x08006eff
 8006ed8:	08006f0f 	.word	0x08006f0f
 8006edc:	08006f0f 	.word	0x08006f0f
 8006ee0:	08006f0f 	.word	0x08006f0f
 8006ee4:	08006f07 	.word	0x08006f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee8:	f7fd fc92 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8006eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eee:	e014      	b.n	8006f1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef0:	f7fd fca4 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 8006ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ef6:	e010      	b.n	8006f1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <UART_SetConfig+0x5c0>)
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006efc:	e00d      	b.n	8006f1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efe:	f7fd fc19 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f04:	e009      	b.n	8006f1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f0c:	e005      	b.n	8006f1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f18:	bf00      	nop
    }

    if (pclk != 0U)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d028      	beq.n	8006f72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	4a10      	ldr	r2, [pc, #64]	; (8006f68 <UART_SetConfig+0x5c4>)
 8006f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	441a      	add	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b0f      	cmp	r3, #15
 8006f48:	d910      	bls.n	8006f6c <UART_SetConfig+0x5c8>
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f50:	d20c      	bcs.n	8006f6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60da      	str	r2, [r3, #12]
 8006f5c:	e009      	b.n	8006f72 <UART_SetConfig+0x5ce>
 8006f5e:	bf00      	nop
 8006f60:	40008000 	.word	0x40008000
 8006f64:	00f42400 	.word	0x00f42400
 8006f68:	080083a8 	.word	0x080083a8
      }
      else
      {
        ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2200      	movs	r2, #0
 8006f86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006f8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3730      	adds	r7, #48	; 0x30
 8006f96:	46bd      	mov	sp, r7
 8006f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01a      	beq.n	80070b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800709a:	d10a      	bne.n	80070b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	605a      	str	r2, [r3, #4]
  }
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b098      	sub	sp, #96	; 0x60
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f0:	f7fa fb9a 	bl	8001828 <HAL_GetTick>
 80070f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b08      	cmp	r3, #8
 8007102:	d12f      	bne.n	8007164 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800710c:	2200      	movs	r2, #0
 800710e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f88e 	bl	8007234 <UART_WaitOnFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d022      	beq.n	8007164 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007132:	653b      	str	r3, [r7, #80]	; 0x50
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800713c:	647b      	str	r3, [r7, #68]	; 0x44
 800713e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e6      	bne.n	800711e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e063      	b.n	800722c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b04      	cmp	r3, #4
 8007170:	d149      	bne.n	8007206 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007172:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800717a:	2200      	movs	r2, #0
 800717c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f857 	bl	8007234 <UART_WaitOnFlagUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d03c      	beq.n	8007206 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	623b      	str	r3, [r7, #32]
   return(result);
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071aa:	633b      	str	r3, [r7, #48]	; 0x30
 80071ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e6      	bne.n	800718c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071de:	61fa      	str	r2, [r7, #28]
 80071e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	69b9      	ldr	r1, [r7, #24]
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	617b      	str	r3, [r7, #20]
   return(result);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e012      	b.n	800722c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3758      	adds	r7, #88	; 0x58
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	4613      	mov	r3, r2
 8007242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007244:	e04f      	b.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d04b      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800724e:	f7fa faeb 	bl	8001828 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <UART_WaitOnFlagUntilTimeout+0x30>
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e04e      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d037      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	d034      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d031      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b08      	cmp	r3, #8
 800728e:	d110      	bne.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2208      	movs	r2, #8
 8007296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f95b 	bl	8007554 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2208      	movs	r2, #8
 80072a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e029      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c0:	d111      	bne.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f941 	bl	8007554 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e00f      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4013      	ands	r3, r2
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	bf0c      	ite	eq
 80072f6:	2301      	moveq	r3, #1
 80072f8:	2300      	movne	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	429a      	cmp	r2, r3
 8007302:	d0a0      	beq.n	8007246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007310:	b480      	push	{r7}
 8007312:	b0a3      	sub	sp, #140	; 0x8c
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007342:	d10e      	bne.n	8007362 <UART_Start_Receive_IT+0x52>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d105      	bne.n	8007358 <UART_Start_Receive_IT+0x48>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007352:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007356:	e02d      	b.n	80073b4 <UART_Start_Receive_IT+0xa4>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	22ff      	movs	r2, #255	; 0xff
 800735c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007360:	e028      	b.n	80073b4 <UART_Start_Receive_IT+0xa4>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10d      	bne.n	8007386 <UART_Start_Receive_IT+0x76>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <UART_Start_Receive_IT+0x6c>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	22ff      	movs	r2, #255	; 0xff
 8007376:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800737a:	e01b      	b.n	80073b4 <UART_Start_Receive_IT+0xa4>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	227f      	movs	r2, #127	; 0x7f
 8007380:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007384:	e016      	b.n	80073b4 <UART_Start_Receive_IT+0xa4>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800738e:	d10d      	bne.n	80073ac <UART_Start_Receive_IT+0x9c>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <UART_Start_Receive_IT+0x92>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	227f      	movs	r2, #127	; 0x7f
 800739c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073a0:	e008      	b.n	80073b4 <UART_Start_Receive_IT+0xa4>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	223f      	movs	r2, #63	; 0x3f
 80073a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073aa:	e003      	b.n	80073b4 <UART_Start_Receive_IT+0xa4>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2222      	movs	r2, #34	; 0x22
 80073c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80073d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3308      	adds	r3, #8
 80073e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80073e8:	673a      	str	r2, [r7, #112]	; 0x70
 80073ea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80073ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80073f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e3      	bne.n	80073c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007404:	d14f      	bne.n	80074a6 <UART_Start_Receive_IT+0x196>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800740c:	88fa      	ldrh	r2, [r7, #6]
 800740e:	429a      	cmp	r2, r3
 8007410:	d349      	bcc.n	80074a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741a:	d107      	bne.n	800742c <UART_Start_Receive_IT+0x11c>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4a47      	ldr	r2, [pc, #284]	; (8007544 <UART_Start_Receive_IT+0x234>)
 8007428:	675a      	str	r2, [r3, #116]	; 0x74
 800742a:	e002      	b.n	8007432 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a46      	ldr	r2, [pc, #280]	; (8007548 <UART_Start_Receive_IT+0x238>)
 8007430:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01a      	beq.n	8007470 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800745c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800745e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800746a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e4      	bne.n	800743a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007486:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3308      	adds	r3, #8
 800748e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007490:	64ba      	str	r2, [r7, #72]	; 0x48
 8007492:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800749e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e5      	bne.n	8007470 <UART_Start_Receive_IT+0x160>
 80074a4:	e046      	b.n	8007534 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	d107      	bne.n	80074c0 <UART_Start_Receive_IT+0x1b0>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4a24      	ldr	r2, [pc, #144]	; (800754c <UART_Start_Receive_IT+0x23c>)
 80074bc:	675a      	str	r2, [r3, #116]	; 0x74
 80074be:	e002      	b.n	80074c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4a23      	ldr	r2, [pc, #140]	; (8007550 <UART_Start_Receive_IT+0x240>)
 80074c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d019      	beq.n	8007502 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80074e2:	677b      	str	r3, [r7, #116]	; 0x74
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ec:	637b      	str	r3, [r7, #52]	; 0x34
 80074ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e6      	bne.n	80074ce <UART_Start_Receive_IT+0x1be>
 8007500:	e018      	b.n	8007534 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	613b      	str	r3, [r7, #16]
   return(result);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f043 0320 	orr.w	r3, r3, #32
 8007516:	67bb      	str	r3, [r7, #120]	; 0x78
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	69f9      	ldr	r1, [r7, #28]
 8007526:	6a3a      	ldr	r2, [r7, #32]
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	61bb      	str	r3, [r7, #24]
   return(result);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e6      	bne.n	8007502 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	378c      	adds	r7, #140	; 0x8c
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	08007d75 	.word	0x08007d75
 8007548:	08007a15 	.word	0x08007a15
 800754c:	0800785d 	.word	0x0800785d
 8007550:	080076a5 	.word	0x080076a5

08007554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b095      	sub	sp, #84	; 0x54
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757a:	643b      	str	r3, [r7, #64]	; 0x40
 800757c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e6      	bne.n	800755c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	61fb      	str	r3, [r7, #28]
   return(result);
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3308      	adds	r3, #8
 80075b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e3      	bne.n	800758e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d118      	bne.n	8007600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	60bb      	str	r3, [r7, #8]
   return(result);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f023 0310 	bic.w	r3, r3, #16
 80075e2:	647b      	str	r3, [r7, #68]	; 0x44
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6979      	ldr	r1, [r7, #20]
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	613b      	str	r3, [r7, #16]
   return(result);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e6      	bne.n	80075ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007614:	bf00      	nop
 8007616:	3754      	adds	r7, #84	; 0x54
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff f99a 	bl	8006978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007644:	bf00      	nop
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	60bb      	str	r3, [r7, #8]
   return(result);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007668:	61fb      	str	r3, [r7, #28]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	61bb      	str	r3, [r7, #24]
 8007674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6979      	ldr	r1, [r7, #20]
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	613b      	str	r3, [r7, #16]
   return(result);
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e6      	bne.n	8007654 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff f965 	bl	8006964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769a:	bf00      	nop
 800769c:	3720      	adds	r7, #32
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b09c      	sub	sp, #112	; 0x70
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076bc:	2b22      	cmp	r3, #34	; 0x22
 80076be:	f040 80be 	bne.w	800783e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076d0:	b2d9      	uxtb	r1, r3
 80076d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076dc:	400a      	ands	r2, r1
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 80a1 	bne.w	800784e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800771a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800771c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007720:	66bb      	str	r3, [r7, #104]	; 0x68
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800772a:	65bb      	str	r3, [r7, #88]	; 0x58
 800772c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e6      	bne.n	800770c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007750:	f023 0301 	bic.w	r3, r3, #1
 8007754:	667b      	str	r3, [r7, #100]	; 0x64
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3308      	adds	r3, #8
 800775c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800775e:	647a      	str	r2, [r7, #68]	; 0x44
 8007760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e5      	bne.n	800773e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a33      	ldr	r2, [pc, #204]	; (8007858 <UART_RxISR_8BIT+0x1b4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d01f      	beq.n	80077d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d018      	beq.n	80077d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	623b      	str	r3, [r7, #32]
   return(result);
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077b2:	663b      	str	r3, [r7, #96]	; 0x60
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077bc:	633b      	str	r3, [r7, #48]	; 0x30
 80077be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d12e      	bne.n	8007836 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0310 	bic.w	r3, r3, #16
 80077f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077fc:	61fb      	str	r3, [r7, #28]
 80077fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	69b9      	ldr	r1, [r7, #24]
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	617b      	str	r3, [r7, #20]
   return(result);
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e6      	bne.n	80077de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b10      	cmp	r3, #16
 800781c:	d103      	bne.n	8007826 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2210      	movs	r2, #16
 8007824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff f8ac 	bl	800698c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007834:	e00b      	b.n	800784e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7f9 fd28 	bl	800128c <HAL_UART_RxCpltCallback>
}
 800783c:	e007      	b.n	800784e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f042 0208 	orr.w	r2, r2, #8
 800784c:	619a      	str	r2, [r3, #24]
}
 800784e:	bf00      	nop
 8007850:	3770      	adds	r7, #112	; 0x70
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40008000 	.word	0x40008000

0800785c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b09c      	sub	sp, #112	; 0x70
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800786a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007874:	2b22      	cmp	r3, #34	; 0x22
 8007876:	f040 80be 	bne.w	80079f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007888:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800788a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800788e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007892:	4013      	ands	r3, r2
 8007894:	b29a      	uxth	r2, r3
 8007896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007898:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789e:	1c9a      	adds	r2, r3, #2
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 80a1 	bne.w	8007a06 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078d8:	667b      	str	r3, [r7, #100]	; 0x64
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e2:	657b      	str	r3, [r7, #84]	; 0x54
 80078e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e6      	bne.n	80078c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3308      	adds	r3, #8
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	663b      	str	r3, [r7, #96]	; 0x60
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3308      	adds	r3, #8
 8007914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007916:	643a      	str	r2, [r7, #64]	; 0x40
 8007918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800791c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e5      	bne.n	80078f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a33      	ldr	r2, [pc, #204]	; (8007a10 <UART_RxISR_16BIT+0x1b4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d01f      	beq.n	8007988 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d018      	beq.n	8007988 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	61fb      	str	r3, [r7, #28]
   return(result);
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800796a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007976:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800797a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e6      	bne.n	8007956 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d12e      	bne.n	80079ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f023 0310 	bic.w	r3, r3, #16
 80079aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6979      	ldr	r1, [r7, #20]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	613b      	str	r3, [r7, #16]
   return(result);
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e6      	bne.n	8007996 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d103      	bne.n	80079de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2210      	movs	r2, #16
 80079dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fe ffd0 	bl	800698c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079ec:	e00b      	b.n	8007a06 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7f9 fc4c 	bl	800128c <HAL_UART_RxCpltCallback>
}
 80079f4:	e007      	b.n	8007a06 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699a      	ldr	r2, [r3, #24]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0208 	orr.w	r2, r2, #8
 8007a04:	619a      	str	r2, [r3, #24]
}
 8007a06:	bf00      	nop
 8007a08:	3770      	adds	r7, #112	; 0x70
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	40008000 	.word	0x40008000

08007a14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b0ac      	sub	sp, #176	; 0xb0
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a4a:	2b22      	cmp	r3, #34	; 0x22
 8007a4c:	f040 8182 	bne.w	8007d54 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a56:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a5a:	e125      	b.n	8007ca8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007a6a:	b2d9      	uxtb	r1, r3
 8007a6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a76:	400a      	ands	r2, r1
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d053      	beq.n	8007b56 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d011      	beq.n	8007ade <UART_RxISR_8BIT_FIFOEN+0xca>
 8007aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2201      	movs	r2, #1
 8007acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad4:	f043 0201 	orr.w	r2, r3, #1
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d011      	beq.n	8007b0e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2202      	movs	r2, #2
 8007afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b04:	f043 0204 	orr.w	r2, r3, #4
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d011      	beq.n	8007b3e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00b      	beq.n	8007b3e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b34:	f043 0202 	orr.w	r2, r3, #2
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d006      	beq.n	8007b56 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fe ff15 	bl	8006978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f040 80a2 	bne.w	8007ca8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b88:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007b8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e4      	bne.n	8007b64 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8007bc4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007bc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e1      	bne.n	8007b9a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a5f      	ldr	r2, [pc, #380]	; (8007d6c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d021      	beq.n	8007c38 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d01a      	beq.n	8007c38 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c24:	657b      	str	r3, [r7, #84]	; 0x54
 8007c26:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e4      	bne.n	8007c02 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d130      	bne.n	8007ca2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	f023 0310 	bic.w	r3, r3, #16
 8007c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c68:	643b      	str	r3, [r7, #64]	; 0x40
 8007c6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e4      	bne.n	8007c46 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f003 0310 	and.w	r3, r3, #16
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d103      	bne.n	8007c92 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2210      	movs	r2, #16
 8007c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fe fe76 	bl	800698c <HAL_UARTEx_RxEventCallback>
 8007ca0:	e002      	b.n	8007ca8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7f9 faf2 	bl	800128c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ca8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d006      	beq.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f47f aecf 	bne.w	8007a5c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cc4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007cc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d049      	beq.n	8007d64 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cd6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d242      	bcs.n	8007d64 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	e853 3f00 	ldrex	r3, [r3]
 8007cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e3      	bne.n	8007cde <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a15      	ldr	r2, [pc, #84]	; (8007d70 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007d1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f043 0320 	orr.w	r3, r3, #32
 8007d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6979      	ldr	r1, [r7, #20]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e4      	bne.n	8007d1c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d52:	e007      	b.n	8007d64 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699a      	ldr	r2, [r3, #24]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0208 	orr.w	r2, r2, #8
 8007d62:	619a      	str	r2, [r3, #24]
}
 8007d64:	bf00      	nop
 8007d66:	37b0      	adds	r7, #176	; 0xb0
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	40008000 	.word	0x40008000
 8007d70:	080076a5 	.word	0x080076a5

08007d74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b0ae      	sub	sp, #184	; 0xb8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d82:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007daa:	2b22      	cmp	r3, #34	; 0x22
 8007dac:	f040 8186 	bne.w	80080bc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007db6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dba:	e129      	b.n	8008010 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007dce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007dd2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de4:	1c9a      	adds	r2, r3, #2
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d053      	beq.n	8007eba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d011      	beq.n	8007e42 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00b      	beq.n	8007e42 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e38:	f043 0201 	orr.w	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d011      	beq.n	8007e72 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e68:	f043 0204 	orr.w	r2, r3, #4
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d011      	beq.n	8007ea2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2204      	movs	r2, #4
 8007e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e98:	f043 0202 	orr.w	r2, r3, #2
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d006      	beq.n	8007eba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7fe fd63 	bl	8006978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f040 80a4 	bne.w	8008010 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eee:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e2      	bne.n	8007ec8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f18:	f023 0301 	bic.w	r3, r3, #1
 8007f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e1      	bne.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a5f      	ldr	r2, [pc, #380]	; (80080d4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d021      	beq.n	8007fa0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d01a      	beq.n	8007fa0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e4      	bne.n	8007f6a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d130      	bne.n	800800a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbe:	f023 0310 	bic.w	r3, r3, #16
 8007fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e4      	bne.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	2b10      	cmp	r3, #16
 8007ff0:	d103      	bne.n	8007ffa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2210      	movs	r2, #16
 8007ff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fe fcc2 	bl	800698c <HAL_UARTEx_RxEventCallback>
 8008008:	e002      	b.n	8008010 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7f9 f93e 	bl	800128c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008010:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008014:	2b00      	cmp	r3, #0
 8008016:	d006      	beq.n	8008026 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	f47f aecb 	bne.w	8007dbc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800802c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008030:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008034:	2b00      	cmp	r3, #0
 8008036:	d049      	beq.n	80080cc <UART_RxISR_16BIT_FIFOEN+0x358>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800803e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008042:	429a      	cmp	r2, r3
 8008044:	d242      	bcs.n	80080cc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3308      	adds	r3, #8
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	623b      	str	r3, [r7, #32]
   return(result);
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800805c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3308      	adds	r3, #8
 8008066:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800806a:	633a      	str	r2, [r7, #48]	; 0x30
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e3      	bne.n	8008046 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008082:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	60fb      	str	r3, [r7, #12]
   return(result);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f043 0320 	orr.w	r3, r3, #32
 8008098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	69b9      	ldr	r1, [r7, #24]
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	617b      	str	r3, [r7, #20]
   return(result);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e4      	bne.n	8008084 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080ba:	e007      	b.n	80080cc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0208 	orr.w	r2, r2, #8
 80080ca:	619a      	str	r2, [r3, #24]
}
 80080cc:	bf00      	nop
 80080ce:	37b8      	adds	r7, #184	; 0xb8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	40008000 	.word	0x40008000
 80080d8:	0800785d 	.word	0x0800785d

080080dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <HAL_UARTEx_DisableFifoMode+0x16>
 800812a:	2302      	movs	r3, #2
 800812c:	e027      	b.n	800817e <HAL_UARTEx_DisableFifoMode+0x66>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2224      	movs	r2, #36	; 0x24
 800813a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0201 	bic.w	r2, r2, #1
 8008154:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800815c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800819e:	2302      	movs	r3, #2
 80081a0:	e02d      	b.n	80081fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2224      	movs	r2, #36	; 0x24
 80081ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 0201 	bic.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f850 	bl	8008284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008216:	2b01      	cmp	r3, #1
 8008218:	d101      	bne.n	800821e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800821a:	2302      	movs	r3, #2
 800821c:	e02d      	b.n	800827a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2224      	movs	r2, #36	; 0x24
 800822a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 0201 	bic.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	430a      	orrs	r2, r1
 8008258:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f812 	bl	8008284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2220      	movs	r2, #32
 800826c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008290:	2b00      	cmp	r3, #0
 8008292:	d108      	bne.n	80082a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082a4:	e031      	b.n	800830a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082a6:	2308      	movs	r3, #8
 80082a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082aa:	2308      	movs	r3, #8
 80082ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	0e5b      	lsrs	r3, r3, #25
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	0f5b      	lsrs	r3, r3, #29
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	f003 0307 	and.w	r3, r3, #7
 80082cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	7b3a      	ldrb	r2, [r7, #12]
 80082d2:	4911      	ldr	r1, [pc, #68]	; (8008318 <UARTEx_SetNbDataToProcess+0x94>)
 80082d4:	5c8a      	ldrb	r2, [r1, r2]
 80082d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082da:	7b3a      	ldrb	r2, [r7, #12]
 80082dc:	490f      	ldr	r1, [pc, #60]	; (800831c <UARTEx_SetNbDataToProcess+0x98>)
 80082de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	7b7a      	ldrb	r2, [r7, #13]
 80082f0:	4909      	ldr	r1, [pc, #36]	; (8008318 <UARTEx_SetNbDataToProcess+0x94>)
 80082f2:	5c8a      	ldrb	r2, [r1, r2]
 80082f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082f8:	7b7a      	ldrb	r2, [r7, #13]
 80082fa:	4908      	ldr	r1, [pc, #32]	; (800831c <UARTEx_SetNbDataToProcess+0x98>)
 80082fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008302:	b29a      	uxth	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	080083c0 	.word	0x080083c0
 800831c:	080083c8 	.word	0x080083c8

08008320 <memset>:
 8008320:	4402      	add	r2, r0
 8008322:	4603      	mov	r3, r0
 8008324:	4293      	cmp	r3, r2
 8008326:	d100      	bne.n	800832a <memset+0xa>
 8008328:	4770      	bx	lr
 800832a:	f803 1b01 	strb.w	r1, [r3], #1
 800832e:	e7f9      	b.n	8008324 <memset+0x4>

08008330 <__libc_init_array>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	4d0d      	ldr	r5, [pc, #52]	; (8008368 <__libc_init_array+0x38>)
 8008334:	4c0d      	ldr	r4, [pc, #52]	; (800836c <__libc_init_array+0x3c>)
 8008336:	1b64      	subs	r4, r4, r5
 8008338:	10a4      	asrs	r4, r4, #2
 800833a:	2600      	movs	r6, #0
 800833c:	42a6      	cmp	r6, r4
 800833e:	d109      	bne.n	8008354 <__libc_init_array+0x24>
 8008340:	4d0b      	ldr	r5, [pc, #44]	; (8008370 <__libc_init_array+0x40>)
 8008342:	4c0c      	ldr	r4, [pc, #48]	; (8008374 <__libc_init_array+0x44>)
 8008344:	f000 f818 	bl	8008378 <_init>
 8008348:	1b64      	subs	r4, r4, r5
 800834a:	10a4      	asrs	r4, r4, #2
 800834c:	2600      	movs	r6, #0
 800834e:	42a6      	cmp	r6, r4
 8008350:	d105      	bne.n	800835e <__libc_init_array+0x2e>
 8008352:	bd70      	pop	{r4, r5, r6, pc}
 8008354:	f855 3b04 	ldr.w	r3, [r5], #4
 8008358:	4798      	blx	r3
 800835a:	3601      	adds	r6, #1
 800835c:	e7ee      	b.n	800833c <__libc_init_array+0xc>
 800835e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008362:	4798      	blx	r3
 8008364:	3601      	adds	r6, #1
 8008366:	e7f2      	b.n	800834e <__libc_init_array+0x1e>
 8008368:	080083d8 	.word	0x080083d8
 800836c:	080083d8 	.word	0x080083d8
 8008370:	080083d8 	.word	0x080083d8
 8008374:	080083dc 	.word	0x080083dc

08008378 <_init>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	bf00      	nop
 800837c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837e:	bc08      	pop	{r3}
 8008380:	469e      	mov	lr, r3
 8008382:	4770      	bx	lr

08008384 <_fini>:
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	bf00      	nop
 8008388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838a:	bc08      	pop	{r3}
 800838c:	469e      	mov	lr, r3
 800838e:	4770      	bx	lr
