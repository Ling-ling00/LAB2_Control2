
LAB2_Control2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009320  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009538  08009538  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08009538  08009538  00019538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009540  08009540  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000014  0800955c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800955c  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181f2  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbc  00000000  00000000  00038279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109e  00000000  00000000  0003c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028daf  00000000  00000000  0003d516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c07  00000000  00000000  000662c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011419e  00000000  00000000  0007eecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dac  00000000  00000000  0019306c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00198e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080094e0 	.word	0x080094e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	080094e0 	.word	0x080094e0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b970 	b.w	8000ddc <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9e08      	ldr	r6, [sp, #32]
 8000b1a:	460d      	mov	r5, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	460f      	mov	r7, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4694      	mov	ip, r2
 8000b28:	d965      	bls.n	8000bf6 <__udivmoddi4+0xe2>
 8000b2a:	fab2 f382 	clz	r3, r2
 8000b2e:	b143      	cbz	r3, 8000b42 <__udivmoddi4+0x2e>
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	f1c3 0220 	rsb	r2, r3, #32
 8000b38:	409f      	lsls	r7, r3
 8000b3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	409c      	lsls	r4, r3
 8000b42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b46:	fa1f f58c 	uxth.w	r5, ip
 8000b4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b4e:	0c22      	lsrs	r2, r4, #16
 8000b50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b58:	fb01 f005 	mul.w	r0, r1, r5
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b60:	eb1c 0202 	adds.w	r2, ip, r2
 8000b64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b68:	f080 811c 	bcs.w	8000da4 <__udivmoddi4+0x290>
 8000b6c:	4290      	cmp	r0, r2
 8000b6e:	f240 8119 	bls.w	8000da4 <__udivmoddi4+0x290>
 8000b72:	3902      	subs	r1, #2
 8000b74:	4462      	add	r2, ip
 8000b76:	1a12      	subs	r2, r2, r0
 8000b78:	b2a4      	uxth	r4, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b86:	fb00 f505 	mul.w	r5, r0, r5
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x90>
 8000b8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b96:	f080 8107 	bcs.w	8000da8 <__udivmoddi4+0x294>
 8000b9a:	42a5      	cmp	r5, r4
 8000b9c:	f240 8104 	bls.w	8000da8 <__udivmoddi4+0x294>
 8000ba0:	4464      	add	r4, ip
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba8:	1b64      	subs	r4, r4, r5
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11e      	cbz	r6, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40dc      	lsrs	r4, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0xbc>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	f000 80ed 	beq.w	8000d9e <__udivmoddi4+0x28a>
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd0:	fab3 f183 	clz	r1, r3
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	d149      	bne.n	8000c6c <__udivmoddi4+0x158>
 8000bd8:	42ab      	cmp	r3, r5
 8000bda:	d302      	bcc.n	8000be2 <__udivmoddi4+0xce>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	f200 80f8 	bhi.w	8000dd2 <__udivmoddi4+0x2be>
 8000be2:	1a84      	subs	r4, r0, r2
 8000be4:	eb65 0203 	sbc.w	r2, r5, r3
 8000be8:	2001      	movs	r0, #1
 8000bea:	4617      	mov	r7, r2
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d0e2      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bf4:	e7df      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf6:	b902      	cbnz	r2, 8000bfa <__udivmoddi4+0xe6>
 8000bf8:	deff      	udf	#255	; 0xff
 8000bfa:	fab2 f382 	clz	r3, r2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 8090 	bne.w	8000d24 <__udivmoddi4+0x210>
 8000c04:	1a8a      	subs	r2, r1, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2101      	movs	r1, #1
 8000c10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c14:	fb07 2015 	mls	r0, r7, r5, r2
 8000c18:	0c22      	lsrs	r2, r4, #16
 8000c1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c1e:	fb0e f005 	mul.w	r0, lr, r5
 8000c22:	4290      	cmp	r0, r2
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x124>
 8000c26:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x122>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2b8>
 8000c36:	4645      	mov	r5, r8
 8000c38:	1a12      	subs	r2, r2, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c40:	fb07 2210 	mls	r2, r7, r0, r2
 8000c44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x14e>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x14c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2c2>
 8000c60:	4610      	mov	r0, r2
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c6a:	e79f      	b.n	8000bac <__udivmoddi4+0x98>
 8000c6c:	f1c1 0720 	rsb	r7, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c82:	40fd      	lsrs	r5, r7
 8000c84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c88:	4323      	orrs	r3, r4
 8000c8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c8e:	fa1f fe8c 	uxth.w	lr, ip
 8000c92:	fb09 5518 	mls	r5, r9, r8, r5
 8000c96:	0c1c      	lsrs	r4, r3, #16
 8000c98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca6:	fa00 f001 	lsl.w	r0, r0, r1
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b0>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2b4>
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2b4>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4464      	add	r4, ip
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	b29d      	uxth	r5, r3
 8000cc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ccc:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd8:	45a6      	cmp	lr, r4
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1da>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2ac>
 8000ce6:	45a6      	cmp	lr, r4
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2ac>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	4464      	add	r4, ip
 8000cee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cf2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	42ac      	cmp	r4, r5
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46ae      	mov	lr, r5
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x29c>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x298>
 8000d04:	b156      	cbz	r6, 8000d1c <__udivmoddi4+0x208>
 8000d06:	ebb0 0208 	subs.w	r2, r0, r8
 8000d0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d12:	40ca      	lsrs	r2, r1
 8000d14:	40cc      	lsrs	r4, r1
 8000d16:	4317      	orrs	r7, r2
 8000d18:	e9c6 7400 	strd	r7, r4, [r6]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	f1c3 0120 	rsb	r1, r3, #32
 8000d28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d30:	fa25 f101 	lsr.w	r1, r5, r1
 8000d34:	409d      	lsls	r5, r3
 8000d36:	432a      	orrs	r2, r5
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1510 	mls	r5, r7, r0, r1
 8000d48:	0c11      	lsrs	r1, r2, #16
 8000d4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d52:	428d      	cmp	r5, r1
 8000d54:	fa04 f403 	lsl.w	r4, r4, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x258>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d64:	428d      	cmp	r5, r1
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4461      	add	r1, ip
 8000d6c:	1b49      	subs	r1, r1, r5
 8000d6e:	b292      	uxth	r2, r2
 8000d70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d74:	fb07 1115 	mls	r1, r7, r5, r1
 8000d78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d80:	4291      	cmp	r1, r2
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x282>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2a8>
 8000d8e:	4291      	cmp	r1, r2
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2a8>
 8000d92:	3d02      	subs	r5, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a52      	subs	r2, r2, r1
 8000d98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0xfc>
 8000d9e:	4631      	mov	r1, r6
 8000da0:	4630      	mov	r0, r6
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000da4:	4639      	mov	r1, r7
 8000da6:	e6e6      	b.n	8000b76 <__udivmoddi4+0x62>
 8000da8:	4610      	mov	r0, r2
 8000daa:	e6fb      	b.n	8000ba4 <__udivmoddi4+0x90>
 8000dac:	4548      	cmp	r0, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f0>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000db8:	3b01      	subs	r3, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f0>
 8000dbc:	4645      	mov	r5, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dc0:	462b      	mov	r3, r5
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1da>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x258>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b0>
 8000dcc:	3d02      	subs	r5, #2
 8000dce:	4462      	add	r2, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x124>
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e70a      	b.n	8000bec <__udivmoddi4+0xd8>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x14e>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f001 fb7e 	bl	80024e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 fac9 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f000 fe17 	bl	8001a20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df2:	f000 fdd7 	bl	80019a4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000df6:	f000 fbed 	bl	80015d4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000dfa:	f000 fb0d 	bl	8001418 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dfe:	f000 fcb5 	bl	800176c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e02:	f000 fc31 	bl	8001668 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e06:	f000 fd29 	bl	800185c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e0a:	f000 fd7d 	bl	8001908 <MX_TIM5_Init>
  MX_ADC2_Init();
 8000e0e:	f000 fb7b 	bl	8001508 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //ADC for poten motor
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e12:	217f      	movs	r1, #127	; 0x7f
 8000e14:	48b8      	ldr	r0, [pc, #736]	; (80010f8 <main+0x318>)
 8000e16:	f002 fee5 	bl	8003be4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000e1a:	2228      	movs	r2, #40	; 0x28
 8000e1c:	49b7      	ldr	r1, [pc, #732]	; (80010fc <main+0x31c>)
 8000e1e:	48b6      	ldr	r0, [pc, #728]	; (80010f8 <main+0x318>)
 8000e20:	f001 ffd2 	bl	8002dc8 <HAL_ADC_Start_DMA>

  //UART
  HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8000e24:	2204      	movs	r2, #4
 8000e26:	49b6      	ldr	r1, [pc, #728]	; (8001100 <main+0x320>)
 8000e28:	48b6      	ldr	r0, [pc, #728]	; (8001104 <main+0x324>)
 8000e2a:	f006 faa9 	bl	8007380 <HAL_UART_Receive_IT>

  //PWM motor and direction pin
  HAL_TIM_Base_Start(&htim3);
 8000e2e:	48b6      	ldr	r0, [pc, #728]	; (8001108 <main+0x328>)
 8000e30:	f004 fed8 	bl	8005be4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e34:	2100      	movs	r1, #0
 8000e36:	48b4      	ldr	r0, [pc, #720]	; (8001108 <main+0x328>)
 8000e38:	f005 f81e 	bl	8005e78 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f003 fdfc 	bl	8004a40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	48af      	ldr	r0, [pc, #700]	; (800110c <main+0x32c>)
 8000e4e:	f003 fdf7 	bl	8004a40 <HAL_GPIO_WritePin>

  //Encoder fualhaber
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000e52:	213c      	movs	r1, #60	; 0x3c
 8000e54:	48ae      	ldr	r0, [pc, #696]	; (8001110 <main+0x330>)
 8000e56:	f005 f9c7 	bl	80061e8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000e5a:	48ae      	ldr	r0, [pc, #696]	; (8001114 <main+0x334>)
 8000e5c:	f004 ff32 	bl	8005cc4 <HAL_TIM_Base_Start_IT>

  //PWM motor faulhaber
  HAL_TIM_Base_Start(&htim2);
 8000e60:	48ad      	ldr	r0, [pc, #692]	; (8001118 <main+0x338>)
 8000e62:	f004 febf 	bl	8005be4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e66:	2100      	movs	r1, #0
 8000e68:	48ab      	ldr	r0, [pc, #684]	; (8001118 <main+0x338>)
 8000e6a:	f005 f805 	bl	8005e78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e6e:	2104      	movs	r1, #4
 8000e70:	48a9      	ldr	r0, [pc, #676]	; (8001118 <main+0x338>)
 8000e72:	f005 f801 	bl	8005e78 <HAL_TIM_PWM_Start>

  //PID
  PID.Kp = 1;
 8000e76:	4ba9      	ldr	r3, [pc, #676]	; (800111c <main+0x33c>)
 8000e78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e7c:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.00000001;
 8000e7e:	4ba7      	ldr	r3, [pc, #668]	; (800111c <main+0x33c>)
 8000e80:	4aa7      	ldr	r2, [pc, #668]	; (8001120 <main+0x340>)
 8000e82:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000e84:	4ba5      	ldr	r3, [pc, #660]	; (800111c <main+0x33c>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	48a3      	ldr	r0, [pc, #652]	; (800111c <main+0x33c>)
 8000e90:	f008 fac4 	bl	800941c <arm_pid_init_f32>

  //ADC set position
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000e94:	217f      	movs	r1, #127	; 0x7f
 8000e96:	48a3      	ldr	r0, [pc, #652]	; (8001124 <main+0x344>)
 8000e98:	f002 fea4 	bl	8003be4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, ADC_RawRead2, 40);
 8000e9c:	2228      	movs	r2, #40	; 0x28
 8000e9e:	49a2      	ldr	r1, [pc, #648]	; (8001128 <main+0x348>)
 8000ea0:	48a0      	ldr	r0, [pc, #640]	; (8001124 <main+0x344>)
 8000ea2:	f001 ff91 	bl	8002dc8 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //find set position
	  setposition = Average_ADC2()/4095.0*2*M_PI;
 8000ea6:	f000 fe9b 	bl	8001be0 <Average_ADC2>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb05 	bl	80004bc <__aeabi_i2d>
 8000eb2:	a38d      	add	r3, pc, #564	; (adr r3, 80010e8 <main+0x308>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fc94 	bl	80007e4 <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	f7ff f9ac 	bl	8000224 <__adddf3>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	a386      	add	r3, pc, #536	; (adr r3, 80010f0 <main+0x310>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fb59 	bl	8000590 <__aeabi_dmul>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fdad 	bl	8000a44 <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a8f      	ldr	r2, [pc, #572]	; (800112c <main+0x34c>)
 8000eee:	6013      	str	r3, [r2, #0]

	  if(mode == 3){
 8000ef0:	4b8f      	ldr	r3, [pc, #572]	; (8001130 <main+0x350>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d13f      	bne.n	8000f78 <main+0x198>
		  static uint32_t TimeStamp = 0;
		  if( HAL_GetTick()>=TimeStamp){
 8000ef8:	f001 fb5a 	bl	80025b0 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <main+0x354>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d325      	bcc.n	8000f52 <main+0x172>
			  TimeStamp = HAL_GetTick()+5;
 8000f06:	f001 fb53 	bl	80025b0 <HAL_GetTick>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	3305      	adds	r3, #5
 8000f0e:	4a89      	ldr	r2, [pc, #548]	; (8001134 <main+0x354>)
 8000f10:	6013      	str	r3, [r2, #0]
			  angle = Average_ADC();
 8000f12:	f000 fe3b 	bl	8001b8c <Average_ADC>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b87      	ldr	r3, [pc, #540]	; (8001138 <main+0x358>)
 8000f1c:	801a      	strh	r2, [r3, #0]

			  TxBuffer[0] = 69; // header
 8000f1e:	4b87      	ldr	r3, [pc, #540]	; (800113c <main+0x35c>)
 8000f20:	2245      	movs	r2, #69	; 0x45
 8000f22:	701a      	strb	r2, [r3, #0]
			  TxBuffer[1] = angle & 0xff;
 8000f24:	4b84      	ldr	r3, [pc, #528]	; (8001138 <main+0x358>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b84      	ldr	r3, [pc, #528]	; (800113c <main+0x35c>)
 8000f2c:	705a      	strb	r2, [r3, #1]
			  TxBuffer[2] = (angle & 0xff00) >> 8;
 8000f2e:	4b82      	ldr	r3, [pc, #520]	; (8001138 <main+0x358>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b80      	ldr	r3, [pc, #512]	; (800113c <main+0x35c>)
 8000f3a:	709a      	strb	r2, [r3, #2]
			  TxBuffer[3] = 10; // \n
 8000f3c:	4b7f      	ldr	r3, [pc, #508]	; (800113c <main+0x35c>)
 8000f3e:	220a      	movs	r2, #10
 8000f40:	70da      	strb	r2, [r3, #3]

			  HAL_UART_Transmit(&hlpuart1,TxBuffer, 4, 10);
 8000f42:	230a      	movs	r3, #10
 8000f44:	2204      	movs	r2, #4
 8000f46:	497d      	ldr	r1, [pc, #500]	; (800113c <main+0x35c>)
 8000f48:	486e      	ldr	r0, [pc, #440]	; (8001104 <main+0x324>)
 8000f4a:	f006 f98b 	bl	8007264 <HAL_UART_Transmit>

			  setMotor();
 8000f4e:	f000 fe93 	bl	8001c78 <setMotor>
		  }
		  static uint32_t TimeStamp2 = 0;
		  if( HAL_GetTick()>=TimeStamp2){
 8000f52:	f001 fb2d 	bl	80025b0 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	4b79      	ldr	r3, [pc, #484]	; (8001140 <main+0x360>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d30b      	bcc.n	8000f78 <main+0x198>
			  TimeStamp2 = HAL_GetTick()+1000;
 8000f60:	f001 fb26 	bl	80025b0 <HAL_GetTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f6a:	4a75      	ldr	r2, [pc, #468]	; (8001140 <main+0x360>)
 8000f6c:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f6e:	2120      	movs	r1, #32
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f003 fd7c 	bl	8004a70 <HAL_GPIO_TogglePin>
		  }
	  }

	  if(mode == 2){
 8000f78:	4b6d      	ldr	r3, [pc, #436]	; (8001130 <main+0x350>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	f040 812b 	bne.w	80011d8 <main+0x3f8>
		  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8000f82:	4b63      	ldr	r3, [pc, #396]	; (8001110 <main+0x330>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	4a6e      	ldr	r2, [pc, #440]	; (8001144 <main+0x364>)
 8000f8a:	6013      	str	r3, [r2, #0]
		  realdegree = (QEIReadRaw*360)/3071;
 8000f8c:	4b6d      	ldr	r3, [pc, #436]	; (8001144 <main+0x364>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	4a6b      	ldr	r2, [pc, #428]	; (8001148 <main+0x368>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0a9b      	lsrs	r3, r3, #10
 8000fa0:	4a6a      	ldr	r2, [pc, #424]	; (800114c <main+0x36c>)
 8000fa2:	6013      	str	r3, [r2, #0]
		  degree = (((QEIReadRaw*360)/3071)*64);
 8000fa4:	4b67      	ldr	r3, [pc, #412]	; (8001144 <main+0x364>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4a65      	ldr	r2, [pc, #404]	; (8001148 <main+0x368>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0a9b      	lsrs	r3, r3, #10
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	4a65      	ldr	r2, [pc, #404]	; (8001150 <main+0x370>)
 8000fbc:	6013      	str	r3, [r2, #0]
		  position = ((realdegree)%360)*M_PI/180;
 8000fbe:	4b63      	ldr	r3, [pc, #396]	; (800114c <main+0x36c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	08d3      	lsrs	r3, r2, #3
 8000fc4:	4963      	ldr	r1, [pc, #396]	; (8001154 <main+0x374>)
 8000fc6:	fba1 1303 	umull	r1, r3, r1, r3
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa60 	bl	800049c <__aeabi_ui2d>
 8000fdc:	a344      	add	r3, pc, #272	; (adr r3, 80010f0 <main+0x310>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fad5 	bl	8000590 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b59      	ldr	r3, [pc, #356]	; (8001158 <main+0x378>)
 8000ff4:	f7ff fbf6 	bl	80007e4 <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fd20 	bl	8000a44 <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	4a55      	ldr	r2, [pc, #340]	; (800115c <main+0x37c>)
 8001008:	6013      	str	r3, [r2, #0]
		  Wrapselect();
 800100a:	f000 fea5 	bl	8001d58 <Wrapselect>
		  Vfeedback = arm_pid_f32(&PID, Error);
 800100e:	4b54      	ldr	r3, [pc, #336]	; (8001160 <main+0x380>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a42      	ldr	r2, [pc, #264]	; (800111c <main+0x33c>)
 8001014:	617a      	str	r2, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001022:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	edd3 6a01 	vldr	s13, [r3, #4]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001032:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001036:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	edd3 7a04 	vldr	s15, [r3, #16]
 8001046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800104a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a3c      	ldr	r2, [pc, #240]	; (8001164 <main+0x384>)
 8001074:	6013      	str	r3, [r2, #0]
		  if (Vfeedback > 5)
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <main+0x384>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	dd03      	ble.n	8001092 <main+0x2b2>
			  Vfeedback = 5;
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <main+0x384>)
 800108c:	4a36      	ldr	r2, [pc, #216]	; (8001168 <main+0x388>)
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e00c      	b.n	80010ac <main+0x2cc>
		  else if (Vfeedback < -5)
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <main+0x384>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800109c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d502      	bpl.n	80010ac <main+0x2cc>
			  Vfeedback = -5;
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <main+0x384>)
 80010a8:	4a30      	ldr	r2, [pc, #192]	; (800116c <main+0x38c>)
 80010aa:	601a      	str	r2, [r3, #0]
		  if(Vfeedback > 0){
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <main+0x384>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	dd5f      	ble.n	800117c <main+0x39c>
			  PWM1 = Vfeedback*19999/5.0;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <main+0x384>)
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001170 <main+0x390>
 80010c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ca:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80010ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <main+0x394>)
 80010d4:	edc3 7a00 	vstr	s15, [r3]
			  PWM2 = 0;
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <main+0x398>)
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e066      	b.n	80011b0 <main+0x3d0>
 80010e2:	bf00      	nop
 80010e4:	f3af 8000 	nop.w
 80010e8:	00000000 	.word	0x00000000
 80010ec:	40affe00 	.word	0x40affe00
 80010f0:	54442d18 	.word	0x54442d18
 80010f4:	400921fb 	.word	0x400921fb
 80010f8:	20000030 	.word	0x20000030
 80010fc:	2000038c 	.word	0x2000038c
 8001100:	200003e0 	.word	0x200003e0
 8001104:	200001c8 	.word	0x200001c8
 8001108:	200002a8 	.word	0x200002a8
 800110c:	48000400 	.word	0x48000400
 8001110:	200002f4 	.word	0x200002f4
 8001114:	20000340 	.word	0x20000340
 8001118:	2000025c 	.word	0x2000025c
 800111c:	200003f0 	.word	0x200003f0
 8001120:	322bcc77 	.word	0x322bcc77
 8001124:	2000009c 	.word	0x2000009c
 8001128:	20000418 	.word	0x20000418
 800112c:	20000468 	.word	0x20000468
 8001130:	20000000 	.word	0x20000000
 8001134:	20000494 	.word	0x20000494
 8001138:	200003dc 	.word	0x200003dc
 800113c:	200003e8 	.word	0x200003e8
 8001140:	20000498 	.word	0x20000498
 8001144:	20000480 	.word	0x20000480
 8001148:	555c725f 	.word	0x555c725f
 800114c:	20000488 	.word	0x20000488
 8001150:	20000484 	.word	0x20000484
 8001154:	16c16c17 	.word	0x16c16c17
 8001158:	40668000 	.word	0x40668000
 800115c:	20000414 	.word	0x20000414
 8001160:	2000047c 	.word	0x2000047c
 8001164:	2000046c 	.word	0x2000046c
 8001168:	40a00000 	.word	0x40a00000
 800116c:	c0a00000 	.word	0xc0a00000
 8001170:	469c3e00 	.word	0x469c3e00
 8001174:	2000048c 	.word	0x2000048c
 8001178:	20000490 	.word	0x20000490
		  }
		  else if(Vfeedback < 0){
 800117c:	4b72      	ldr	r3, [pc, #456]	; (8001348 <main+0x568>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	d511      	bpl.n	80011b0 <main+0x3d0>
			  PWM1 = 0;
 800118c:	4b6f      	ldr	r3, [pc, #444]	; (800134c <main+0x56c>)
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
			  PWM2 = Vfeedback*-19999/5.0;
 8001194:	4b6c      	ldr	r3, [pc, #432]	; (8001348 <main+0x568>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001350 <main+0x570>
 800119e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80011a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011aa:	4b6a      	ldr	r3, [pc, #424]	; (8001354 <main+0x574>)
 80011ac:	edc3 7a00 	vstr	s15, [r3]
		  }
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (int)PWM1);
 80011b0:	4b66      	ldr	r3, [pc, #408]	; (800134c <main+0x56c>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ba:	4b67      	ldr	r3, [pc, #412]	; (8001358 <main+0x578>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	ee17 2a90 	vmov	r2, s15
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (int)PWM2);
 80011c4:	4b63      	ldr	r3, [pc, #396]	; (8001354 <main+0x574>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	4b62      	ldr	r3, [pc, #392]	; (8001358 <main+0x578>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	ee17 2a90 	vmov	r2, s15
 80011d6:	639a      	str	r2, [r3, #56]	; 0x38
	  }

	  if(mode == 1){
 80011d8:	4b60      	ldr	r3, [pc, #384]	; (800135c <main+0x57c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	f47f ae62 	bne.w	8000ea6 <main+0xc6>
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 80011e2:	f001 f9e5 	bl	80025b0 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <main+0x580>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f67f ae5a 	bls.w	8000ea6 <main+0xc6>
		  {
			  timestamp = HAL_GetTick()+2;
 80011f2:	f001 f9dd 	bl	80025b0 <HAL_GetTick>
 80011f6:	4603      	mov	r3, r0
 80011f8:	3302      	adds	r3, #2
 80011fa:	4a59      	ldr	r2, [pc, #356]	; (8001360 <main+0x580>)
 80011fc:	6013      	str	r3, [r2, #0]

			  Wrapselect();
 80011fe:	f000 fdab 	bl	8001d58 <Wrapselect>
			  Vfeedback = arm_pid_f32(&PID, Error);
 8001202:	4b58      	ldr	r3, [pc, #352]	; (8001364 <main+0x584>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a58      	ldr	r2, [pc, #352]	; (8001368 <main+0x588>)
 8001208:	60ba      	str	r2, [r7, #8]
 800120a:	607b      	str	r3, [r7, #4]
    out = (S->A0 * in) +
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	edd7 7a01 	vldr	s15, [r7, #4]
 8001216:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	edd3 7a03 	vldr	s15, [r3, #12]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800122a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	edd3 6a02 	vldr	s13, [r3, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	edd3 7a04 	vldr	s15, [r3, #16]
 800123a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	615a      	str	r2, [r3, #20]
    return (out);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4a38      	ldr	r2, [pc, #224]	; (8001348 <main+0x568>)
 8001268:	6013      	str	r3, [r2, #0]
			  position = Average_ADC()/4095.0*2*M_PI;
 800126a:	f000 fc8f 	bl	8001b8c <Average_ADC>
 800126e:	4603      	mov	r3, r0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f923 	bl	80004bc <__aeabi_i2d>
 8001276:	a32e      	add	r3, pc, #184	; (adr r3, 8001330 <main+0x550>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fab2 	bl	80007e4 <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffca 	bl	8000224 <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	a327      	add	r3, pc, #156	; (adr r3, 8001338 <main+0x558>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f977 	bl	8000590 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fbcb 	bl	8000a44 <__aeabi_d2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a2e      	ldr	r2, [pc, #184]	; (800136c <main+0x58c>)
 80012b2:	6013      	str	r3, [r2, #0]
			  if (Vfeedback > 12)
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <main+0x568>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80012be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	dd03      	ble.n	80012d0 <main+0x4f0>
				  Vfeedback = 12;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <main+0x568>)
 80012ca:	4a29      	ldr	r2, [pc, #164]	; (8001370 <main+0x590>)
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e00c      	b.n	80012ea <main+0x50a>
			  else if (Vfeedback < -12)
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <main+0x568>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 80012da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	d502      	bpl.n	80012ea <main+0x50a>
				  Vfeedback = -12;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <main+0x568>)
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <main+0x594>)
 80012e8:	601a      	str	r2, [r3, #0]
			  PWM = Vfeedback*32767.0/12.0;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <main+0x568>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f8f6 	bl	80004e0 <__aeabi_f2d>
 80012f4:	a312      	add	r3, pc, #72	; (adr r3, 8001340 <main+0x560>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f949 	bl	8000590 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <main+0x598>)
 800130c:	f7ff fa6a 	bl	80007e4 <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fb4c 	bl	80009b4 <__aeabi_d2iz>
 800131c:	4603      	mov	r3, r0
 800131e:	b21a      	sxth	r2, r3
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <main+0x59c>)
 8001322:	801a      	strh	r2, [r3, #0]
			  setMotor();
 8001324:	f000 fca8 	bl	8001c78 <setMotor>
	  setposition = Average_ADC2()/4095.0*2*M_PI;
 8001328:	e5bd      	b.n	8000ea6 <main+0xc6>
 800132a:	bf00      	nop
 800132c:	f3af 8000 	nop.w
 8001330:	00000000 	.word	0x00000000
 8001334:	40affe00 	.word	0x40affe00
 8001338:	54442d18 	.word	0x54442d18
 800133c:	400921fb 	.word	0x400921fb
 8001340:	00000000 	.word	0x00000000
 8001344:	40dfffc0 	.word	0x40dfffc0
 8001348:	2000046c 	.word	0x2000046c
 800134c:	2000048c 	.word	0x2000048c
 8001350:	c69c3e00 	.word	0xc69c3e00
 8001354:	20000490 	.word	0x20000490
 8001358:	2000025c 	.word	0x2000025c
 800135c:	20000000 	.word	0x20000000
 8001360:	2000049c 	.word	0x2000049c
 8001364:	2000047c 	.word	0x2000047c
 8001368:	200003f0 	.word	0x200003f0
 800136c:	20000414 	.word	0x20000414
 8001370:	41400000 	.word	0x41400000
 8001374:	c1400000 	.word	0xc1400000
 8001378:	40280000 	.word	0x40280000
 800137c:	200003ee 	.word	0x200003ee

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	2238      	movs	r2, #56	; 0x38
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f008 f87a 	bl	8009488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f003 fb96 	bl	8004ad4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b2:	2340      	movs	r3, #64	; 0x40
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b6:	2302      	movs	r3, #2
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ba:	2302      	movs	r3, #2
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013be:	2304      	movs	r3, #4
 80013c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013c2:	2355      	movs	r3, #85	; 0x55
 80013c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fc30 	bl	8004c3c <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013e2:	f000 fd85 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2303      	movs	r3, #3
 80013ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2104      	movs	r1, #4
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 ff2e 	bl	8005260 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800140a:	f000 fd71 	bl	8001ef0 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	; 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2220      	movs	r2, #32
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f008 f829 	bl	8009488 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001438:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800143c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001440:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001444:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <MX_ADC1_Init+0xe8>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <MX_ADC1_Init+0xe8>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001460:	2204      	movs	r2, #4
 8001462:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <MX_ADC1_Init+0xe8>)
 800146c:	2201      	movs	r2, #1
 800146e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001472:	2201      	movs	r2, #1
 8001474:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001486:	2200      	movs	r2, #0
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_ADC1_Init+0xe8>)
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_ADC1_Init+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_ADC1_Init+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a0:	4817      	ldr	r0, [pc, #92]	; (8001500 <MX_ADC1_Init+0xe8>)
 80014a2:	f001 fad5 	bl	8002a50 <HAL_ADC_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014ac:	f000 fd20 	bl	8001ef0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4811      	ldr	r0, [pc, #68]	; (8001500 <MX_ADC1_Init+0xe8>)
 80014bc:	f002 fbf4 	bl	8003ca8 <HAL_ADCEx_MultiModeConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014c6:	f000 fd13 	bl	8001ef0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_ADC1_Init+0xec>)
 80014cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ce:	2306      	movs	r3, #6
 80014d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014d6:	237f      	movs	r3, #127	; 0x7f
 80014d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014da:	2304      	movs	r3, #4
 80014dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <MX_ADC1_Init+0xe8>)
 80014e8:	f001 fd60 	bl	8002fac <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014f2:	f000 fcfd 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	3730      	adds	r7, #48	; 0x30
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000030 	.word	0x20000030
 8001504:	04300002 	.word	0x04300002

08001508 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2220      	movs	r2, #32
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f007 ffb7 	bl	8009488 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <MX_ADC2_Init+0xc0>)
 800151c:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <MX_ADC2_Init+0xc4>)
 800151e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001526:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <MX_ADC2_Init+0xc0>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <MX_ADC2_Init+0xc0>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001542:	2204      	movs	r2, #4
 8001544:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001548:	2200      	movs	r2, #0
 800154a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_ADC2_Init+0xc0>)
 800154e:	2201      	movs	r2, #1
 8001550:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001554:	2201      	movs	r2, #1
 8001556:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_ADC2_Init+0xc0>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001562:	2200      	movs	r2, #0
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_ADC2_Init+0xc0>)
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001576:	2200      	movs	r2, #0
 8001578:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_ADC2_Init+0xc0>)
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001582:	4811      	ldr	r0, [pc, #68]	; (80015c8 <MX_ADC2_Init+0xc0>)
 8001584:	f001 fa64 	bl	8002a50 <HAL_ADC_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800158e:	f000 fcaf 	bl	8001ef0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_ADC2_Init+0xc8>)
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001596:	2306      	movs	r3, #6
 8001598:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800159e:	237f      	movs	r3, #127	; 0x7f
 80015a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015a2:	2304      	movs	r3, #4
 80015a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_ADC2_Init+0xc0>)
 80015b0:	f001 fcfc 	bl	8002fac <HAL_ADC_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80015ba:	f000 fc99 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000009c 	.word	0x2000009c
 80015cc:	50000100 	.word	0x50000100
 80015d0:	47520000 	.word	0x47520000

080015d4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 80015da:	4a22      	ldr	r2, [pc, #136]	; (8001664 <MX_LPUART1_UART_Init+0x90>)
 80015dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 8001612:	2200      	movs	r2, #0
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 8001618:	f005 fdd4 	bl	80071c4 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001622:	f000 fc65 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001626:	2100      	movs	r1, #0
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 800162a:	f007 fe2c 	bl	8009286 <HAL_UARTEx_SetTxFifoThreshold>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001634:	f000 fc5c 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 800163c:	f007 fe61 	bl	8009302 <HAL_UARTEx_SetRxFifoThreshold>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001646:	f000 fc53 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_LPUART1_UART_Init+0x8c>)
 800164c:	f007 fde2 	bl	8009214 <HAL_UARTEx_DisableFifoMode>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001656:	f000 fc4b 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200001c8 	.word	0x200001c8
 8001664:	40008000 	.word	0x40008000

08001668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <MX_TIM2_Init+0x100>)
 800169c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <MX_TIM2_Init+0x100>)
 80016a4:	22a9      	movs	r2, #169	; 0xa9
 80016a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <MX_TIM2_Init+0x100>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <MX_TIM2_Init+0x100>)
 80016b0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <MX_TIM2_Init+0x100>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <MX_TIM2_Init+0x100>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c2:	4829      	ldr	r0, [pc, #164]	; (8001768 <MX_TIM2_Init+0x100>)
 80016c4:	f004 fa36 	bl	8005b34 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80016ce:	f000 fc0f 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016dc:	4619      	mov	r1, r3
 80016de:	4822      	ldr	r0, [pc, #136]	; (8001768 <MX_TIM2_Init+0x100>)
 80016e0:	f004 ff24 	bl	800652c <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016ea:	f000 fc01 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016ee:	481e      	ldr	r0, [pc, #120]	; (8001768 <MX_TIM2_Init+0x100>)
 80016f0:	f004 fb60 	bl	8005db4 <HAL_TIM_PWM_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016fa:	f000 fbf9 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4816      	ldr	r0, [pc, #88]	; (8001768 <MX_TIM2_Init+0x100>)
 800170e:	f005 fcc3 	bl	8007098 <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001718:	f000 fbea 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171c:	2360      	movs	r3, #96	; 0x60
 800171e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM2_Init+0x100>)
 8001734:	f004 fde6 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800173e:	f000 fbd7 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	2204      	movs	r2, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_TIM2_Init+0x100>)
 800174a:	f004 fddb 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001754:	f000 fbcc 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_TIM2_Init+0x100>)
 800175a:	f000 fddf 	bl	800231c <HAL_TIM_MspPostInit>

}
 800175e:	bf00      	nop
 8001760:	3738      	adds	r7, #56	; 0x38
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000025c 	.word	0x2000025c

0800176c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	; 0x38
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017a0:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <MX_TIM3_Init+0xec>)
 80017a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017a6:	22a9      	movs	r2, #169	; 0xa9
 80017a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017b2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c4:	4823      	ldr	r0, [pc, #140]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017c6:	f004 f9b5 	bl	8005b34 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017d0:	f000 fb8e 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017de:	4619      	mov	r1, r3
 80017e0:	481c      	ldr	r0, [pc, #112]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017e2:	f004 fea3 	bl	800652c <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017ec:	f000 fb80 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017f0:	4818      	ldr	r0, [pc, #96]	; (8001854 <MX_TIM3_Init+0xe8>)
 80017f2:	f004 fadf 	bl	8005db4 <HAL_TIM_PWM_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017fc:	f000 fb78 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	4811      	ldr	r0, [pc, #68]	; (8001854 <MX_TIM3_Init+0xe8>)
 8001810:	f005 fc42 	bl	8007098 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800181a:	f000 fb69 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181e:	2360      	movs	r3, #96	; 0x60
 8001820:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	4619      	mov	r1, r3
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <MX_TIM3_Init+0xe8>)
 8001836:	f004 fd65 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001840:	f000 fb56 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001844:	4803      	ldr	r0, [pc, #12]	; (8001854 <MX_TIM3_Init+0xe8>)
 8001846:	f000 fd69 	bl	800231c <HAL_TIM_MspPostInit>

}
 800184a:	bf00      	nop
 800184c:	3738      	adds	r7, #56	; 0x38
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002a8 	.word	0x200002a8
 8001858:	40000400 	.word	0x40000400

0800185c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2224      	movs	r2, #36	; 0x24
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f007 fe0c 	bl	8009488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <MX_TIM4_Init+0xa4>)
 800187c:	4a21      	ldr	r2, [pc, #132]	; (8001904 <MX_TIM4_Init+0xa8>)
 800187e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_TIM4_Init+0xa4>)
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MX_TIM4_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64511;
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_TIM4_Init+0xa4>)
 800188e:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001892:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_TIM4_Init+0xa4>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <MX_TIM4_Init+0xa4>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018a0:	2303      	movs	r3, #3
 80018a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018b8:	2301      	movs	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_TIM4_Init+0xa4>)
 80018cc:	f004 fbe6 	bl	800609c <HAL_TIM_Encoder_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80018d6:	f000 fb0b 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM4_Init+0xa4>)
 80018e8:	f005 fbd6 	bl	8007098 <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018f2:	f000 fafd 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3730      	adds	r7, #48	; 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002f4 	.word	0x200002f4
 8001904:	40000800 	.word	0x40000800

08001908 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <MX_TIM5_Init+0x94>)
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <MX_TIM5_Init+0x98>)
 800192a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_TIM5_Init+0x94>)
 800192e:	22a9      	movs	r2, #169	; 0xa9
 8001930:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <MX_TIM5_Init+0x94>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <MX_TIM5_Init+0x94>)
 800193a:	f04f 32ff 	mov.w	r2, #4294967295
 800193e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_TIM5_Init+0x94>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <MX_TIM5_Init+0x94>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800194c:	4813      	ldr	r0, [pc, #76]	; (800199c <MX_TIM5_Init+0x94>)
 800194e:	f004 f8f1 	bl	8005b34 <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001958:	f000 faca 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001960:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	4619      	mov	r1, r3
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_TIM5_Init+0x94>)
 800196a:	f004 fddf 	bl	800652c <HAL_TIM_ConfigClockSource>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001974:	f000 fabc 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_TIM5_Init+0x94>)
 8001986:	f005 fb87 	bl	8007098 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001990:	f000 faae 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000340 	.word	0x20000340
 80019a0:	40000c00 	.word	0x40000c00

080019a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_DMA_Init+0x78>)
 80019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <MX_DMA_Init+0x78>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6493      	str	r3, [r2, #72]	; 0x48
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_DMA_Init+0x78>)
 80019b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_DMA_Init+0x78>)
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <MX_DMA_Init+0x78>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6493      	str	r3, [r2, #72]	; 0x48
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_DMA_Init+0x78>)
 80019d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_DMA_Init+0x78>)
 80019dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <MX_DMA_Init+0x78>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6493      	str	r3, [r2, #72]	; 0x48
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <MX_DMA_Init+0x78>)
 80019e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200b      	movs	r0, #11
 80019f8:	f002 fb39 	bl	800406e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019fc:	200b      	movs	r0, #11
 80019fe:	f002 fb50 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2038      	movs	r0, #56	; 0x38
 8001a08:	f002 fb31 	bl	800406e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001a0c:	2038      	movs	r0, #56	; 0x38
 8001a0e:	f002 fb48 	bl	80040a2 <HAL_NVIC_EnableIRQ>

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4e:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <MX_GPIO_Init+0xfc>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	21a0      	movs	r1, #160	; 0xa0
 8001a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9e:	f002 ffcf 	bl	8004a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2140      	movs	r1, #64	; 0x40
 8001aa6:	481e      	ldr	r0, [pc, #120]	; (8001b20 <MX_GPIO_Init+0x100>)
 8001aa8:	f002 ffca 	bl	8004a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4818      	ldr	r0, [pc, #96]	; (8001b24 <MX_GPIO_Init+0x104>)
 8001ac4:	f002 fe3a 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ac8:	23a0      	movs	r3, #160	; 0xa0
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f002 fe2b 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4808      	ldr	r0, [pc, #32]	; (8001b20 <MX_GPIO_Init+0x100>)
 8001afe:	f002 fe1d 	bl	800473c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2028      	movs	r0, #40	; 0x28
 8001b08:	f002 fab1 	bl	800406e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b0c:	2028      	movs	r0, #40	; 0x28
 8001b0e:	f002 fac8 	bl	80040a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000400 	.word	0x48000400
 8001b24:	48000800 	.word	0x48000800

08001b28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b38:	d122      	bne.n	8001b80 <HAL_GPIO_EXTI_Callback+0x58>
	{
		if(mode == 1){
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d109      	bne.n	8001b56 <HAL_GPIO_EXTI_Callback+0x2e>
			mode = 2;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b44:	2202      	movs	r2, #2
 8001b46:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b50:	f002 ff76 	bl	8004a40 <HAL_GPIO_WritePin>
		else if(mode == 3){
			mode = 1;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		}
	}
}
 8001b54:	e014      	b.n	8001b80 <HAL_GPIO_EXTI_Callback+0x58>
		else if(mode == 2){
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d103      	bne.n	8001b66 <HAL_GPIO_EXTI_Callback+0x3e>
			mode = 3;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b60:	2203      	movs	r2, #3
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	e00c      	b.n	8001b80 <HAL_GPIO_EXTI_Callback+0x58>
		else if(mode == 3){
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d108      	bne.n	8001b80 <HAL_GPIO_EXTI_Callback+0x58>
			mode = 1;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	2120      	movs	r1, #32
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7c:	f002 ff60 	bl	8004a40 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000000 	.word	0x20000000

08001b8c <Average_ADC>:

uint16_t Average_ADC()
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
	uint16_t average = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i<40; i++){
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	e00a      	b.n	8001bb6 <Average_ADC+0x2a>
		sum+=ADC_RawRead[i];
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <Average_ADC+0x4c>)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<40; i++){
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b27      	cmp	r3, #39	; 0x27
 8001bba:	ddf1      	ble.n	8001ba0 <Average_ADC+0x14>
	}
	average = sum/40;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <Average_ADC+0x50>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	80fb      	strh	r3, [r7, #6]
	return average;
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000038c 	.word	0x2000038c
 8001bdc:	cccccccd 	.word	0xcccccccd

08001be0 <Average_ADC2>:

uint16_t Average_ADC2()
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
	uint16_t average = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i<40; i++){
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	e00a      	b.n	8001c0a <Average_ADC2+0x2a>
		sum+=ADC_RawRead2[i];
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <Average_ADC2+0x4c>)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<40; i++){
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b27      	cmp	r3, #39	; 0x27
 8001c0e:	ddf1      	ble.n	8001bf4 <Average_ADC2+0x14>
	}
	average = sum/40;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <Average_ADC2+0x50>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	095b      	lsrs	r3, r3, #5
 8001c1a:	80fb      	strh	r3, [r7, #6]
	return average;
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000418 	.word	0x20000418
 8001c30:	cccccccd 	.word	0xcccccccd

08001c34 <HAL_UART_RxCpltCallback>:
	//start UART in Interrupt Mode
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	//interupt
	if(huart == &hlpuart1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_UART_RxCpltCallback+0x38>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d10f      	bne.n	8001c64 <HAL_UART_RxCpltCallback+0x30>
	{
		PWM = RxBuffer[1] | (RxBuffer[2] << 8);
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_UART_RxCpltCallback+0x3c>)
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_UART_RxCpltCallback+0x3c>)
 8001c4c:	789b      	ldrb	r3, [r3, #2]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_UART_RxCpltCallback+0x40>)
 8001c58:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <HAL_UART_RxCpltCallback+0x3c>)
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <HAL_UART_RxCpltCallback+0x38>)
 8001c60:	f005 fb8e 	bl	8007380 <HAL_UART_Receive_IT>
	}
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200001c8 	.word	0x200001c8
 8001c70:	200003e0 	.word	0x200003e0
 8001c74:	200003ee 	.word	0x200003ee

08001c78 <setMotor>:

void setMotor()
{
 8001c78:	b598      	push	{r3, r4, r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	if(PWM > 0){
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <setMotor+0xc8>)
 8001c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	dd2a      	ble.n	8001cdc <setMotor+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f002 fed7 	bl	8004a40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	2140      	movs	r1, #64	; 0x40
 8001c96:	482b      	ldr	r0, [pc, #172]	; (8001d44 <setMotor+0xcc>)
 8001c98:	f002 fed2 	bl	8004a40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*19999/32767.0);
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <setMotor+0xc8>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc05 	bl	80004bc <__aeabi_i2d>
 8001cb2:	a321      	add	r3, pc, #132	; (adr r3, 8001d38 <setMotor+0xc0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fd94 	bl	80007e4 <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4921      	ldr	r1, [pc, #132]	; (8001d48 <setMotor+0xd0>)
 8001cc2:	680c      	ldr	r4, [r1, #0]
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe fe9c 	bl	8000a04 <__aeabi_d2uiz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	6363      	str	r3, [r4, #52]	; 0x34
		a++;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <setMotor+0xd4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <setMotor+0xd4>)
 8001cd8:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*(-19999)/32767.0);
		a++;
	}
}
 8001cda:	e028      	b.n	8001d2e <setMotor+0xb6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2140      	movs	r1, #64	; 0x40
 8001ce0:	4818      	ldr	r0, [pc, #96]	; (8001d44 <setMotor+0xcc>)
 8001ce2:	f002 fead 	bl	8004a40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f002 fea7 	bl	8004a40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWM*(-19999)/32767.0);
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <setMotor+0xc8>)
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <setMotor+0xd8>)
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fbdb 	bl	80004bc <__aeabi_i2d>
 8001d06:	a30c      	add	r3, pc, #48	; (adr r3, 8001d38 <setMotor+0xc0>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fd6a 	bl	80007e4 <__aeabi_ddiv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <setMotor+0xd0>)
 8001d16:	680c      	ldr	r4, [r1, #0]
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe fe72 	bl	8000a04 <__aeabi_d2uiz>
 8001d20:	4603      	mov	r3, r0
 8001d22:	6363      	str	r3, [r4, #52]	; 0x34
		a++;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <setMotor+0xd4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <setMotor+0xd4>)
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	bd98      	pop	{r3, r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	f3af 8000 	nop.w
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	40dfffc0 	.word	0x40dfffc0
 8001d40:	200003ee 	.word	0x200003ee
 8001d44:	48000400 	.word	0x48000400
 8001d48:	200002a8 	.word	0x200002a8
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	ffffb1e1 	.word	0xffffb1e1
 8001d54:	00000000 	.word	0x00000000

08001d58 <Wrapselect>:

void Wrapselect()
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	ErrorNormal = setposition - position;
 8001d5c:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <Wrapselect+0x180>)
 8001d5e:	ed93 7a00 	vldr	s14, [r3]
 8001d62:	4b5e      	ldr	r3, [pc, #376]	; (8001edc <Wrapselect+0x184>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6c:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <Wrapselect+0x188>)
 8001d6e:	edc3 7a00 	vstr	s15, [r3]
	ErrorWrapPlus = setposition - (2*M_PI + position);
 8001d72:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <Wrapselect+0x180>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbb2 	bl	80004e0 <__aeabi_f2d>
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	460d      	mov	r5, r1
 8001d80:	4b56      	ldr	r3, [pc, #344]	; (8001edc <Wrapselect+0x184>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbab 	bl	80004e0 <__aeabi_f2d>
 8001d8a:	a351      	add	r3, pc, #324	; (adr r3, 8001ed0 <Wrapselect+0x178>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fa48 	bl	8000224 <__adddf3>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	f7fe fa40 	bl	8000220 <__aeabi_dsub>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fe4c 	bl	8000a44 <__aeabi_d2f>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a4d      	ldr	r2, [pc, #308]	; (8001ee4 <Wrapselect+0x18c>)
 8001db0:	6013      	str	r3, [r2, #0]
	ErrorWrapMinus = setposition - (2*M_PI - position);
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <Wrapselect+0x180>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fb92 	bl	80004e0 <__aeabi_f2d>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <Wrapselect+0x184>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fb8b 	bl	80004e0 <__aeabi_f2d>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	a140      	add	r1, pc, #256	; (adr r1, 8001ed0 <Wrapselect+0x178>)
 8001dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dd4:	f7fe fa24 	bl	8000220 <__aeabi_dsub>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fa1e 	bl	8000220 <__aeabi_dsub>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fe2a 	bl	8000a44 <__aeabi_d2f>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <Wrapselect+0x190>)
 8001df4:	6013      	str	r3, [r2, #0]
	if(fabsf(ErrorNormal) <= fabsf(ErrorWrapPlus) && fabsf(ErrorNormal) <= fabsf(ErrorWrapMinus))
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <Wrapselect+0x188>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e00:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <Wrapselect+0x18c>)
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	eef0 7ae7 	vabs.f32	s15, s15
 8001e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	d813      	bhi.n	8001e3c <Wrapselect+0xe4>
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <Wrapselect+0x188>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e1e:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <Wrapselect+0x190>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	eef0 7ae7 	vabs.f32	s15, s15
 8001e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	d804      	bhi.n	8001e3c <Wrapselect+0xe4>
	{
		Error = ErrorNormal;
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <Wrapselect+0x188>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2d      	ldr	r2, [pc, #180]	; (8001eec <Wrapselect+0x194>)
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e047      	b.n	8001ecc <Wrapselect+0x174>
	}
	else if(fabsf(ErrorWrapPlus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapPlus) <= fabsf(ErrorWrapMinus))
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <Wrapselect+0x18c>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <Wrapselect+0x188>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	eef0 7ae7 	vabs.f32	s15, s15
 8001e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e58:	d813      	bhi.n	8001e82 <Wrapselect+0x12a>
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <Wrapselect+0x18c>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <Wrapselect+0x190>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	eef0 7ae7 	vabs.f32	s15, s15
 8001e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d804      	bhi.n	8001e82 <Wrapselect+0x12a>
	{
		Error = ErrorWrapPlus;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <Wrapselect+0x18c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <Wrapselect+0x194>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e024      	b.n	8001ecc <Wrapselect+0x174>
	}
	else if(fabsf(ErrorWrapMinus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapMinus) <= fabsf(ErrorWrapPlus))
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <Wrapselect+0x190>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <Wrapselect+0x188>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	eef0 7ae7 	vabs.f32	s15, s15
 8001e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d900      	bls.n	8001ea2 <Wrapselect+0x14a>
	{
		Error = ErrorWrapMinus;
	}
}
 8001ea0:	e014      	b.n	8001ecc <Wrapselect+0x174>
	else if(fabsf(ErrorWrapMinus) <= fabsf(ErrorNormal) && fabsf(ErrorWrapMinus) <= fabsf(ErrorWrapPlus))
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <Wrapselect+0x190>)
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	eeb0 7ae7 	vabs.f32	s14, s15
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <Wrapselect+0x18c>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	eef0 7ae7 	vabs.f32	s15, s15
 8001eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	d900      	bls.n	8001ec2 <Wrapselect+0x16a>
}
 8001ec0:	e004      	b.n	8001ecc <Wrapselect+0x174>
		Error = ErrorWrapMinus;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <Wrapselect+0x190>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <Wrapselect+0x194>)
 8001ec8:	6013      	str	r3, [r2, #0]
}
 8001eca:	e7ff      	b.n	8001ecc <Wrapselect+0x174>
 8001ecc:	bf00      	nop
 8001ece:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed0:	54442d18 	.word	0x54442d18
 8001ed4:	401921fb 	.word	0x401921fb
 8001ed8:	20000468 	.word	0x20000468
 8001edc:	20000414 	.word	0x20000414
 8001ee0:	20000470 	.word	0x20000470
 8001ee4:	20000474 	.word	0x20000474
 8001ee8:	20000478 	.word	0x20000478
 8001eec:	2000047c 	.word	0x2000047c

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>
	...

08001efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_MspInit+0x44>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_MspInit+0x44>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_MspInit+0x44>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_MspInit+0x44>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_MspInit+0x44>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_MspInit+0x44>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f32:	f002 fe73 	bl	8004c1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0a0      	sub	sp, #128	; 0x80
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	2254      	movs	r2, #84	; 0x54
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 fa8f 	bl	8009488 <memset>
  if(hadc->Instance==ADC1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f72:	d169      	bne.n	8002048 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f7a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 fb87 	bl	8005698 <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001f90:	f7ff ffae 	bl	8001ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f94:	4b65      	ldr	r3, [pc, #404]	; (800212c <HAL_ADC_MspInit+0x1e8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a64      	ldr	r2, [pc, #400]	; (800212c <HAL_ADC_MspInit+0x1e8>)
 8001f9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_ADC_MspInit+0x1e8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10b      	bne.n	8001fbe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fa6:	4b62      	ldr	r3, [pc, #392]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a61      	ldr	r2, [pc, #388]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 8001fac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a5b      	ldr	r2, [pc, #364]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fec:	f002 fba6 	bl	800473c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8001ff2:	4a51      	ldr	r2, [pc, #324]	; (8002138 <HAL_ADC_MspInit+0x1f4>)
 8001ff4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ff6:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002002:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8002010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8002018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800201e:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8002020:	2220      	movs	r2, #32
 8002022:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002024:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800202a:	4842      	ldr	r0, [pc, #264]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 800202c:	f002 f854 	bl	80040d8 <HAL_DMA_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002036:	f7ff ff5b 	bl	8001ef0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a3d      	ldr	r2, [pc, #244]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
 8002040:	4a3c      	ldr	r2, [pc, #240]	; (8002134 <HAL_ADC_MspInit+0x1f0>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002046:	e06d      	b.n	8002124 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3b      	ldr	r2, [pc, #236]	; (800213c <HAL_ADC_MspInit+0x1f8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d168      	bne.n	8002124 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002056:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002058:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800205c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205e:	f107 0318 	add.w	r3, r7, #24
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fb18 	bl	8005698 <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800206e:	f7ff ff3f 	bl	8001ef0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_ADC_MspInit+0x1e8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	4a2c      	ldr	r2, [pc, #176]	; (800212c <HAL_ADC_MspInit+0x1e8>)
 800207a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_ADC_MspInit+0x1e8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d10b      	bne.n	800209c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002084:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 800208a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800208e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	4a23      	ldr	r2, [pc, #140]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_ADC_MspInit+0x1ec>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020b4:	2310      	movs	r3, #16
 80020b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b8:	2303      	movs	r3, #3
 80020ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ca:	f002 fb37 	bl	800473c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 80020d0:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_ADC_MspInit+0x200>)
 80020d2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 80020ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 80020f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020fa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 80020fe:	2220      	movs	r2, #32
 8002100:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 800210a:	f001 ffe5 	bl	80040d8 <HAL_DMA_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8002114:	f7ff feec 	bl	8001ef0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_ADC_MspInit+0x1fc>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002124:	bf00      	nop
 8002126:	3780      	adds	r7, #128	; 0x80
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200004a0 	.word	0x200004a0
 8002130:	40021000 	.word	0x40021000
 8002134:	20000108 	.word	0x20000108
 8002138:	40020008 	.word	0x40020008
 800213c:	50000100 	.word	0x50000100
 8002140:	20000168 	.word	0x20000168
 8002144:	40020408 	.word	0x40020408

08002148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b09e      	sub	sp, #120	; 0x78
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	2254      	movs	r2, #84	; 0x54
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f007 f98d 	bl	8009488 <memset>
  if(huart->Instance==LPUART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <HAL_UART_MspInit+0xb8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d13e      	bne.n	80021f6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002178:	2320      	movs	r3, #32
 800217a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	4618      	mov	r0, r3
 8002186:	f003 fa87 	bl	8005698 <HAL_RCCEx_PeriphCLKConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002190:	f7ff feae 	bl	8001ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_UART_MspInit+0xbc>)
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_UART_MspInit+0xbc>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	65d3      	str	r3, [r2, #92]	; 0x5c
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_UART_MspInit+0xbc>)
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_UART_MspInit+0xbc>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_UART_MspInit+0xbc>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_UART_MspInit+0xbc>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80021c4:	230c      	movs	r3, #12
 80021c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80021d4:	230c      	movs	r3, #12
 80021d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021dc:	4619      	mov	r1, r3
 80021de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e2:	f002 faab 	bl	800473c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	205b      	movs	r0, #91	; 0x5b
 80021ec:	f001 ff3f 	bl	800406e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80021f0:	205b      	movs	r0, #91	; 0x5b
 80021f2:	f001 ff56 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80021f6:	bf00      	nop
 80021f8:	3778      	adds	r7, #120	; 0x78
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40008000 	.word	0x40008000
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d10c      	bne.n	8002234 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002232:	e022      	b.n	800227a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <HAL_TIM_Base_MspInit+0x84>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10c      	bne.n	8002258 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a11      	ldr	r2, [pc, #68]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
}
 8002256:	e010      	b.n	800227a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <HAL_TIM_Base_MspInit+0x88>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10b      	bne.n	800227a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	4a08      	ldr	r2, [pc, #32]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_TIM_Base_MspInit+0x80>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
}
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40000400 	.word	0x40000400
 8002290:	40000c00 	.word	0x40000c00

08002294 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_TIM_Encoder_MspInit+0x80>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d129      	bne.n	800230a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_TIM_Encoder_MspInit+0x84>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	4a17      	ldr	r2, [pc, #92]	; (8002318 <HAL_TIM_Encoder_MspInit+0x84>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6593      	str	r3, [r2, #88]	; 0x58
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_TIM_Encoder_MspInit+0x84>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_TIM_Encoder_MspInit+0x84>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_TIM_Encoder_MspInit+0x84>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_TIM_Encoder_MspInit+0x84>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80022f8:	230a      	movs	r3, #10
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f002 fa19 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40000800 	.word	0x40000800
 8002318:	40021000 	.word	0x40021000

0800231c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d11e      	bne.n	800237c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_TIM_MspPostInit+0xac>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_TIM_MspPostInit+0xac>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_TIM_MspPostInit+0xac>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002356:	f248 0302 	movw	r3, #32770	; 0x8002
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002368:	2301      	movs	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002376:	f002 f9e1 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800237a:	e021      	b.n	80023c0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d11c      	bne.n	80023c0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <HAL_TIM_MspPostInit+0xac>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <HAL_TIM_MspPostInit+0xac>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_TIM_MspPostInit+0xac>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800239e:	2340      	movs	r3, #64	; 0x40
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ae:	2302      	movs	r3, #2
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023bc:	f002 f9be 	bl	800473c <HAL_GPIO_Init>
}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40000400 	.word	0x40000400

080023d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023d4:	e7fe      	b.n	80023d4 <NMI_Handler+0x4>

080023d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <HardFault_Handler+0x4>

080023dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <MemManage_Handler+0x4>

080023e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <UsageFault_Handler+0x4>

080023ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241c:	f000 f8b6 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <DMA1_Channel1_IRQHandler+0x10>)
 800242a:	f002 f838 	bl	800449e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000108 	.word	0x20000108

08002438 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800243c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002440:	f002 fb30 	bl	8004aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}

08002448 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <DMA2_Channel1_IRQHandler+0x10>)
 800244e:	f002 f826 	bl	800449e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000168 	.word	0x20000168

0800245c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <LPUART1_IRQHandler+0x10>)
 8002462:	f004 ffd9 	bl	8007418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200001c8 	.word	0x200001c8

08002470 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <SystemInit+0x20>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <SystemInit+0x20>)
 800247c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002496:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002498:	f7ff ffea 	bl	8002470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800249e:	490d      	ldr	r1, [pc, #52]	; (80024d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <LoopForever+0xe>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b4:	4c0a      	ldr	r4, [pc, #40]	; (80024e0 <LoopForever+0x16>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c2:	f006 ffe9 	bl	8009498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c6:	f7fe fc8b 	bl	8000de0 <main>

080024ca <LoopForever>:

LoopForever:
    b LoopForever
 80024ca:	e7fe      	b.n	80024ca <LoopForever>
  ldr   r0, =_estack
 80024cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80024d8:	08009548 	.word	0x08009548
  ldr r2, =_sbss
 80024dc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80024e0:	200004a8 	.word	0x200004a8

080024e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC1_2_IRQHandler>

080024e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f001 fdb1 	bl	8004058 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f6:	2000      	movs	r0, #0
 80024f8:	f000 f80e 	bl	8002518 <HAL_InitTick>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	e001      	b.n	800250c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002508:	f7ff fcf8 	bl	8001efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800250c:	79fb      	ldrb	r3, [r7, #7]

}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_InitTick+0x68>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d022      	beq.n	8002572 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_InitTick+0x6c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_InitTick+0x68>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002538:	fbb1 f3f3 	udiv	r3, r1, r3
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	4618      	mov	r0, r3
 8002542:	f001 fdbc 	bl	80040be <HAL_SYSTICK_Config>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10f      	bne.n	800256c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b0f      	cmp	r3, #15
 8002550:	d809      	bhi.n	8002566 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002552:	2200      	movs	r2, #0
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	f04f 30ff 	mov.w	r0, #4294967295
 800255a:	f001 fd88 	bl	800406e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_InitTick+0x70>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e007      	b.n	8002576 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e004      	b.n	8002576 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000010 	.word	0x20000010
 8002584:	20000008 	.word	0x20000008
 8002588:	2000000c 	.word	0x2000000c

0800258c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_IncTick+0x1c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_IncTick+0x20>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4413      	add	r3, r2
 800259a:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <HAL_IncTick+0x1c>)
 800259c:	6013      	str	r3, [r2, #0]
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	200004a4 	.word	0x200004a4
 80025ac:	20000010 	.word	0x20000010

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_GetTick+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	200004a4 	.word	0x200004a4

080025c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3360      	adds	r3, #96	; 0x60
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <LL_ADC_SetOffset+0x44>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	4313      	orrs	r3, r2
 8002660:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	03fff000 	.word	0x03fff000

08002678 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3360      	adds	r3, #96	; 0x60
 8002686:	461a      	mov	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3360      	adds	r3, #96	; 0x60
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026da:	b480      	push	{r7}
 80026dc:	b087      	sub	sp, #28
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3360      	adds	r3, #96	; 0x60
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	431a      	orrs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	615a      	str	r2, [r3, #20]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002792:	b480      	push	{r7}
 8002794:	b087      	sub	sp, #28
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3330      	adds	r3, #48	; 0x30
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	4413      	add	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	211f      	movs	r1, #31
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	401a      	ands	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	f003 011f 	and.w	r1, r3, #31
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b087      	sub	sp, #28
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3314      	adds	r3, #20
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0e5b      	lsrs	r3, r3, #25
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	4413      	add	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	0d1b      	lsrs	r3, r3, #20
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2107      	movs	r1, #7
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	401a      	ands	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	0d1b      	lsrs	r3, r3, #20
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	431a      	orrs	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	43db      	mvns	r3, r3
 800285a:	401a      	ands	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0318 	and.w	r3, r3, #24
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002864:	40d9      	lsrs	r1, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	400b      	ands	r3, r1
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	431a      	orrs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	0007ffff 	.word	0x0007ffff

08002888 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 031f 	and.w	r3, r3, #31
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6093      	str	r3, [r2, #8]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028dc:	d101      	bne.n	80028e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002904:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292c:	d101      	bne.n	8002932 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800297c:	f043 0202 	orr.w	r2, r3, #2
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <LL_ADC_IsEnabled+0x18>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <LL_ADC_IsEnabled+0x1a>
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d101      	bne.n	80029ce <LL_ADC_IsDisableOngoing+0x18>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_ADC_IsDisableOngoing+0x1a>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029f0:	f043 0204 	orr.w	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d101      	bne.n	8002a1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d101      	bne.n	8002a42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e1a9      	b.n	8002dbe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fa63 	bl	8001f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff19 	bl	80028c8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff feff 	bl	80028a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff34 	bl	8002918 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d115      	bne.n	8002ae2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff18 	bl	80028f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac0:	4b9c      	ldr	r3, [pc, #624]	; (8002d34 <HAL_ADC_Init+0x2e4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	4a9c      	ldr	r2, [pc, #624]	; (8002d38 <HAL_ADC_Init+0x2e8>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	3301      	adds	r3, #1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff16 	bl	8002918 <LL_ADC_IsInternalRegulatorEnabled>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	f043 0210 	orr.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff76 	bl	8002a04 <LL_ADC_REG_IsConversionOngoing>
 8002b18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 8142 	bne.w	8002dac <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 813e 	bne.w	8002dac <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b38:	f043 0202 	orr.w	r2, r3, #2
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff23 	bl	8002990 <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d141      	bne.n	8002bd4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_Init+0x114>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a77      	ldr	r2, [pc, #476]	; (8002d3c <HAL_ADC_Init+0x2ec>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10f      	bne.n	8002b84 <HAL_ADC_Init+0x134>
 8002b64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b68:	f7ff ff12 	bl	8002990 <LL_ADC_IsEnabled>
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	4873      	ldr	r0, [pc, #460]	; (8002d3c <HAL_ADC_Init+0x2ec>)
 8002b70:	f7ff ff0e 	bl	8002990 <LL_ADC_IsEnabled>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4323      	orrs	r3, r4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e012      	b.n	8002baa <HAL_ADC_Init+0x15a>
 8002b84:	486e      	ldr	r0, [pc, #440]	; (8002d40 <HAL_ADC_Init+0x2f0>)
 8002b86:	f7ff ff03 	bl	8002990 <LL_ADC_IsEnabled>
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	486d      	ldr	r0, [pc, #436]	; (8002d44 <HAL_ADC_Init+0x2f4>)
 8002b8e:	f7ff feff 	bl	8002990 <LL_ADC_IsEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	431c      	orrs	r4, r3
 8002b96:	486c      	ldr	r0, [pc, #432]	; (8002d48 <HAL_ADC_Init+0x2f8>)
 8002b98:	f7ff fefa 	bl	8002990 <LL_ADC_IsEnabled>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4323      	orrs	r3, r4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_Init+0x172>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5f      	ldr	r2, [pc, #380]	; (8002d3c <HAL_ADC_Init+0x2ec>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_Init+0x176>
 8002bc2:	4a62      	ldr	r2, [pc, #392]	; (8002d4c <HAL_ADC_Init+0x2fc>)
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_Init+0x178>
 8002bc6:	4a62      	ldr	r2, [pc, #392]	; (8002d50 <HAL_ADC_Init+0x300>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f7ff fcfa 	bl	80025c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7f5b      	ldrb	r3, [r3, #29]
 8002bd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002be4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002bea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d106      	bne.n	8002c10 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	045b      	lsls	r3, r3, #17
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d009      	beq.n	8002c2c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <HAL_ADC_Init+0x304>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fee5 	bl	8002a2a <LL_ADC_INJ_IsConversionOngoing>
 8002c60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d17f      	bne.n	8002d68 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d17c      	bne.n	8002d68 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8a:	f023 0302 	bic.w	r3, r3, #2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6911      	ldr	r1, [r2, #16]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cce:	e013      	b.n	8002cf8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d12a      	bne.n	8002d58 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d24:	430a      	orrs	r2, r1
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	e019      	b.n	8002d68 <HAL_ADC_Init+0x318>
 8002d34:	20000008 	.word	0x20000008
 8002d38:	053e2d63 	.word	0x053e2d63
 8002d3c:	50000100 	.word	0x50000100
 8002d40:	50000400 	.word	0x50000400
 8002d44:	50000500 	.word	0x50000500
 8002d48:	50000600 	.word	0x50000600
 8002d4c:	50000300 	.word	0x50000300
 8002d50:	50000700 	.word	0x50000700
 8002d54:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10c      	bne.n	8002d8a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f023 010f 	bic.w	r1, r3, #15
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	1e5a      	subs	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
 8002d88:	e007      	b.n	8002d9a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 020f 	bic.w	r2, r2, #15
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002daa:	e007      	b.n	8002dbc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f043 0210 	orr.w	r2, r3, #16
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	bf00      	nop

08002dc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_Start_DMA+0x20>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a5a      	ldr	r2, [pc, #360]	; (8002f4c <HAL_ADC_Start_DMA+0x184>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_Start_DMA+0x24>
 8002de8:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_ADC_Start_DMA+0x188>)
 8002dea:	e000      	b.n	8002dee <HAL_ADC_Start_DMA+0x26>
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_ADC_Start_DMA+0x18c>)
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fd4a 	bl	8002888 <LL_ADC_GetMultimode>
 8002df4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fe02 	bl	8002a04 <LL_ADC_REG_IsConversionOngoing>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 809b 	bne.w	8002f3e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Start_DMA+0x4e>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e096      	b.n	8002f44 <HAL_ADC_Start_DMA+0x17c>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4d      	ldr	r2, [pc, #308]	; (8002f58 <HAL_ADC_Start_DMA+0x190>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d008      	beq.n	8002e3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d002      	beq.n	8002e3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d17a      	bne.n	8002f30 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fcf6 	bl	800382c <ADC_Enable>
 8002e40:	4603      	mov	r3, r0
 8002e42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d16d      	bne.n	8002f26 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <HAL_ADC_Start_DMA+0x184>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_ADC_Start_DMA+0xb4>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <HAL_ADC_Start_DMA+0x194>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d002      	beq.n	8002e78 <HAL_ADC_Start_DMA+0xb0>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e003      	b.n	8002e80 <HAL_ADC_Start_DMA+0xb8>
 8002e78:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <HAL_ADC_Start_DMA+0x198>)
 8002e7a:	e001      	b.n	8002e80 <HAL_ADC_Start_DMA+0xb8>
 8002e7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d002      	beq.n	8002e8e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	f023 0206 	bic.w	r2, r3, #6
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	661a      	str	r2, [r3, #96]	; 0x60
 8002eb2:	e002      	b.n	8002eba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <HAL_ADC_Start_DMA+0x19c>)
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <HAL_ADC_Start_DMA+0x1a0>)
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_ADC_Start_DMA+0x1a4>)
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	221c      	movs	r2, #28
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0210 	orr.w	r2, r2, #16
 8002ef0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3340      	adds	r3, #64	; 0x40
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f001 f989 	bl	8004228 <HAL_DMA_Start_IT>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fd5c 	bl	80029dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f24:	e00d      	b.n	8002f42 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002f2e:	e008      	b.n	8002f42 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002f3c:	e001      	b.n	8002f42 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	50000100 	.word	0x50000100
 8002f50:	50000300 	.word	0x50000300
 8002f54:	50000700 	.word	0x50000700
 8002f58:	50000600 	.word	0x50000600
 8002f5c:	50000500 	.word	0x50000500
 8002f60:	50000400 	.word	0x50000400
 8002f64:	08003a17 	.word	0x08003a17
 8002f68:	08003aef 	.word	0x08003aef
 8002f6c:	08003b0b 	.word	0x08003b0b

08002f70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0b6      	sub	sp, #216	; 0xd8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d102      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x24>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	f000 bc13 	b.w	80037f6 <HAL_ADC_ConfigChannel+0x84a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fd11 	bl	8002a04 <LL_ADC_REG_IsConversionOngoing>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 83f3 	bne.w	80037d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f7ff fbcb 	bl	8002792 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fcff 	bl	8002a04 <LL_ADC_REG_IsConversionOngoing>
 8003006:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fd0b 	bl	8002a2a <LL_ADC_INJ_IsConversionOngoing>
 8003014:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003018:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 81d9 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 81d4 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003034:	d10f      	bne.n	8003056 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2200      	movs	r2, #0
 8003040:	4619      	mov	r1, r3
 8003042:	f7ff fbd2 	bl	80027ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fb79 	bl	8002746 <LL_ADC_SetSamplingTimeCommonConfig>
 8003054:	e00e      	b.n	8003074 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	461a      	mov	r2, r3
 8003064:	f7ff fbc1 	bl	80027ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fb69 	bl	8002746 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b04      	cmp	r3, #4
 8003094:	d022      	beq.n	80030dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6919      	ldr	r1, [r3, #16]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030a6:	f7ff fac3 	bl	8002630 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6919      	ldr	r1, [r3, #16]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f7ff fb0f 	bl	80026da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d102      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x126>
 80030cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d0:	e000      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x128>
 80030d2:	2300      	movs	r3, #0
 80030d4:	461a      	mov	r2, r3
 80030d6:	f7ff fb1b 	bl	8002710 <LL_ADC_SetOffsetSaturation>
 80030da:	e17b      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fac8 	bl	8002678 <LL_ADC_GetOffsetChannel>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x15c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fabd 	bl	8002678 <LL_ADC_GetOffsetChannel>
 80030fe:	4603      	mov	r3, r0
 8003100:	0e9b      	lsrs	r3, r3, #26
 8003102:	f003 021f 	and.w	r2, r3, #31
 8003106:	e01e      	b.n	8003146 <HAL_ADC_ConfigChannel+0x19a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fab2 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8003114:	4603      	mov	r3, r0
 8003116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800312a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800312e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003136:	2320      	movs	r3, #32
 8003138:	e004      	b.n	8003144 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800313a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <HAL_ADC_ConfigChannel+0x1b2>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0e9b      	lsrs	r3, r3, #26
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	e018      	b.n	8003190 <HAL_ADC_ConfigChannel+0x1e4>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800317a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e004      	b.n	8003190 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fa81 	bl	80026a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fa65 	bl	8002678 <LL_ADC_GetOffsetChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x222>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fa5a 	bl	8002678 <LL_ADC_GetOffsetChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	e01e      	b.n	800320c <HAL_ADC_ConfigChannel+0x260>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2101      	movs	r1, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fa4f 	bl	8002678 <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80031ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80031f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e004      	b.n	800320a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x278>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	e018      	b.n	8003256 <HAL_ADC_ConfigChannel+0x2aa>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003238:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800323c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003248:	2320      	movs	r3, #32
 800324a:	e004      	b.n	8003256 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800324c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003256:	429a      	cmp	r2, r3
 8003258:	d106      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	2101      	movs	r1, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fa1e 	bl	80026a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2102      	movs	r1, #2
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fa02 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8003274:	4603      	mov	r3, r0
 8003276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10a      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x2e8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2102      	movs	r1, #2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f9f7 	bl	8002678 <LL_ADC_GetOffsetChannel>
 800328a:	4603      	mov	r3, r0
 800328c:	0e9b      	lsrs	r3, r3, #26
 800328e:	f003 021f 	and.w	r2, r3, #31
 8003292:	e01e      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x326>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2102      	movs	r1, #2
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff f9ec 	bl	8002678 <LL_ADC_GetOffsetChannel>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032c2:	2320      	movs	r3, #32
 80032c4:	e004      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x33e>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	e016      	b.n	8003318 <HAL_ADC_ConfigChannel+0x36c>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80032fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e004      	b.n	8003318 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800330e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003318:	429a      	cmp	r2, r3
 800331a:	d106      	bne.n	800332a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2200      	movs	r2, #0
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f9bd 	bl	80026a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2103      	movs	r1, #3
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff f9a1 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x3aa>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2103      	movs	r1, #3
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f996 	bl	8002678 <LL_ADC_GetOffsetChannel>
 800334c:	4603      	mov	r3, r0
 800334e:	0e9b      	lsrs	r3, r3, #26
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	e017      	b.n	8003386 <HAL_ADC_ConfigChannel+0x3da>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2103      	movs	r1, #3
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f98b 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800336e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003370:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800337c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_ADC_ConfigChannel+0x3f2>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	0e9b      	lsrs	r3, r3, #26
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	e011      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x416>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e003      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d106      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2103      	movs	r1, #3
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff f968 	bl	80026a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fad9 	bl	8002990 <LL_ADC_IsEnabled>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 813d 	bne.w	8003660 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7ff fa24 	bl	8002840 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4aa2      	ldr	r2, [pc, #648]	; (8003688 <HAL_ADC_ConfigChannel+0x6dc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 812e 	bne.w	8003660 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <HAL_ADC_ConfigChannel+0x480>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2b09      	cmp	r3, #9
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e019      	b.n	8003460 <HAL_ADC_ConfigChannel+0x4b4>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800343a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800343e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2b09      	cmp	r3, #9
 8003458:	bf94      	ite	ls
 800345a:	2301      	movls	r3, #1
 800345c:	2300      	movhi	r3, #0
 800345e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003460:	2b00      	cmp	r3, #0
 8003462:	d079      	beq.n	8003558 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346c:	2b00      	cmp	r3, #0
 800346e:	d107      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x4d4>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	3301      	adds	r3, #1
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347e:	e015      	b.n	80034ac <HAL_ADC_ConfigChannel+0x500>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800348e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003490:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800349c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	069b      	lsls	r3, r3, #26
 80034a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x520>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	3301      	adds	r3, #1
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	e017      	b.n	80034fc <HAL_ADC_ConfigChannel+0x550>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x576>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e9b      	lsrs	r3, r3, #26
 8003512:	3301      	adds	r3, #1
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	051b      	lsls	r3, r3, #20
 8003520:	e018      	b.n	8003554 <HAL_ADC_ConfigChannel+0x5a8>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e003      	b.n	8003546 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800353e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003554:	430b      	orrs	r3, r1
 8003556:	e07e      	b.n	8003656 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x5c8>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	3301      	adds	r3, #1
 800356c:	069b      	lsls	r3, r3, #26
 800356e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003572:	e015      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x5f4>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	069b      	lsls	r3, r3, #26
 800359c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x614>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	e017      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x644>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	61fb      	str	r3, [r7, #28]
  return result;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e003      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	ea42 0103 	orr.w	r1, r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_ADC_ConfigChannel+0x670>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e9b      	lsrs	r3, r3, #26
 8003606:	3301      	adds	r3, #1
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	3b1e      	subs	r3, #30
 8003614:	051b      	lsls	r3, r3, #20
 8003616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800361a:	e01b      	b.n	8003654 <HAL_ADC_ConfigChannel+0x6a8>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	613b      	str	r3, [r7, #16]
  return result;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e003      	b.n	8003640 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3301      	adds	r3, #1
 8003642:	f003 021f 	and.w	r2, r3, #31
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	3b1e      	subs	r3, #30
 800364e:	051b      	lsls	r3, r3, #20
 8003650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003654:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800365a:	4619      	mov	r1, r3
 800365c:	f7ff f8c5 	bl	80027ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_ADC_ConfigChannel+0x6e0>)
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80be 	beq.w	80037ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003676:	d004      	beq.n	8003682 <HAL_ADC_ConfigChannel+0x6d6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a04      	ldr	r2, [pc, #16]	; (8003690 <HAL_ADC_ConfigChannel+0x6e4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10a      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x6ec>
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <HAL_ADC_ConfigChannel+0x6e8>)
 8003684:	e009      	b.n	800369a <HAL_ADC_ConfigChannel+0x6ee>
 8003686:	bf00      	nop
 8003688:	407f0000 	.word	0x407f0000
 800368c:	80080000 	.word	0x80080000
 8003690:	50000100 	.word	0x50000100
 8003694:	50000300 	.word	0x50000300
 8003698:	4b59      	ldr	r3, [pc, #356]	; (8003800 <HAL_ADC_ConfigChannel+0x854>)
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe ffba 	bl	8002614 <LL_ADC_GetCommonPathInternalCh>
 80036a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a56      	ldr	r2, [pc, #344]	; (8003804 <HAL_ADC_ConfigChannel+0x858>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_ADC_ConfigChannel+0x70c>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a55      	ldr	r2, [pc, #340]	; (8003808 <HAL_ADC_ConfigChannel+0x85c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d13a      	bne.n	800372e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d134      	bne.n	800372e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036cc:	d005      	beq.n	80036da <HAL_ADC_ConfigChannel+0x72e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a4e      	ldr	r2, [pc, #312]	; (800380c <HAL_ADC_ConfigChannel+0x860>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	f040 8085 	bne.w	80037e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036e2:	d004      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x742>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a49      	ldr	r2, [pc, #292]	; (8003810 <HAL_ADC_ConfigChannel+0x864>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x746>
 80036ee:	4a49      	ldr	r2, [pc, #292]	; (8003814 <HAL_ADC_ConfigChannel+0x868>)
 80036f0:	e000      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x748>
 80036f2:	4a43      	ldr	r2, [pc, #268]	; (8003800 <HAL_ADC_ConfigChannel+0x854>)
 80036f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f7fe ff75 	bl	80025ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003704:	4b44      	ldr	r3, [pc, #272]	; (8003818 <HAL_ADC_ConfigChannel+0x86c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	4a44      	ldr	r2, [pc, #272]	; (800381c <HAL_ADC_ConfigChannel+0x870>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800371e:	e002      	b.n	8003726 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3b01      	subs	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f9      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800372c:	e05a      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <HAL_ADC_ConfigChannel+0x874>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d125      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800373c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11f      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a31      	ldr	r2, [pc, #196]	; (8003810 <HAL_ADC_ConfigChannel+0x864>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d104      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x7ac>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a34      	ldr	r2, [pc, #208]	; (8003824 <HAL_ADC_ConfigChannel+0x878>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d047      	beq.n	80037e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003760:	d004      	beq.n	800376c <HAL_ADC_ConfigChannel+0x7c0>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <HAL_ADC_ConfigChannel+0x864>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x7c4>
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <HAL_ADC_ConfigChannel+0x868>)
 800376e:	e000      	b.n	8003772 <HAL_ADC_ConfigChannel+0x7c6>
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_ADC_ConfigChannel+0x854>)
 8003772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe ff36 	bl	80025ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003782:	e031      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a27      	ldr	r2, [pc, #156]	; (8003828 <HAL_ADC_ConfigChannel+0x87c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d12d      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800378e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d127      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_ADC_ConfigChannel+0x864>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ac:	d004      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0x80c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_ADC_ConfigChannel+0x864>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x810>
 80037b8:	4a16      	ldr	r2, [pc, #88]	; (8003814 <HAL_ADC_ConfigChannel+0x868>)
 80037ba:	e000      	b.n	80037be <HAL_ADC_ConfigChannel+0x812>
 80037bc:	4a10      	ldr	r2, [pc, #64]	; (8003800 <HAL_ADC_ConfigChannel+0x854>)
 80037be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fe ff10 	bl	80025ee <LL_ADC_SetCommonPathInternalCh>
 80037ce:	e00c      	b.n	80037ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037e2:	e002      	b.n	80037ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	37d8      	adds	r7, #216	; 0xd8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	50000700 	.word	0x50000700
 8003804:	c3210000 	.word	0xc3210000
 8003808:	90c00010 	.word	0x90c00010
 800380c:	50000600 	.word	0x50000600
 8003810:	50000100 	.word	0x50000100
 8003814:	50000300 	.word	0x50000300
 8003818:	20000008 	.word	0x20000008
 800381c:	053e2d63 	.word	0x053e2d63
 8003820:	c7520000 	.word	0xc7520000
 8003824:	50000500 	.word	0x50000500
 8003828:	cb840000 	.word	0xcb840000

0800382c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff f8a7 	bl	8002990 <LL_ADC_IsEnabled>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d176      	bne.n	8003936 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <ADC_Enable+0x114>)
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f043 0210 	orr.w	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e062      	b.n	8003938 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f862 	bl	8002940 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003884:	d004      	beq.n	8003890 <ADC_Enable+0x64>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <ADC_Enable+0x118>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <ADC_Enable+0x68>
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <ADC_Enable+0x11c>)
 8003892:	e000      	b.n	8003896 <ADC_Enable+0x6a>
 8003894:	4b2d      	ldr	r3, [pc, #180]	; (800394c <ADC_Enable+0x120>)
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe febc 	bl	8002614 <LL_ADC_GetCommonPathInternalCh>
 800389c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800389e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d013      	beq.n	80038ce <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <ADC_Enable+0x124>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <ADC_Enable+0x128>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038c0:	e002      	b.n	80038c8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f9      	bne.n	80038c2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038ce:	f7fe fe6f 	bl	80025b0 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d4:	e028      	b.n	8003928 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff f858 	bl	8002990 <LL_ADC_IsEnabled>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d104      	bne.n	80038f0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f828 	bl	8002940 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038f0:	f7fe fe5e 	bl	80025b0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d914      	bls.n	8003928 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d00d      	beq.n	8003928 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	f043 0210 	orr.w	r2, r3, #16
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	f043 0201 	orr.w	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d1cf      	bne.n	80038d6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	8000003f 	.word	0x8000003f
 8003944:	50000100 	.word	0x50000100
 8003948:	50000300 	.word	0x50000300
 800394c:	50000700 	.word	0x50000700
 8003950:	20000008 	.word	0x20000008
 8003954:	053e2d63 	.word	0x053e2d63

08003958 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff f826 	bl	80029b6 <LL_ADC_IsDisableOngoing>
 800396a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff f80d 	bl	8002990 <LL_ADC_IsEnabled>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d047      	beq.n	8003a0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d144      	bne.n	8003a0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030d 	and.w	r3, r3, #13
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10c      	bne.n	80039aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe ffe7 	bl	8002968 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2203      	movs	r2, #3
 80039a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039a2:	f7fe fe05 	bl	80025b0 <HAL_GetTick>
 80039a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039a8:	e029      	b.n	80039fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	f043 0210 	orr.w	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e023      	b.n	8003a0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039c6:	f7fe fdf3 	bl	80025b0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d914      	bls.n	80039fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	f043 0210 	orr.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e007      	b.n	8003a0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1dc      	bne.n	80039c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d14b      	bne.n	8003ac8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fe8c 	bl	800276c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d032      	beq.n	8003ac0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d12b      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11f      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a8c:	e018      	b.n	8003ac0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d111      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fa55 	bl	8002f70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ac6:	e00e      	b.n	8003ae6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff fa5f 	bl	8002f98 <HAL_ADC_ErrorCallback>
}
 8003ada:	e004      	b.n	8003ae6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff fa41 	bl	8002f84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b28:	f043 0204 	orr.w	r2, r3, #4
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff fa31 	bl	8002f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <LL_ADC_IsEnabled>:
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <LL_ADC_IsEnabled+0x18>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <LL_ADC_IsEnabled+0x1a>
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_StartCalibration>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003baa:	d101      	bne.n	8003bb0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_REG_IsConversionOngoing>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d101      	bne.n	8003bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADCEx_Calibration_Start+0x1c>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e04d      	b.n	8003c9c <HAL_ADCEx_Calibration_Start+0xb8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fea5 	bl	8003958 <ADC_Disable>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d136      	bne.n	8003c86 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c20:	f023 0302 	bic.w	r3, r3, #2
 8003c24:	f043 0202 	orr.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6839      	ldr	r1, [r7, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff96 	bl	8003b64 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c38:	e014      	b.n	8003c64 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d90d      	bls.n	8003c64 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	f023 0312 	bic.w	r3, r3, #18
 8003c50:	f043 0210 	orr.w	r2, r3, #16
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e01b      	b.n	8003c9c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff94 	bl	8003b96 <LL_ADC_IsCalibrationOnGoing>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e2      	bne.n	8003c3a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f023 0303 	bic.w	r3, r3, #3
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c84:	e005      	b.n	8003c92 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	0004de01 	.word	0x0004de01

08003ca8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b0a1      	sub	sp, #132	; 0x84
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0e7      	b.n	8003e96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cde:	d102      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ce0:	4b6f      	ldr	r3, [pc, #444]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	e009      	b.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d102      	bne.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003cf0:	4b6d      	ldr	r3, [pc, #436]	; (8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	e001      	b.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0be      	b.n	8003e96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff4f 	bl	8003bbe <LL_ADC_REG_IsConversionOngoing>
 8003d20:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ff49 	bl	8003bbe <LL_ADC_REG_IsConversionOngoing>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 80a0 	bne.w	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 809c 	bne.w	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d44:	d004      	beq.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a55      	ldr	r2, [pc, #340]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003d50:	4b56      	ldr	r3, [pc, #344]	; (8003eac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003d52:	e000      	b.n	8003d56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003d54:	4b56      	ldr	r3, [pc, #344]	; (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003d56:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d04b      	beq.n	8003df8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d72:	035b      	lsls	r3, r3, #13
 8003d74:	430b      	orrs	r3, r1
 8003d76:	431a      	orrs	r2, r3
 8003d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d84:	d004      	beq.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a45      	ldr	r2, [pc, #276]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10f      	bne.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003d90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d94:	f7ff fed3 	bl	8003b3e <LL_ADC_IsEnabled>
 8003d98:	4604      	mov	r4, r0
 8003d9a:	4841      	ldr	r0, [pc, #260]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d9c:	f7ff fecf 	bl	8003b3e <LL_ADC_IsEnabled>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4323      	orrs	r3, r4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e012      	b.n	8003dd6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003db0:	483c      	ldr	r0, [pc, #240]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003db2:	f7ff fec4 	bl	8003b3e <LL_ADC_IsEnabled>
 8003db6:	4604      	mov	r4, r0
 8003db8:	483b      	ldr	r0, [pc, #236]	; (8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003dba:	f7ff fec0 	bl	8003b3e <LL_ADC_IsEnabled>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	431c      	orrs	r4, r3
 8003dc2:	483c      	ldr	r0, [pc, #240]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003dc4:	f7ff febb 	bl	8003b3e <LL_ADC_IsEnabled>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4323      	orrs	r3, r4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d056      	beq.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003de2:	f023 030f 	bic.w	r3, r3, #15
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	6811      	ldr	r1, [r2, #0]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	6892      	ldr	r2, [r2, #8]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	431a      	orrs	r2, r3
 8003df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003df6:	e047      	b.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e02:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e0c:	d004      	beq.n	8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a23      	ldr	r2, [pc, #140]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d10f      	bne.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003e18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e1c:	f7ff fe8f 	bl	8003b3e <LL_ADC_IsEnabled>
 8003e20:	4604      	mov	r4, r0
 8003e22:	481f      	ldr	r0, [pc, #124]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e24:	f7ff fe8b 	bl	8003b3e <LL_ADC_IsEnabled>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4323      	orrs	r3, r4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e012      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003e38:	481a      	ldr	r0, [pc, #104]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e3a:	f7ff fe80 	bl	8003b3e <LL_ADC_IsEnabled>
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4819      	ldr	r0, [pc, #100]	; (8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e42:	f7ff fe7c 	bl	8003b3e <LL_ADC_IsEnabled>
 8003e46:	4603      	mov	r3, r0
 8003e48:	431c      	orrs	r4, r3
 8003e4a:	481a      	ldr	r0, [pc, #104]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e4c:	f7ff fe77 	bl	8003b3e <LL_ADC_IsEnabled>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4323      	orrs	r3, r4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e6a:	f023 030f 	bic.w	r3, r3, #15
 8003e6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e70:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e72:	e009      	b.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f043 0220 	orr.w	r2, r3, #32
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e86:	e000      	b.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3784      	adds	r7, #132	; 0x84
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd90      	pop	{r4, r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	50000100 	.word	0x50000100
 8003ea4:	50000400 	.word	0x50000400
 8003ea8:	50000500 	.word	0x50000500
 8003eac:	50000300 	.word	0x50000300
 8003eb0:	50000700 	.word	0x50000700
 8003eb4:	50000600 	.word	0x50000600

08003eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <__NVIC_SetPriorityGrouping+0x44>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eea:	4a04      	ldr	r2, [pc, #16]	; (8003efc <__NVIC_SetPriorityGrouping+0x44>)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	60d3      	str	r3, [r2, #12]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <__NVIC_GetPriorityGrouping+0x18>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	f003 0307 	and.w	r3, r3, #7
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000ed00 	.word	0xe000ed00

08003f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	db0b      	blt.n	8003f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	f003 021f 	and.w	r2, r3, #31
 8003f34:	4907      	ldr	r1, [pc, #28]	; (8003f54 <__NVIC_EnableIRQ+0x38>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	e000e100 	.word	0xe000e100

08003f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	6039      	str	r1, [r7, #0]
 8003f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	db0a      	blt.n	8003f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	490c      	ldr	r1, [pc, #48]	; (8003fa4 <__NVIC_SetPriority+0x4c>)
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	0112      	lsls	r2, r2, #4
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f80:	e00a      	b.n	8003f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4908      	ldr	r1, [pc, #32]	; (8003fa8 <__NVIC_SetPriority+0x50>)
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	3b04      	subs	r3, #4
 8003f90:	0112      	lsls	r2, r2, #4
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	440b      	add	r3, r1
 8003f96:	761a      	strb	r2, [r3, #24]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	e000e100 	.word	0xe000e100
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f1c3 0307 	rsb	r3, r3, #7
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	bf28      	it	cs
 8003fca:	2304      	movcs	r3, #4
 8003fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d902      	bls.n	8003fdc <NVIC_EncodePriority+0x30>
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	3b03      	subs	r3, #3
 8003fda:	e000      	b.n	8003fde <NVIC_EncodePriority+0x32>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43da      	mvns	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	401a      	ands	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffe:	43d9      	mvns	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004004:	4313      	orrs	r3, r2
         );
}
 8004006:	4618      	mov	r0, r3
 8004008:	3724      	adds	r7, #36	; 0x24
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004024:	d301      	bcc.n	800402a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004026:	2301      	movs	r3, #1
 8004028:	e00f      	b.n	800404a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <SysTick_Config+0x40>)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3b01      	subs	r3, #1
 8004030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004032:	210f      	movs	r1, #15
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	f7ff ff8e 	bl	8003f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <SysTick_Config+0x40>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <SysTick_Config+0x40>)
 8004044:	2207      	movs	r2, #7
 8004046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	e000e010 	.word	0xe000e010

08004058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ff29 	bl	8003eb8 <__NVIC_SetPriorityGrouping>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800407c:	f7ff ff40 	bl	8003f00 <__NVIC_GetPriorityGrouping>
 8004080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7ff ff90 	bl	8003fac <NVIC_EncodePriority>
 800408c:	4602      	mov	r2, r0
 800408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff5f 	bl	8003f58 <__NVIC_SetPriority>
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4603      	mov	r3, r0
 80040aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ff33 	bl	8003f1c <__NVIC_EnableIRQ>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ffa4 	bl	8004014 <SysTick_Config>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e08d      	b.n	8004206 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b47      	ldr	r3, [pc, #284]	; (8004210 <HAL_DMA_Init+0x138>)
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d80f      	bhi.n	8004116 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	4b45      	ldr	r3, [pc, #276]	; (8004214 <HAL_DMA_Init+0x13c>)
 80040fe:	4413      	add	r3, r2
 8004100:	4a45      	ldr	r2, [pc, #276]	; (8004218 <HAL_DMA_Init+0x140>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	009a      	lsls	r2, r3, #2
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a42      	ldr	r2, [pc, #264]	; (800421c <HAL_DMA_Init+0x144>)
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
 8004114:	e00e      	b.n	8004134 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	4b40      	ldr	r3, [pc, #256]	; (8004220 <HAL_DMA_Init+0x148>)
 800411e:	4413      	add	r3, r2
 8004120:	4a3d      	ldr	r2, [pc, #244]	; (8004218 <HAL_DMA_Init+0x140>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <HAL_DMA_Init+0x14c>)
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fa76 	bl	8004678 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004194:	d102      	bne.n	800419c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_DMA_Init+0x104>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d80c      	bhi.n	80041dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fa96 	bl	80046f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	e008      	b.n	80041ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40020407 	.word	0x40020407
 8004214:	bffdfff8 	.word	0xbffdfff8
 8004218:	cccccccd 	.word	0xcccccccd
 800421c:	40020000 	.word	0x40020000
 8004220:	bffdfbf8 	.word	0xbffdfbf8
 8004224:	40020400 	.word	0x40020400

08004228 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_DMA_Start_IT+0x20>
 8004244:	2302      	movs	r3, #2
 8004246:	e066      	b.n	8004316 <HAL_DMA_Start_IT+0xee>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d155      	bne.n	8004308 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f9bb 	bl	80045fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 020e 	orr.w	r2, r2, #14
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e00f      	b.n	80042c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 020a 	orr.w	r2, r2, #10
 80042be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e005      	b.n	8004314 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004310:	2302      	movs	r3, #2
 8004312:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d005      	beq.n	8004342 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2204      	movs	r2, #4
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	e037      	b.n	80043b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 020e 	bic.w	r2, r2, #14
 8004350:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800438e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d00d      	beq.n	8004404 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2204      	movs	r2, #4
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
 8004402:	e047      	b.n	8004494 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 020e 	bic.w	r2, r2, #14
 8004412:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004438:	f003 021f 	and.w	r2, r3, #31
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	2101      	movs	r1, #1
 8004442:	fa01 f202 	lsl.w	r2, r1, r2
 8004446:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004450:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004468:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004472:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
    }
  }
  return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2204      	movs	r2, #4
 80044c0:	409a      	lsls	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d026      	beq.n	8004518 <HAL_DMA_IRQHandler+0x7a>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d021      	beq.n	8004518 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0204 	bic.w	r2, r2, #4
 80044f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f003 021f 	and.w	r2, r3, #31
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2104      	movs	r1, #4
 8004500:	fa01 f202 	lsl.w	r2, r1, r2
 8004504:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	2b00      	cmp	r3, #0
 800450c:	d071      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004516:	e06c      	b.n	80045f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2202      	movs	r2, #2
 8004522:	409a      	lsls	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02e      	beq.n	800458a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d029      	beq.n	800458a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 020a 	bic.w	r2, r2, #10
 8004552:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004560:	f003 021f 	and.w	r2, r3, #31
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2102      	movs	r1, #2
 800456a:	fa01 f202 	lsl.w	r2, r1, r2
 800456e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d038      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004588:	e033      	b.n	80045f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2208      	movs	r2, #8
 8004594:	409a      	lsls	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d02a      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d025      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 020e 	bic.w	r2, r2, #14
 80045b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f003 021f 	and.w	r2, r3, #31
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
}
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004612:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004624:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	f003 021f 	and.w	r2, r3, #31
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2101      	movs	r1, #1
 8004634:	fa01 f202 	lsl.w	r2, r1, r2
 8004638:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b10      	cmp	r3, #16
 8004648:	d108      	bne.n	800465c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800465a:	e007      	b.n	800466c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004688:	429a      	cmp	r2, r3
 800468a:	d802      	bhi.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800468c:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e001      	b.n	8004696 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004694:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3b08      	subs	r3, #8
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	009a      	lsls	r2, r3, #2
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a0b      	ldr	r2, [pc, #44]	; (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80046c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	2201      	movs	r2, #1
 80046cc:	409a      	lsls	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40020407 	.word	0x40020407
 80046e4:	40020800 	.word	0x40020800
 80046e8:	40020820 	.word	0x40020820
 80046ec:	cccccccd 	.word	0xcccccccd
 80046f0:	40020880 	.word	0x40020880

080046f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	461a      	mov	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a08      	ldr	r2, [pc, #32]	; (8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004716:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	1000823f 	.word	0x1000823f
 8004738:	40020940 	.word	0x40020940

0800473c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800474a:	e15a      	b.n	8004a02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	2101      	movs	r1, #1
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 814c 	beq.w	80049fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d005      	beq.n	800477c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004778:	2b02      	cmp	r3, #2
 800477a:	d130      	bne.n	80047de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	2203      	movs	r2, #3
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047b2:	2201      	movs	r2, #1
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f003 0201 	and.w	r2, r3, #1
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d017      	beq.n	800481a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2203      	movs	r2, #3
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d123      	bne.n	800486e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	08da      	lsrs	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3208      	adds	r2, #8
 800482e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	220f      	movs	r2, #15
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	08da      	lsrs	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3208      	adds	r2, #8
 8004868:	6939      	ldr	r1, [r7, #16]
 800486a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 0203 	and.w	r2, r3, #3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80a6 	beq.w	80049fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b0:	4b5b      	ldr	r3, [pc, #364]	; (8004a20 <HAL_GPIO_Init+0x2e4>)
 80048b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b4:	4a5a      	ldr	r2, [pc, #360]	; (8004a20 <HAL_GPIO_Init+0x2e4>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6613      	str	r3, [r2, #96]	; 0x60
 80048bc:	4b58      	ldr	r3, [pc, #352]	; (8004a20 <HAL_GPIO_Init+0x2e4>)
 80048be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048c8:	4a56      	ldr	r2, [pc, #344]	; (8004a24 <HAL_GPIO_Init+0x2e8>)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	089b      	lsrs	r3, r3, #2
 80048ce:	3302      	adds	r3, #2
 80048d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	220f      	movs	r2, #15
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048f2:	d01f      	beq.n	8004934 <HAL_GPIO_Init+0x1f8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a4c      	ldr	r2, [pc, #304]	; (8004a28 <HAL_GPIO_Init+0x2ec>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d019      	beq.n	8004930 <HAL_GPIO_Init+0x1f4>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a4b      	ldr	r2, [pc, #300]	; (8004a2c <HAL_GPIO_Init+0x2f0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_GPIO_Init+0x1f0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a4a      	ldr	r2, [pc, #296]	; (8004a30 <HAL_GPIO_Init+0x2f4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00d      	beq.n	8004928 <HAL_GPIO_Init+0x1ec>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a49      	ldr	r2, [pc, #292]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <HAL_GPIO_Init+0x1e8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a48      	ldr	r2, [pc, #288]	; (8004a38 <HAL_GPIO_Init+0x2fc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d101      	bne.n	8004920 <HAL_GPIO_Init+0x1e4>
 800491c:	2305      	movs	r3, #5
 800491e:	e00a      	b.n	8004936 <HAL_GPIO_Init+0x1fa>
 8004920:	2306      	movs	r3, #6
 8004922:	e008      	b.n	8004936 <HAL_GPIO_Init+0x1fa>
 8004924:	2304      	movs	r3, #4
 8004926:	e006      	b.n	8004936 <HAL_GPIO_Init+0x1fa>
 8004928:	2303      	movs	r3, #3
 800492a:	e004      	b.n	8004936 <HAL_GPIO_Init+0x1fa>
 800492c:	2302      	movs	r3, #2
 800492e:	e002      	b.n	8004936 <HAL_GPIO_Init+0x1fa>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_GPIO_Init+0x1fa>
 8004934:	2300      	movs	r3, #0
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	f002 0203 	and.w	r2, r2, #3
 800493c:	0092      	lsls	r2, r2, #2
 800493e:	4093      	lsls	r3, r2
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004946:	4937      	ldr	r1, [pc, #220]	; (8004a24 <HAL_GPIO_Init+0x2e8>)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	3302      	adds	r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004954:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <HAL_GPIO_Init+0x300>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	43db      	mvns	r3, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4013      	ands	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004978:	4a30      	ldr	r2, [pc, #192]	; (8004a3c <HAL_GPIO_Init+0x300>)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800497e:	4b2f      	ldr	r3, [pc, #188]	; (8004a3c <HAL_GPIO_Init+0x300>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	43db      	mvns	r3, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049a2:	4a26      	ldr	r2, [pc, #152]	; (8004a3c <HAL_GPIO_Init+0x300>)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_GPIO_Init+0x300>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049cc:	4a1b      	ldr	r2, [pc, #108]	; (8004a3c <HAL_GPIO_Init+0x300>)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049d2:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <HAL_GPIO_Init+0x300>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	43db      	mvns	r3, r3
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4013      	ands	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049f6:	4a11      	ldr	r2, [pc, #68]	; (8004a3c <HAL_GPIO_Init+0x300>)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	3301      	adds	r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f47f ae9d 	bne.w	800474c <HAL_GPIO_Init+0x10>
  }
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40010000 	.word	0x40010000
 8004a28:	48000400 	.word	0x48000400
 8004a2c:	48000800 	.word	0x48000800
 8004a30:	48000c00 	.word	0x48000c00
 8004a34:	48001000 	.word	0x48001000
 8004a38:	48001400 	.word	0x48001400
 8004a3c:	40010400 	.word	0x40010400

08004a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	807b      	strh	r3, [r7, #2]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a50:	787b      	ldrb	r3, [r7, #1]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a56:	887a      	ldrh	r2, [r7, #2]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a5c:	e002      	b.n	8004a64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a5e:	887a      	ldrh	r2, [r7, #2]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4013      	ands	r3, r2
 8004a88:	041a      	lsls	r2, r3, #16
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	43d9      	mvns	r1, r3
 8004a8e:	887b      	ldrh	r3, [r7, #2]
 8004a90:	400b      	ands	r3, r1
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	619a      	str	r2, [r3, #24]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d006      	beq.n	8004ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aba:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd f830 	bl	8001b28 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40010400 	.word	0x40010400

08004ad4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d141      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ae2:	4b4b      	ldr	r3, [pc, #300]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aee:	d131      	bne.n	8004b54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004af0:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af6:	4a46      	ldr	r2, [pc, #280]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b08:	4a41      	ldr	r2, [pc, #260]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b10:	4b40      	ldr	r3, [pc, #256]	; (8004c14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2232      	movs	r2, #50	; 0x32
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	0c9b      	lsrs	r3, r3, #18
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b26:	e002      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b2e:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3a:	d102      	bne.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f2      	bne.n	8004b28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b42:	4b33      	ldr	r3, [pc, #204]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4e:	d158      	bne.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e057      	b.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b54:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b64:	e04d      	b.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6c:	d141      	bne.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b6e:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	d131      	bne.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b82:	4a23      	ldr	r2, [pc, #140]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b8c:	4b20      	ldr	r3, [pc, #128]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b94:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2232      	movs	r2, #50	; 0x32
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	0c9b      	lsrs	r3, r3, #18
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bb2:	e002      	b.n	8004bba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d102      	bne.n	8004bce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f2      	bne.n	8004bb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bda:	d112      	bne.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e011      	b.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bf0:	e007      	b.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bfa:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40007000 	.word	0x40007000
 8004c14:	20000008 	.word	0x20000008
 8004c18:	431bde83 	.word	0x431bde83

08004c1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c2a:	6093      	str	r3, [r2, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40007000 	.word	0x40007000

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e2fe      	b.n	800524c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d075      	beq.n	8004d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5a:	4b97      	ldr	r3, [pc, #604]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c64:	4b94      	ldr	r3, [pc, #592]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	d102      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3e>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d002      	beq.n	8004c80 <HAL_RCC_OscConfig+0x44>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d10b      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	4b8d      	ldr	r3, [pc, #564]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05b      	beq.n	8004d44 <HAL_RCC_OscConfig+0x108>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d157      	bne.n	8004d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e2d9      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x74>
 8004ca2:	4b85      	ldr	r3, [pc, #532]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a84      	ldr	r2, [pc, #528]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x98>
 8004cba:	4b7f      	ldr	r3, [pc, #508]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7e      	ldr	r2, [pc, #504]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b7c      	ldr	r3, [pc, #496]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7b      	ldr	r2, [pc, #492]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cd4:	4b78      	ldr	r3, [pc, #480]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a77      	ldr	r2, [pc, #476]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a74      	ldr	r2, [pc, #464]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fc5c 	bl	80025b0 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fc58 	bl	80025b0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e29e      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0xc0>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fd fc48 	bl	80025b0 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fd fc44 	bl	80025b0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e28a      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d36:	4b60      	ldr	r3, [pc, #384]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0xe8>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d075      	beq.n	8004e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d52:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5c:	4b56      	ldr	r3, [pc, #344]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_OscConfig+0x136>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d002      	beq.n	8004d78 <HAL_RCC_OscConfig+0x13c>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d11f      	bne.n	8004db8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d78:	4b4f      	ldr	r3, [pc, #316]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x154>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e25d      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	4b49      	ldr	r3, [pc, #292]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	4946      	ldr	r1, [pc, #280]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004da4:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fd fbb5 	bl	8002518 <HAL_InitTick>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d043      	beq.n	8004e3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e249      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d023      	beq.n	8004e08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc0:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fbf0 	bl	80025b0 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd4:	f7fd fbec 	bl	80025b0 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e232      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de6:	4b34      	ldr	r3, [pc, #208]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df2:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	061b      	lsls	r3, r3, #24
 8004e00:	492d      	ldr	r1, [pc, #180]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	604b      	str	r3, [r1, #4]
 8004e06:	e01a      	b.n	8004e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd fbcc 	bl	80025b0 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1c:	f7fd fbc8 	bl	80025b0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e20e      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x1e0>
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d041      	beq.n	8004ece <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01c      	beq.n	8004e8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e52:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fd fba5 	bl	80025b0 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fd fba1 	bl	80025b0 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e1e7      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0ef      	beq.n	8004e6a <HAL_RCC_OscConfig+0x22e>
 8004e8a:	e020      	b.n	8004ece <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e92:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fd fb88 	bl	80025b0 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea2:	e00d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7fd fb84 	bl	80025b0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d906      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1ca      	b.n	800524c <HAL_RCC_OscConfig+0x610>
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ec0:	4b8c      	ldr	r3, [pc, #560]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1ea      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80a6 	beq.w	8005028 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004edc:	2300      	movs	r3, #0
 8004ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ee0:	4b84      	ldr	r3, [pc, #528]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x2b4>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x2b6>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef6:	4b7f      	ldr	r3, [pc, #508]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	4a7e      	ldr	r2, [pc, #504]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6593      	str	r3, [r2, #88]	; 0x58
 8004f02:	4b7c      	ldr	r3, [pc, #496]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f12:	4b79      	ldr	r3, [pc, #484]	; (80050f8 <HAL_RCC_OscConfig+0x4bc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d118      	bne.n	8004f50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f1e:	4b76      	ldr	r3, [pc, #472]	; (80050f8 <HAL_RCC_OscConfig+0x4bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a75      	ldr	r2, [pc, #468]	; (80050f8 <HAL_RCC_OscConfig+0x4bc>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7fd fb41 	bl	80025b0 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f32:	f7fd fb3d 	bl	80025b0 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e183      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f44:	4b6c      	ldr	r3, [pc, #432]	; (80050f8 <HAL_RCC_OscConfig+0x4bc>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d108      	bne.n	8004f6a <HAL_RCC_OscConfig+0x32e>
 8004f58:	4b66      	ldr	r3, [pc, #408]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	4a65      	ldr	r2, [pc, #404]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f68:	e024      	b.n	8004fb4 <HAL_RCC_OscConfig+0x378>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b05      	cmp	r3, #5
 8004f70:	d110      	bne.n	8004f94 <HAL_RCC_OscConfig+0x358>
 8004f72:	4b60      	ldr	r3, [pc, #384]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	4a5e      	ldr	r2, [pc, #376]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f82:	4b5c      	ldr	r3, [pc, #368]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	4a5a      	ldr	r2, [pc, #360]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f92:	e00f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x378>
 8004f94:	4b57      	ldr	r3, [pc, #348]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	4a56      	ldr	r2, [pc, #344]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa4:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	4a52      	ldr	r2, [pc, #328]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d016      	beq.n	8004fea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fd faf8 	bl	80025b0 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fd faf4 	bl	80025b0 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e138      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fda:	4b46      	ldr	r3, [pc, #280]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ed      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x388>
 8004fe8:	e015      	b.n	8005016 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fd fae1 	bl	80025b0 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff2:	f7fd fadd 	bl	80025b0 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e121      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005008:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ed      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005016:	7ffb      	ldrb	r3, [r7, #31]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d105      	bne.n	8005028 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	4a34      	ldr	r2, [pc, #208]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8005022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005026:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d03c      	beq.n	80050ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01c      	beq.n	8005076 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800503c:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 800503e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005042:	4a2c      	ldr	r2, [pc, #176]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fd fab0 	bl	80025b0 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005054:	f7fd faac 	bl	80025b0 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e0f2      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005066:	4b23      	ldr	r3, [pc, #140]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8005068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ef      	beq.n	8005054 <HAL_RCC_OscConfig+0x418>
 8005074:	e01b      	b.n	80050ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8005078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005086:	f7fd fa93 	bl	80025b0 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800508e:	f7fd fa8f 	bl	80025b0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e0d5      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050a0:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 80050a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1ef      	bne.n	800508e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80c9 	beq.w	800524a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050b8:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	f000 8083 	beq.w	80051cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d15e      	bne.n	800518c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 80050d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050da:	f7fd fa69 	bl	80025b0 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e0:	e00c      	b.n	80050fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e2:	f7fd fa65 	bl	80025b0 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d905      	bls.n	80050fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e0ab      	b.n	800524c <HAL_RCC_OscConfig+0x610>
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050fc:	4b55      	ldr	r3, [pc, #340]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1ec      	bne.n	80050e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005108:	4b52      	ldr	r3, [pc, #328]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	4b52      	ldr	r3, [pc, #328]	; (8005258 <HAL_RCC_OscConfig+0x61c>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6a11      	ldr	r1, [r2, #32]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005118:	3a01      	subs	r2, #1
 800511a:	0112      	lsls	r2, r2, #4
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005122:	0212      	lsls	r2, r2, #8
 8005124:	4311      	orrs	r1, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800512a:	0852      	lsrs	r2, r2, #1
 800512c:	3a01      	subs	r2, #1
 800512e:	0552      	lsls	r2, r2, #21
 8005130:	4311      	orrs	r1, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005136:	0852      	lsrs	r2, r2, #1
 8005138:	3a01      	subs	r2, #1
 800513a:	0652      	lsls	r2, r2, #25
 800513c:	4311      	orrs	r1, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005142:	06d2      	lsls	r2, r2, #27
 8005144:	430a      	orrs	r2, r1
 8005146:	4943      	ldr	r1, [pc, #268]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 8005148:	4313      	orrs	r3, r2
 800514a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514c:	4b41      	ldr	r3, [pc, #260]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a40      	ldr	r2, [pc, #256]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 8005152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005156:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005158:	4b3e      	ldr	r3, [pc, #248]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a3d      	ldr	r2, [pc, #244]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800515e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005162:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fd fa24 	bl	80025b0 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fd fa20 	bl	80025b0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e066      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517e:	4b35      	ldr	r3, [pc, #212]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x530>
 800518a:	e05e      	b.n	800524a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518c:	4b31      	ldr	r3, [pc, #196]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a30      	ldr	r2, [pc, #192]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 8005192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fa0a 	bl	80025b0 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fd fa06 	bl	80025b0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e04c      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b2:	4b28      	ldr	r3, [pc, #160]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051be:	4b25      	ldr	r3, [pc, #148]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	4924      	ldr	r1, [pc, #144]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80051c4:	4b25      	ldr	r3, [pc, #148]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
 80051ca:	e03e      	b.n	800524a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e039      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f003 0203 	and.w	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d12c      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	3b01      	subs	r3, #1
 80051f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d123      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d11b      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d113      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	3b01      	subs	r3, #1
 800522c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d109      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	3b01      	subs	r3, #1
 8005240:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d001      	beq.n	800524a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000
 8005258:	019f800c 	.word	0x019f800c
 800525c:	feeefffc 	.word	0xfeeefffc

08005260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e11e      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005278:	4b91      	ldr	r3, [pc, #580]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d910      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005286:	4b8e      	ldr	r3, [pc, #568]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 020f 	bic.w	r2, r3, #15
 800528e:	498c      	ldr	r1, [pc, #560]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005296:	4b8a      	ldr	r3, [pc, #552]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e106      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d073      	beq.n	800539c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d129      	bne.n	8005310 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052bc:	4b81      	ldr	r3, [pc, #516]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0f4      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052cc:	f000 f99e 	bl	800560c <RCC_GetSysClockFreqFromPLLSource>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4a7c      	ldr	r2, [pc, #496]	; (80054c8 <HAL_RCC_ClockConfig+0x268>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d93f      	bls.n	800535a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052da:	4b7a      	ldr	r3, [pc, #488]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d033      	beq.n	800535a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d12f      	bne.n	800535a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052fa:	4b72      	ldr	r3, [pc, #456]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005302:	4a70      	ldr	r2, [pc, #448]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e024      	b.n	800535a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d107      	bne.n	8005328 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005318:	4b6a      	ldr	r3, [pc, #424]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0c6      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005328:	4b66      	ldr	r3, [pc, #408]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0be      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005338:	f000 f8ce 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 800533c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4a61      	ldr	r2, [pc, #388]	; (80054c8 <HAL_RCC_ClockConfig+0x268>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d909      	bls.n	800535a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005346:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534e:	4a5d      	ldr	r2, [pc, #372]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800535a:	4b5a      	ldr	r3, [pc, #360]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4957      	ldr	r1, [pc, #348]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005368:	4313      	orrs	r3, r2
 800536a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536c:	f7fd f920 	bl	80025b0 <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005372:	e00a      	b.n	800538a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005374:	f7fd f91c 	bl	80025b0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e095      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538a:	4b4e      	ldr	r3, [pc, #312]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 020c 	and.w	r2, r3, #12
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	429a      	cmp	r2, r3
 800539a:	d1eb      	bne.n	8005374 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d023      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b4:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a42      	ldr	r2, [pc, #264]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053cc:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053d4:	4a3b      	ldr	r2, [pc, #236]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053dc:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4936      	ldr	r1, [pc, #216]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
 80053ee:	e008      	b.n	8005402 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d105      	bne.n	8005402 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053f6:	4b33      	ldr	r3, [pc, #204]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	4a32      	ldr	r2, [pc, #200]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005400:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d21d      	bcs.n	800544c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005410:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f023 020f 	bic.w	r2, r3, #15
 8005418:	4929      	ldr	r1, [pc, #164]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005420:	f7fd f8c6 	bl	80025b0 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fd f8c2 	bl	80025b0 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e03b      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d1ed      	bne.n	8005428 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005458:	4b1a      	ldr	r3, [pc, #104]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4917      	ldr	r1, [pc, #92]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	490f      	ldr	r1, [pc, #60]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800548a:	f000 f825 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 800548e:	4602      	mov	r2, r0
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	490c      	ldr	r1, [pc, #48]	; (80054cc <HAL_RCC_ClockConfig+0x26c>)
 800549c:	5ccb      	ldrb	r3, [r1, r3]
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x270>)
 80054a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <HAL_RCC_ClockConfig+0x274>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fd f832 	bl	8002518 <HAL_InitTick>
 80054b4:	4603      	mov	r3, r0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40022000 	.word	0x40022000
 80054c4:	40021000 	.word	0x40021000
 80054c8:	04c4b400 	.word	0x04c4b400
 80054cc:	080094f8 	.word	0x080094f8
 80054d0:	20000008 	.word	0x20000008
 80054d4:	2000000c 	.word	0x2000000c

080054d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054de:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d102      	bne.n	80054f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054ea:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e047      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054f0:	4b27      	ldr	r3, [pc, #156]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d102      	bne.n	8005502 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054fc:	4b26      	ldr	r3, [pc, #152]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	e03e      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005502:	4b23      	ldr	r3, [pc, #140]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b0c      	cmp	r3, #12
 800550c:	d136      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	091b      	lsrs	r3, r3, #4
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	3301      	adds	r3, #1
 8005524:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d10c      	bne.n	8005546 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800552c:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc0>)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005536:	68d2      	ldr	r2, [r2, #12]
 8005538:	0a12      	lsrs	r2, r2, #8
 800553a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	617b      	str	r3, [r7, #20]
      break;
 8005544:	e00c      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005546:	4a13      	ldr	r2, [pc, #76]	; (8005594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005550:	68d2      	ldr	r2, [r2, #12]
 8005552:	0a12      	lsrs	r2, r2, #8
 8005554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]
      break;
 800555e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	0e5b      	lsrs	r3, r3, #25
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	3301      	adds	r3, #1
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e001      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005580:	693b      	ldr	r3, [r7, #16]
}
 8005582:	4618      	mov	r0, r3
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
 8005594:	00f42400 	.word	0x00f42400
 8005598:	016e3600 	.word	0x016e3600

0800559c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20000008 	.word	0x20000008

080055b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055b8:	f7ff fff0 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055bc:	4602      	mov	r2, r0
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	4904      	ldr	r1, [pc, #16]	; (80055dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80055ca:	5ccb      	ldrb	r3, [r1, r3]
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40021000 	.word	0x40021000
 80055dc:	08009508 	.word	0x08009508

080055e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055e4:	f7ff ffda 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0adb      	lsrs	r3, r3, #11
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4904      	ldr	r1, [pc, #16]	; (8005608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40021000 	.word	0x40021000
 8005608:	08009508 	.word	0x08009508

0800560c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005612:	4b1e      	ldr	r3, [pc, #120]	; (800568c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800561c:	4b1b      	ldr	r3, [pc, #108]	; (800568c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d10c      	bne.n	800564a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005630:	4a17      	ldr	r2, [pc, #92]	; (8005690 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	4a14      	ldr	r2, [pc, #80]	; (800568c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800563a:	68d2      	ldr	r2, [r2, #12]
 800563c:	0a12      	lsrs	r2, r2, #8
 800563e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	617b      	str	r3, [r7, #20]
    break;
 8005648:	e00c      	b.n	8005664 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800564a:	4a12      	ldr	r2, [pc, #72]	; (8005694 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	4a0e      	ldr	r2, [pc, #56]	; (800568c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005654:	68d2      	ldr	r2, [r2, #12]
 8005656:	0a12      	lsrs	r2, r2, #8
 8005658:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]
    break;
 8005662:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005664:	4b09      	ldr	r3, [pc, #36]	; (800568c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	0e5b      	lsrs	r3, r3, #25
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	3301      	adds	r3, #1
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	fbb2 f3f3 	udiv	r3, r2, r3
 800567c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800567e:	687b      	ldr	r3, [r7, #4]
}
 8005680:	4618      	mov	r0, r3
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40021000 	.word	0x40021000
 8005690:	016e3600 	.word	0x016e3600
 8005694:	00f42400 	.word	0x00f42400

08005698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056a0:	2300      	movs	r3, #0
 80056a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056a4:	2300      	movs	r3, #0
 80056a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8098 	beq.w	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b6:	2300      	movs	r3, #0
 80056b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ba:	4b43      	ldr	r3, [pc, #268]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10d      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c6:	4b40      	ldr	r3, [pc, #256]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	4a3f      	ldr	r2, [pc, #252]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6593      	str	r3, [r2, #88]	; 0x58
 80056d2:	4b3d      	ldr	r3, [pc, #244]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056e2:	4b3a      	ldr	r3, [pc, #232]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a39      	ldr	r2, [pc, #228]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ee:	f7fc ff5f 	bl	80025b0 <HAL_GetTick>
 80056f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f4:	e009      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f6:	f7fc ff5b 	bl	80025b0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d902      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	74fb      	strb	r3, [r7, #19]
        break;
 8005708:	e005      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800570a:	4b30      	ldr	r3, [pc, #192]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0ef      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d159      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800571c:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01e      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	429a      	cmp	r2, r3
 8005736:	d019      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005742:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005744:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574a:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005754:	4b1c      	ldr	r3, [pc, #112]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575a:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800575c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005764:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005776:	f7fc ff1b 	bl	80025b0 <HAL_GetTick>
 800577a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577c:	e00b      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fc ff17 	bl	80025b0 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f241 3288 	movw	r2, #5000	; 0x1388
 800578c:	4293      	cmp	r3, r2
 800578e:	d902      	bls.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	74fb      	strb	r3, [r7, #19]
            break;
 8005794:	e006      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ec      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b8:	4903      	ldr	r1, [pc, #12]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057c0:	e008      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057c2:	7cfb      	ldrb	r3, [r7, #19]
 80057c4:	74bb      	strb	r3, [r7, #18]
 80057c6:	e005      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d0:	7cfb      	ldrb	r3, [r7, #19]
 80057d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057d4:	7c7b      	ldrb	r3, [r7, #17]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d105      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057da:	4ba7      	ldr	r3, [pc, #668]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	4aa6      	ldr	r2, [pc, #664]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057f2:	4ba1      	ldr	r3, [pc, #644]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f023 0203 	bic.w	r2, r3, #3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	499d      	ldr	r1, [pc, #628]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005814:	4b98      	ldr	r3, [pc, #608]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f023 020c 	bic.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	4995      	ldr	r1, [pc, #596]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005836:	4b90      	ldr	r3, [pc, #576]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	498c      	ldr	r1, [pc, #560]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005858:	4b87      	ldr	r3, [pc, #540]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	4984      	ldr	r1, [pc, #528]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800587a:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	497b      	ldr	r1, [pc, #492]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800589c:	4b76      	ldr	r3, [pc, #472]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	4973      	ldr	r1, [pc, #460]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058be:	4b6e      	ldr	r3, [pc, #440]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	496a      	ldr	r1, [pc, #424]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058e0:	4b65      	ldr	r3, [pc, #404]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	4962      	ldr	r1, [pc, #392]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005902:	4b5d      	ldr	r3, [pc, #372]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	4959      	ldr	r1, [pc, #356]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005924:	4b54      	ldr	r3, [pc, #336]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800592a:	f023 0203 	bic.w	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	4951      	ldr	r1, [pc, #324]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005946:	4b4c      	ldr	r3, [pc, #304]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	4948      	ldr	r1, [pc, #288]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005968:	4b43      	ldr	r3, [pc, #268]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	4940      	ldr	r1, [pc, #256]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005986:	d105      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005988:	4b3b      	ldr	r3, [pc, #236]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a3a      	ldr	r2, [pc, #232]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005992:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599c:	2b00      	cmp	r3, #0
 800599e:	d015      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059a0:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	4932      	ldr	r1, [pc, #200]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059be:	d105      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c0:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d015      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059d8:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	4924      	ldr	r1, [pc, #144]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059f6:	d105      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f8:	4b1f      	ldr	r3, [pc, #124]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	4916      	ldr	r1, [pc, #88]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2e:	d105      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a30:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4a10      	ldr	r2, [pc, #64]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d019      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	4908      	ldr	r1, [pc, #32]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a66:	d109      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4a02      	ldr	r2, [pc, #8]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a72:	60d3      	str	r3, [r2, #12]
 8005a74:	e002      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005a76:	bf00      	nop
 8005a78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a88:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	4926      	ldr	r1, [pc, #152]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005aa8:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a20      	ldr	r2, [pc, #128]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d015      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ac0:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	4918      	ldr	r1, [pc, #96]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d105      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ae0:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d015      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005af8:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b06:	490a      	ldr	r1, [pc, #40]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b16:	d105      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b24:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000

08005b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e049      	b.n	8005bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fc fb54 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f000 fdf0 	bl	8006758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d001      	beq.n	8005bfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e04c      	b.n	8005c96 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <HAL_TIM_Base_Start+0xc0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d022      	beq.n	8005c54 <HAL_TIM_Base_Start+0x70>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c16:	d01d      	beq.n	8005c54 <HAL_TIM_Base_Start+0x70>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a22      	ldr	r2, [pc, #136]	; (8005ca8 <HAL_TIM_Base_Start+0xc4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d018      	beq.n	8005c54 <HAL_TIM_Base_Start+0x70>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a21      	ldr	r2, [pc, #132]	; (8005cac <HAL_TIM_Base_Start+0xc8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <HAL_TIM_Base_Start+0x70>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <HAL_TIM_Base_Start+0xcc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <HAL_TIM_Base_Start+0x70>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <HAL_TIM_Base_Start+0xd0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_TIM_Base_Start+0x70>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <HAL_TIM_Base_Start+0xd4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIM_Base_Start+0x70>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1b      	ldr	r2, [pc, #108]	; (8005cbc <HAL_TIM_Base_Start+0xd8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d115      	bne.n	8005c80 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <HAL_TIM_Base_Start+0xdc>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d015      	beq.n	8005c92 <HAL_TIM_Base_Start+0xae>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d011      	beq.n	8005c92 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7e:	e008      	b.n	8005c92 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e000      	b.n	8005c94 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40000400 	.word	0x40000400
 8005cac:	40000800 	.word	0x40000800
 8005cb0:	40000c00 	.word	0x40000c00
 8005cb4:	40013400 	.word	0x40013400
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40015000 	.word	0x40015000
 8005cc0:	00010007 	.word	0x00010007

08005cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d001      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e054      	b.n	8005d86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d022      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d01d      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d018      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d013      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00e      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <HAL_TIM_Base_Start_IT+0xe8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d115      	bne.n	8005d70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	4b19      	ldr	r3, [pc, #100]	; (8005db0 <HAL_TIM_Base_Start_IT+0xec>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	d015      	beq.n	8005d82 <HAL_TIM_Base_Start_IT+0xbe>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5c:	d011      	beq.n	8005d82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6e:	e008      	b.n	8005d82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e000      	b.n	8005d84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40013400 	.word	0x40013400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40015000 	.word	0x40015000
 8005db0:	00010007 	.word	0x00010007

08005db4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e049      	b.n	8005e5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f841 	bl	8005e62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f000 fcb0 	bl	8006758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <HAL_TIM_PWM_Start+0x24>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bf14      	ite	ne
 8005e94:	2301      	movne	r3, #1
 8005e96:	2300      	moveq	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e03c      	b.n	8005f16 <HAL_TIM_PWM_Start+0x9e>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d109      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0x3e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e02f      	b.n	8005f16 <HAL_TIM_PWM_Start+0x9e>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d109      	bne.n	8005ed0 <HAL_TIM_PWM_Start+0x58>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e022      	b.n	8005f16 <HAL_TIM_PWM_Start+0x9e>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d109      	bne.n	8005eea <HAL_TIM_PWM_Start+0x72>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	bf14      	ite	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	2300      	moveq	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e015      	b.n	8005f16 <HAL_TIM_PWM_Start+0x9e>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d109      	bne.n	8005f04 <HAL_TIM_PWM_Start+0x8c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	bf14      	ite	ne
 8005efc:	2301      	movne	r3, #1
 8005efe:	2300      	moveq	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	e008      	b.n	8005f16 <HAL_TIM_PWM_Start+0x9e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e0a6      	b.n	800606c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Start+0xb6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f2c:	e023      	b.n	8005f76 <HAL_TIM_PWM_Start+0xfe>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Start+0xc6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f3c:	e01b      	b.n	8005f76 <HAL_TIM_PWM_Start+0xfe>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_PWM_Start+0xd6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f4c:	e013      	b.n	8005f76 <HAL_TIM_PWM_Start+0xfe>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b0c      	cmp	r3, #12
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_PWM_Start+0xe6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f5c:	e00b      	b.n	8005f76 <HAL_TIM_PWM_Start+0xfe>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_PWM_Start+0xf6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f6c:	e003      	b.n	8005f76 <HAL_TIM_PWM_Start+0xfe>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f864 	bl	800704c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <HAL_TIM_PWM_Start+0x1fc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_TIM_PWM_Start+0x148>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a39      	ldr	r2, [pc, #228]	; (8006078 <HAL_TIM_PWM_Start+0x200>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_TIM_PWM_Start+0x148>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a37      	ldr	r2, [pc, #220]	; (800607c <HAL_TIM_PWM_Start+0x204>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_TIM_PWM_Start+0x148>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a36      	ldr	r2, [pc, #216]	; (8006080 <HAL_TIM_PWM_Start+0x208>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_TIM_PWM_Start+0x148>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a34      	ldr	r2, [pc, #208]	; (8006084 <HAL_TIM_PWM_Start+0x20c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIM_PWM_Start+0x148>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a33      	ldr	r2, [pc, #204]	; (8006088 <HAL_TIM_PWM_Start+0x210>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d101      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x14c>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_TIM_PWM_Start+0x14e>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a25      	ldr	r2, [pc, #148]	; (8006074 <HAL_TIM_PWM_Start+0x1fc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d022      	beq.n	800602a <HAL_TIM_PWM_Start+0x1b2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fec:	d01d      	beq.n	800602a <HAL_TIM_PWM_Start+0x1b2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a26      	ldr	r2, [pc, #152]	; (800608c <HAL_TIM_PWM_Start+0x214>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d018      	beq.n	800602a <HAL_TIM_PWM_Start+0x1b2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a24      	ldr	r2, [pc, #144]	; (8006090 <HAL_TIM_PWM_Start+0x218>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <HAL_TIM_PWM_Start+0x1b2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a23      	ldr	r2, [pc, #140]	; (8006094 <HAL_TIM_PWM_Start+0x21c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00e      	beq.n	800602a <HAL_TIM_PWM_Start+0x1b2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a19      	ldr	r2, [pc, #100]	; (8006078 <HAL_TIM_PWM_Start+0x200>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d009      	beq.n	800602a <HAL_TIM_PWM_Start+0x1b2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a18      	ldr	r2, [pc, #96]	; (800607c <HAL_TIM_PWM_Start+0x204>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d004      	beq.n	800602a <HAL_TIM_PWM_Start+0x1b2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_TIM_PWM_Start+0x210>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d115      	bne.n	8006056 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	4b19      	ldr	r3, [pc, #100]	; (8006098 <HAL_TIM_PWM_Start+0x220>)
 8006032:	4013      	ands	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b06      	cmp	r3, #6
 800603a:	d015      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1f0>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006042:	d011      	beq.n	8006068 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006054:	e008      	b.n	8006068 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0201 	orr.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e000      	b.n	800606a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800
 8006088:	40015000 	.word	0x40015000
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800
 8006094:	40000c00 	.word	0x40000c00
 8006098:	00010007 	.word	0x00010007

0800609c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e097      	b.n	80061e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fc f8e5 	bl	8002294 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80060e0:	f023 0307 	bic.w	r3, r3, #7
 80060e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f000 fb31 	bl	8006758 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	4313      	orrs	r3, r2
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800613c:	f023 030c 	bic.w	r3, r3, #12
 8006140:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006148:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800614c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	4313      	orrs	r3, r2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	011a      	lsls	r2, r3, #4
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	031b      	lsls	r3, r3, #12
 800616c:	4313      	orrs	r3, r2
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006182:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	4313      	orrs	r3, r2
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006200:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006208:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006210:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d110      	bne.n	800623a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d102      	bne.n	8006224 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800621e:	7b7b      	ldrb	r3, [r7, #13]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d001      	beq.n	8006228 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e069      	b.n	80062fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	e031      	b.n	800629e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d110      	bne.n	8006262 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d102      	bne.n	800624c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006246:	7b3b      	ldrb	r3, [r7, #12]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e055      	b.n	80062fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006260:	e01d      	b.n	800629e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d108      	bne.n	800627a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d105      	bne.n	800627a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800626e:	7b7b      	ldrb	r3, [r7, #13]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d102      	bne.n	800627a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006274:	7b3b      	ldrb	r3, [r7, #12]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d001      	beq.n	800627e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e03e      	b.n	80062fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2202      	movs	r2, #2
 8006292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_TIM_Encoder_Start+0xc4>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d008      	beq.n	80062bc <HAL_TIM_Encoder_Start+0xd4>
 80062aa:	e00f      	b.n	80062cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2201      	movs	r2, #1
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fec9 	bl	800704c <TIM_CCxChannelCmd>
      break;
 80062ba:	e016      	b.n	80062ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2201      	movs	r2, #1
 80062c2:	2104      	movs	r1, #4
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fec1 	bl	800704c <TIM_CCxChannelCmd>
      break;
 80062ca:	e00e      	b.n	80062ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2201      	movs	r2, #1
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 feb9 	bl	800704c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	2104      	movs	r1, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 feb2 	bl	800704c <TIM_CCxChannelCmd>
      break;
 80062e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800631e:	2302      	movs	r3, #2
 8006320:	e0ff      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b14      	cmp	r3, #20
 800632e:	f200 80f0 	bhi.w	8006512 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006332:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	0800638d 	.word	0x0800638d
 800633c:	08006513 	.word	0x08006513
 8006340:	08006513 	.word	0x08006513
 8006344:	08006513 	.word	0x08006513
 8006348:	080063cd 	.word	0x080063cd
 800634c:	08006513 	.word	0x08006513
 8006350:	08006513 	.word	0x08006513
 8006354:	08006513 	.word	0x08006513
 8006358:	0800640f 	.word	0x0800640f
 800635c:	08006513 	.word	0x08006513
 8006360:	08006513 	.word	0x08006513
 8006364:	08006513 	.word	0x08006513
 8006368:	0800644f 	.word	0x0800644f
 800636c:	08006513 	.word	0x08006513
 8006370:	08006513 	.word	0x08006513
 8006374:	08006513 	.word	0x08006513
 8006378:	08006491 	.word	0x08006491
 800637c:	08006513 	.word	0x08006513
 8006380:	08006513 	.word	0x08006513
 8006384:	08006513 	.word	0x08006513
 8006388:	080064d1 	.word	0x080064d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fa94 	bl	80068c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0208 	orr.w	r2, r2, #8
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0204 	bic.w	r2, r2, #4
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	619a      	str	r2, [r3, #24]
      break;
 80063ca:	e0a5      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fb0e 	bl	80069f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6999      	ldr	r1, [r3, #24]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	021a      	lsls	r2, r3, #8
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	619a      	str	r2, [r3, #24]
      break;
 800640c:	e084      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fb81 	bl	8006b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0208 	orr.w	r2, r2, #8
 8006428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0204 	bic.w	r2, r2, #4
 8006438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	61da      	str	r2, [r3, #28]
      break;
 800644c:	e064      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fbf3 	bl	8006c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69d9      	ldr	r1, [r3, #28]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	021a      	lsls	r2, r3, #8
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	61da      	str	r2, [r3, #28]
      break;
 800648e:	e043      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fc66 	bl	8006d68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0208 	orr.w	r2, r2, #8
 80064aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0204 	bic.w	r2, r2, #4
 80064ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	691a      	ldr	r2, [r3, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80064ce:	e023      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fcb0 	bl	8006e3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	021a      	lsls	r2, r3, #8
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006510:	e002      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
      break;
 8006516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop

0800652c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_TIM_ConfigClockSource+0x1c>
 8006544:	2302      	movs	r3, #2
 8006546:	e0f6      	b.n	8006736 <HAL_TIM_ConfigClockSource+0x20a>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800656a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a6f      	ldr	r2, [pc, #444]	; (8006740 <HAL_TIM_ConfigClockSource+0x214>)
 8006582:	4293      	cmp	r3, r2
 8006584:	f000 80c1 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1de>
 8006588:	4a6d      	ldr	r2, [pc, #436]	; (8006740 <HAL_TIM_ConfigClockSource+0x214>)
 800658a:	4293      	cmp	r3, r2
 800658c:	f200 80c6 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 8006590:	4a6c      	ldr	r2, [pc, #432]	; (8006744 <HAL_TIM_ConfigClockSource+0x218>)
 8006592:	4293      	cmp	r3, r2
 8006594:	f000 80b9 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1de>
 8006598:	4a6a      	ldr	r2, [pc, #424]	; (8006744 <HAL_TIM_ConfigClockSource+0x218>)
 800659a:	4293      	cmp	r3, r2
 800659c:	f200 80be 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 80065a0:	4a69      	ldr	r2, [pc, #420]	; (8006748 <HAL_TIM_ConfigClockSource+0x21c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	f000 80b1 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1de>
 80065a8:	4a67      	ldr	r2, [pc, #412]	; (8006748 <HAL_TIM_ConfigClockSource+0x21c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	f200 80b6 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 80065b0:	4a66      	ldr	r2, [pc, #408]	; (800674c <HAL_TIM_ConfigClockSource+0x220>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	f000 80a9 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1de>
 80065b8:	4a64      	ldr	r2, [pc, #400]	; (800674c <HAL_TIM_ConfigClockSource+0x220>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	f200 80ae 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 80065c0:	4a63      	ldr	r2, [pc, #396]	; (8006750 <HAL_TIM_ConfigClockSource+0x224>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	f000 80a1 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1de>
 80065c8:	4a61      	ldr	r2, [pc, #388]	; (8006750 <HAL_TIM_ConfigClockSource+0x224>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	f200 80a6 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 80065d0:	4a60      	ldr	r2, [pc, #384]	; (8006754 <HAL_TIM_ConfigClockSource+0x228>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	f000 8099 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1de>
 80065d8:	4a5e      	ldr	r2, [pc, #376]	; (8006754 <HAL_TIM_ConfigClockSource+0x228>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	f200 809e 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 80065e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065e4:	f000 8091 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1de>
 80065e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065ec:	f200 8096 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 80065f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f4:	f000 8089 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1de>
 80065f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065fc:	f200 808e 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 8006600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006604:	d03e      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
 8006606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660a:	f200 8087 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 800660e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006612:	f000 8086 	beq.w	8006722 <HAL_TIM_ConfigClockSource+0x1f6>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661a:	d87f      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 800661c:	2b70      	cmp	r3, #112	; 0x70
 800661e:	d01a      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x12a>
 8006620:	2b70      	cmp	r3, #112	; 0x70
 8006622:	d87b      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 8006624:	2b60      	cmp	r3, #96	; 0x60
 8006626:	d050      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x19e>
 8006628:	2b60      	cmp	r3, #96	; 0x60
 800662a:	d877      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 800662c:	2b50      	cmp	r3, #80	; 0x50
 800662e:	d03c      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0x17e>
 8006630:	2b50      	cmp	r3, #80	; 0x50
 8006632:	d873      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	d058      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x1be>
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d86f      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 800663c:	2b30      	cmp	r3, #48	; 0x30
 800663e:	d064      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x1de>
 8006640:	2b30      	cmp	r3, #48	; 0x30
 8006642:	d86b      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 8006644:	2b20      	cmp	r3, #32
 8006646:	d060      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x1de>
 8006648:	2b20      	cmp	r3, #32
 800664a:	d867      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1f0>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05c      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x1de>
 8006650:	2b10      	cmp	r3, #16
 8006652:	d05a      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x1de>
 8006654:	e062      	b.n	800671c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006666:	f000 fcd1 	bl	800700c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	609a      	str	r2, [r3, #8]
      break;
 8006682:	e04f      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006694:	f000 fcba 	bl	800700c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066a6:	609a      	str	r2, [r3, #8]
      break;
 80066a8:	e03c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b6:	461a      	mov	r2, r3
 80066b8:	f000 fc2c 	bl	8006f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2150      	movs	r1, #80	; 0x50
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fc85 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 80066c8:	e02c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d6:	461a      	mov	r2, r3
 80066d8:	f000 fc4b 	bl	8006f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2160      	movs	r1, #96	; 0x60
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fc75 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 80066e8:	e01c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	461a      	mov	r2, r3
 80066f8:	f000 fc0c 	bl	8006f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2140      	movs	r1, #64	; 0x40
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fc65 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006708:	e00c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4619      	mov	r1, r3
 8006714:	4610      	mov	r0, r2
 8006716:	f000 fc5c 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 800671a:	e003      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
      break;
 8006720:	e000      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	00100070 	.word	0x00100070
 8006744:	00100060 	.word	0x00100060
 8006748:	00100050 	.word	0x00100050
 800674c:	00100040 	.word	0x00100040
 8006750:	00100030 	.word	0x00100030
 8006754:	00100020 	.word	0x00100020

08006758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a4c      	ldr	r2, [pc, #304]	; (800689c <TIM_Base_SetConfig+0x144>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d017      	beq.n	80067a0 <TIM_Base_SetConfig+0x48>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006776:	d013      	beq.n	80067a0 <TIM_Base_SetConfig+0x48>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a49      	ldr	r2, [pc, #292]	; (80068a0 <TIM_Base_SetConfig+0x148>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00f      	beq.n	80067a0 <TIM_Base_SetConfig+0x48>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a48      	ldr	r2, [pc, #288]	; (80068a4 <TIM_Base_SetConfig+0x14c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_Base_SetConfig+0x48>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a47      	ldr	r2, [pc, #284]	; (80068a8 <TIM_Base_SetConfig+0x150>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_Base_SetConfig+0x48>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a46      	ldr	r2, [pc, #280]	; (80068ac <TIM_Base_SetConfig+0x154>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_Base_SetConfig+0x48>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a45      	ldr	r2, [pc, #276]	; (80068b0 <TIM_Base_SetConfig+0x158>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d108      	bne.n	80067b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a39      	ldr	r2, [pc, #228]	; (800689c <TIM_Base_SetConfig+0x144>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d023      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c0:	d01f      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a36      	ldr	r2, [pc, #216]	; (80068a0 <TIM_Base_SetConfig+0x148>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01b      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a35      	ldr	r2, [pc, #212]	; (80068a4 <TIM_Base_SetConfig+0x14c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d017      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a34      	ldr	r2, [pc, #208]	; (80068a8 <TIM_Base_SetConfig+0x150>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a33      	ldr	r2, [pc, #204]	; (80068ac <TIM_Base_SetConfig+0x154>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00f      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a33      	ldr	r2, [pc, #204]	; (80068b4 <TIM_Base_SetConfig+0x15c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00b      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a32      	ldr	r2, [pc, #200]	; (80068b8 <TIM_Base_SetConfig+0x160>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d007      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a31      	ldr	r2, [pc, #196]	; (80068bc <TIM_Base_SetConfig+0x164>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <TIM_Base_SetConfig+0xaa>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <TIM_Base_SetConfig+0x158>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d108      	bne.n	8006814 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a18      	ldr	r2, [pc, #96]	; (800689c <TIM_Base_SetConfig+0x144>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d013      	beq.n	8006868 <TIM_Base_SetConfig+0x110>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <TIM_Base_SetConfig+0x154>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <TIM_Base_SetConfig+0x110>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a1a      	ldr	r2, [pc, #104]	; (80068b4 <TIM_Base_SetConfig+0x15c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00b      	beq.n	8006868 <TIM_Base_SetConfig+0x110>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a19      	ldr	r2, [pc, #100]	; (80068b8 <TIM_Base_SetConfig+0x160>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_Base_SetConfig+0x110>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a18      	ldr	r2, [pc, #96]	; (80068bc <TIM_Base_SetConfig+0x164>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_Base_SetConfig+0x110>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a13      	ldr	r2, [pc, #76]	; (80068b0 <TIM_Base_SetConfig+0x158>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d103      	bne.n	8006870 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b01      	cmp	r3, #1
 8006880:	d105      	bne.n	800688e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f023 0201 	bic.w	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	611a      	str	r2, [r3, #16]
  }
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40000800 	.word	0x40000800
 80068a8:	40000c00 	.word	0x40000c00
 80068ac:	40013400 	.word	0x40013400
 80068b0:	40015000 	.word	0x40015000
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400
 80068bc:	40014800 	.word	0x40014800

080068c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f023 0201 	bic.w	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 0302 	bic.w	r3, r3, #2
 800690c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a30      	ldr	r2, [pc, #192]	; (80069dc <TIM_OC1_SetConfig+0x11c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <TIM_OC1_SetConfig+0x88>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <TIM_OC1_SetConfig+0x120>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00f      	beq.n	8006948 <TIM_OC1_SetConfig+0x88>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2e      	ldr	r2, [pc, #184]	; (80069e4 <TIM_OC1_SetConfig+0x124>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00b      	beq.n	8006948 <TIM_OC1_SetConfig+0x88>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a2d      	ldr	r2, [pc, #180]	; (80069e8 <TIM_OC1_SetConfig+0x128>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_OC1_SetConfig+0x88>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <TIM_OC1_SetConfig+0x12c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_OC1_SetConfig+0x88>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <TIM_OC1_SetConfig+0x130>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d10c      	bne.n	8006962 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f023 0308 	bic.w	r3, r3, #8
 800694e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 0304 	bic.w	r3, r3, #4
 8006960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <TIM_OC1_SetConfig+0x11c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d013      	beq.n	8006992 <TIM_OC1_SetConfig+0xd2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <TIM_OC1_SetConfig+0x120>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00f      	beq.n	8006992 <TIM_OC1_SetConfig+0xd2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <TIM_OC1_SetConfig+0x124>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <TIM_OC1_SetConfig+0xd2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1a      	ldr	r2, [pc, #104]	; (80069e8 <TIM_OC1_SetConfig+0x128>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d007      	beq.n	8006992 <TIM_OC1_SetConfig+0xd2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <TIM_OC1_SetConfig+0x12c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_OC1_SetConfig+0xd2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <TIM_OC1_SetConfig+0x130>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d111      	bne.n	80069b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400
 80069e4:	40014000 	.word	0x40014000
 80069e8:	40014400 	.word	0x40014400
 80069ec:	40014800 	.word	0x40014800
 80069f0:	40015000 	.word	0x40015000

080069f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f023 0210 	bic.w	r2, r3, #16
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0320 	bic.w	r3, r3, #32
 8006a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <TIM_OC2_SetConfig+0x110>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_OC2_SetConfig+0x74>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2b      	ldr	r2, [pc, #172]	; (8006b08 <TIM_OC2_SetConfig+0x114>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC2_SetConfig+0x74>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2a      	ldr	r2, [pc, #168]	; (8006b0c <TIM_OC2_SetConfig+0x118>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10d      	bne.n	8006a84 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1f      	ldr	r2, [pc, #124]	; (8006b04 <TIM_OC2_SetConfig+0x110>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xc0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	; (8006b08 <TIM_OC2_SetConfig+0x114>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xc0>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <TIM_OC2_SetConfig+0x11c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xc0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <TIM_OC2_SetConfig+0x120>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xc0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <TIM_OC2_SetConfig+0x124>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC2_SetConfig+0xc0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <TIM_OC2_SetConfig+0x118>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d113      	bne.n	8006adc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40013400 	.word	0x40013400
 8006b0c:	40015000 	.word	0x40015000
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40014400 	.word	0x40014400
 8006b18:	40014800 	.word	0x40014800

08006b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2b      	ldr	r2, [pc, #172]	; (8006c28 <TIM_OC3_SetConfig+0x10c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d007      	beq.n	8006b8e <TIM_OC3_SetConfig+0x72>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <TIM_OC3_SetConfig+0x110>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d003      	beq.n	8006b8e <TIM_OC3_SetConfig+0x72>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a29      	ldr	r2, [pc, #164]	; (8006c30 <TIM_OC3_SetConfig+0x114>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d10d      	bne.n	8006baa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1e      	ldr	r2, [pc, #120]	; (8006c28 <TIM_OC3_SetConfig+0x10c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <TIM_OC3_SetConfig+0xbe>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1d      	ldr	r2, [pc, #116]	; (8006c2c <TIM_OC3_SetConfig+0x110>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00f      	beq.n	8006bda <TIM_OC3_SetConfig+0xbe>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <TIM_OC3_SetConfig+0x118>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_OC3_SetConfig+0xbe>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <TIM_OC3_SetConfig+0x11c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_OC3_SetConfig+0xbe>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <TIM_OC3_SetConfig+0x120>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_OC3_SetConfig+0xbe>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <TIM_OC3_SetConfig+0x114>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d113      	bne.n	8006c02 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	621a      	str	r2, [r3, #32]
}
 8006c1c:	bf00      	nop
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40012c00 	.word	0x40012c00
 8006c2c:	40013400 	.word	0x40013400
 8006c30:	40015000 	.word	0x40015000
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40014400 	.word	0x40014400
 8006c3c:	40014800 	.word	0x40014800

08006c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	031b      	lsls	r3, r3, #12
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a2c      	ldr	r2, [pc, #176]	; (8006d50 <TIM_OC4_SetConfig+0x110>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x74>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a2b      	ldr	r2, [pc, #172]	; (8006d54 <TIM_OC4_SetConfig+0x114>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x74>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <TIM_OC4_SetConfig+0x118>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d10d      	bne.n	8006cd0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	031b      	lsls	r3, r3, #12
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <TIM_OC4_SetConfig+0x110>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <TIM_OC4_SetConfig+0xc0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1e      	ldr	r2, [pc, #120]	; (8006d54 <TIM_OC4_SetConfig+0x114>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00f      	beq.n	8006d00 <TIM_OC4_SetConfig+0xc0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <TIM_OC4_SetConfig+0x11c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <TIM_OC4_SetConfig+0xc0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a1d      	ldr	r2, [pc, #116]	; (8006d60 <TIM_OC4_SetConfig+0x120>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d007      	beq.n	8006d00 <TIM_OC4_SetConfig+0xc0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	; (8006d64 <TIM_OC4_SetConfig+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC4_SetConfig+0xc0>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <TIM_OC4_SetConfig+0x118>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d113      	bne.n	8006d28 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	019b      	lsls	r3, r3, #6
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	019b      	lsls	r3, r3, #6
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40013400 	.word	0x40013400
 8006d58:	40015000 	.word	0x40015000
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800

08006d68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006dac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <TIM_OC5_SetConfig+0xbc>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <TIM_OC5_SetConfig+0x82>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <TIM_OC5_SetConfig+0xc0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_OC5_SetConfig+0x82>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <TIM_OC5_SetConfig+0xc4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_OC5_SetConfig+0x82>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <TIM_OC5_SetConfig+0xc8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_OC5_SetConfig+0x82>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <TIM_OC5_SetConfig+0xcc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_OC5_SetConfig+0x82>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a14      	ldr	r2, [pc, #80]	; (8006e38 <TIM_OC5_SetConfig+0xd0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d109      	bne.n	8006dfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	621a      	str	r2, [r3, #32]
}
 8006e18:	bf00      	nop
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	40012c00 	.word	0x40012c00
 8006e28:	40013400 	.word	0x40013400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40014400 	.word	0x40014400
 8006e34:	40014800 	.word	0x40014800
 8006e38:	40015000 	.word	0x40015000

08006e3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	051b      	lsls	r3, r3, #20
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a1a      	ldr	r2, [pc, #104]	; (8006efc <TIM_OC6_SetConfig+0xc0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <TIM_OC6_SetConfig+0x84>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a19      	ldr	r2, [pc, #100]	; (8006f00 <TIM_OC6_SetConfig+0xc4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00f      	beq.n	8006ec0 <TIM_OC6_SetConfig+0x84>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a18      	ldr	r2, [pc, #96]	; (8006f04 <TIM_OC6_SetConfig+0xc8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_OC6_SetConfig+0x84>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <TIM_OC6_SetConfig+0xcc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_OC6_SetConfig+0x84>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a16      	ldr	r2, [pc, #88]	; (8006f0c <TIM_OC6_SetConfig+0xd0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_OC6_SetConfig+0x84>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <TIM_OC6_SetConfig+0xd4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d109      	bne.n	8006ed4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	029b      	lsls	r3, r3, #10
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	621a      	str	r2, [r3, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40012c00 	.word	0x40012c00
 8006f00:	40013400 	.word	0x40013400
 8006f04:	40014000 	.word	0x40014000
 8006f08:	40014400 	.word	0x40014400
 8006f0c:	40014800 	.word	0x40014800
 8006f10:	40015000 	.word	0x40015000

08006f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0201 	bic.w	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 030a 	bic.w	r3, r3, #10
 8006f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f023 0210 	bic.w	r2, r3, #16
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f043 0307 	orr.w	r3, r3, #7
 8006ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	609a      	str	r2, [r3, #8]
}
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	021a      	lsls	r2, r3, #8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	431a      	orrs	r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4313      	orrs	r3, r2
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	609a      	str	r2, [r3, #8]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f003 031f 	and.w	r3, r3, #31
 800705e:	2201      	movs	r2, #1
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1a      	ldr	r2, [r3, #32]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	43db      	mvns	r3, r3
 800706e:	401a      	ands	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1a      	ldr	r2, [r3, #32]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	fa01 f303 	lsl.w	r3, r1, r3
 8007084:	431a      	orrs	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	621a      	str	r2, [r3, #32]
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
	...

08007098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e074      	b.n	800719a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a34      	ldr	r2, [pc, #208]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d009      	beq.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a33      	ldr	r2, [pc, #204]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a31      	ldr	r2, [pc, #196]	; (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d108      	bne.n	8007100 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a21      	ldr	r2, [pc, #132]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d022      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007130:	d01d      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1f      	ldr	r2, [pc, #124]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a15      	ldr	r2, [pc, #84]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a18      	ldr	r2, [pc, #96]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a11      	ldr	r2, [pc, #68]	; (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d10c      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	4313      	orrs	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40012c00 	.word	0x40012c00
 80071ac:	40013400 	.word	0x40013400
 80071b0:	40015000 	.word	0x40015000
 80071b4:	40000400 	.word	0x40000400
 80071b8:	40000800 	.word	0x40000800
 80071bc:	40000c00 	.word	0x40000c00
 80071c0:	40014000 	.word	0x40014000

080071c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e042      	b.n	800725c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7fa ffad 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2224      	movs	r2, #36	; 0x24
 80071f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0201 	bic.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 ff42 	bl	8008098 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fc43 	bl	8007aa0 <UART_SetConfig>
 800721a:	4603      	mov	r3, r0
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e01b      	b.n	800725c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 ffc1 	bl	80081dc <UART_CheckIdleState>
 800725a:	4603      	mov	r3, r0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727a:	2b20      	cmp	r3, #32
 800727c:	d17b      	bne.n	8007376 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_UART_Transmit+0x26>
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e074      	b.n	8007378 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2221      	movs	r2, #33	; 0x21
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800729e:	f7fb f987 	bl	80025b0 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	88fa      	ldrh	r2, [r7, #6]
 80072a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072bc:	d108      	bne.n	80072d0 <HAL_UART_Transmit+0x6c>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e003      	b.n	80072d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072d8:	e030      	b.n	800733c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	2180      	movs	r1, #128	; 0x80
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f001 f823 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e03d      	b.n	8007378 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007310:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	3302      	adds	r3, #2
 8007316:	61bb      	str	r3, [r7, #24]
 8007318:	e007      	b.n	800732a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	3301      	adds	r3, #1
 8007328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1c8      	bne.n	80072da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2200      	movs	r2, #0
 8007350:	2140      	movs	r1, #64	; 0x40
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 ffec 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d005      	beq.n	800736a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2220      	movs	r2, #32
 8007362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e006      	b.n	8007378 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007376:	2302      	movs	r3, #2
  }
}
 8007378:	4618      	mov	r0, r3
 800737a:	3720      	adds	r7, #32
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007394:	2b20      	cmp	r3, #32
 8007396:	d137      	bne.n	8007408 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_UART_Receive_IT+0x24>
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e030      	b.n	800740a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_UART_Receive_IT+0x94>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d01f      	beq.n	80073f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d018      	beq.n	80073f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	613b      	str	r3, [r7, #16]
   return(result);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	623b      	str	r3, [r7, #32]
 80073e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	6a3a      	ldr	r2, [r7, #32]
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e6      	bne.n	80073c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	461a      	mov	r2, r3
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f001 f804 	bl	800840c <UART_Start_Receive_IT>
 8007404:	4603      	mov	r3, r0
 8007406:	e000      	b.n	800740a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	3728      	adds	r7, #40	; 0x28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40008000 	.word	0x40008000

08007418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b0ba      	sub	sp, #232	; 0xe8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800743e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007442:	f640 030f 	movw	r3, #2063	; 0x80f
 8007446:	4013      	ands	r3, r2
 8007448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800744c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11b      	bne.n	800748c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d015      	beq.n	800748c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800746c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 82e3 	beq.w	8007a48 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
      }
      return;
 800748a:	e2dd      	b.n	8007a48 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800748c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8123 	beq.w	80076dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007496:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800749a:	4b8d      	ldr	r3, [pc, #564]	; (80076d0 <HAL_UART_IRQHandler+0x2b8>)
 800749c:	4013      	ands	r3, r2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80074a6:	4b8b      	ldr	r3, [pc, #556]	; (80076d4 <HAL_UART_IRQHandler+0x2bc>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 8116 	beq.w	80076dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d011      	beq.n	80074e0 <HAL_UART_IRQHandler+0xc8>
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2201      	movs	r2, #1
 80074ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d6:	f043 0201 	orr.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d011      	beq.n	8007510 <HAL_UART_IRQHandler+0xf8>
 80074ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2202      	movs	r2, #2
 80074fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d011      	beq.n	8007540 <HAL_UART_IRQHandler+0x128>
 800751c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2204      	movs	r2, #4
 800752e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f043 0202 	orr.w	r2, r3, #2
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d017      	beq.n	800757c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007558:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800755c:	4b5c      	ldr	r3, [pc, #368]	; (80076d0 <HAL_UART_IRQHandler+0x2b8>)
 800755e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2208      	movs	r2, #8
 800756a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <HAL_UART_IRQHandler+0x196>
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00c      	beq.n	80075ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800759c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8249 	beq.w	8007a4c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d013      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d005      	beq.n	8007612 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800760a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800760e:	2b00      	cmp	r3, #0
 8007610:	d054      	beq.n	80076bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 f81c 	bl	8008650 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d146      	bne.n	80076b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800763c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3308      	adds	r3, #8
 800764e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007652:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800765e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800766a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1d9      	bne.n	8007626 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007678:	2b00      	cmp	r3, #0
 800767a:	d017      	beq.n	80076ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <HAL_UART_IRQHandler+0x2c0>)
 8007684:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800768c:	4618      	mov	r0, r3
 800768e:	f7fc fe9f 	bl	80043d0 <HAL_DMA_Abort_IT>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d019      	beq.n	80076cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80076a6:	4610      	mov	r0, r2
 80076a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076aa:	e00f      	b.n	80076cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f9e1 	bl	8007a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b2:	e00b      	b.n	80076cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f9dd 	bl	8007a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ba:	e007      	b.n	80076cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9d9 	bl	8007a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80076ca:	e1bf      	b.n	8007a4c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	bf00      	nop
    return;
 80076ce:	e1bd      	b.n	8007a4c <HAL_UART_IRQHandler+0x634>
 80076d0:	10000001 	.word	0x10000001
 80076d4:	04000120 	.word	0x04000120
 80076d8:	0800871d 	.word	0x0800871d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	f040 8153 	bne.w	800798c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 814c 	beq.w	800798c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8145 	beq.w	800798c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2210      	movs	r2, #16
 8007708:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	f040 80bb 	bne.w	8007890 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007728:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 818f 	beq.w	8007a50 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007738:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800773c:	429a      	cmp	r2, r3
 800773e:	f080 8187 	bcs.w	8007a50 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007748:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 8087 	bne.w	800786e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800777c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800778a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800778e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007796:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1da      	bne.n	8007760 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e1      	bne.n	80077aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3308      	adds	r3, #8
 8007806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800780a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800780c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007810:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e3      	bne.n	80077e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	f023 0310 	bic.w	r3, r3, #16
 8007840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800784e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007850:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800785c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e4      	bne.n	800782c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007868:	4618      	mov	r0, r3
 800786a:	f7fc fd58 	bl	800431e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007880:	b29b      	uxth	r3, r3
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	b29b      	uxth	r3, r3
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f8fd 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800788e:	e0df      	b.n	8007a50 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800789c:	b29b      	uxth	r3, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80d1 	beq.w	8007a54 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80078b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 80cc 	beq.w	8007a54 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078de:	647b      	str	r3, [r7, #68]	; 0x44
 80078e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e4      	bne.n	80078bc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	623b      	str	r3, [r7, #32]
   return(result);
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800791a:	633a      	str	r2, [r7, #48]	; 0x30
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e1      	bne.n	80078f2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007964:	61fb      	str	r3, [r7, #28]
 8007966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	617b      	str	r3, [r7, #20]
   return(result);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e4      	bne.n	8007942 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800797e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f87f 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800798a:	e063      	b.n	8007a54 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <HAL_UART_IRQHandler+0x59e>
 8007998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800799c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80079ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fc12 	bl	80091d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079b4:	e051      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d014      	beq.n	80079ec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d105      	bne.n	80079da <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d03a      	beq.n	8007a58 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
    }
    return;
 80079ea:	e035      	b.n	8007a58 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d009      	beq.n	8007a0c <HAL_UART_IRQHandler+0x5f4>
 80079f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fe9f 	bl	8008748 <UART_EndTransmit_IT>
    return;
 8007a0a:	e026      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <HAL_UART_IRQHandler+0x614>
 8007a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fbeb 	bl	8009200 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a2a:	e016      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d010      	beq.n	8007a5a <HAL_UART_IRQHandler+0x642>
 8007a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da0c      	bge.n	8007a5a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fbd3 	bl	80091ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a46:	e008      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
      return;
 8007a48:	bf00      	nop
 8007a4a:	e006      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
    return;
 8007a4c:	bf00      	nop
 8007a4e:	e004      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
      return;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
      return;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
    return;
 8007a58:	bf00      	nop
  }
}
 8007a5a:	37e8      	adds	r7, #232	; 0xe8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aa4:	b08c      	sub	sp, #48	; 0x30
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	4baa      	ldr	r3, [pc, #680]	; (8007d78 <UART_SetConfig+0x2d8>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a9f      	ldr	r2, [pc, #636]	; (8007d7c <UART_SetConfig+0x2dc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	f023 010f 	bic.w	r1, r3, #15
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a90      	ldr	r2, [pc, #576]	; (8007d80 <UART_SetConfig+0x2e0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d125      	bne.n	8007b90 <UART_SetConfig+0xf0>
 8007b44:	4b8f      	ldr	r3, [pc, #572]	; (8007d84 <UART_SetConfig+0x2e4>)
 8007b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d81a      	bhi.n	8007b88 <UART_SetConfig+0xe8>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0xb8>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b79 	.word	0x08007b79
 8007b60:	08007b71 	.word	0x08007b71
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e116      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007b70:	2302      	movs	r3, #2
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e112      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007b78:	2304      	movs	r3, #4
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b7e:	e10e      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007b80:	2308      	movs	r3, #8
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b86:	e10a      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b8e:	e106      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a7c      	ldr	r2, [pc, #496]	; (8007d88 <UART_SetConfig+0x2e8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d138      	bne.n	8007c0c <UART_SetConfig+0x16c>
 8007b9a:	4b7a      	ldr	r3, [pc, #488]	; (8007d84 <UART_SetConfig+0x2e4>)
 8007b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba0:	f003 030c 	and.w	r3, r3, #12
 8007ba4:	2b0c      	cmp	r3, #12
 8007ba6:	d82d      	bhi.n	8007c04 <UART_SetConfig+0x164>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <UART_SetConfig+0x110>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007be5 	.word	0x08007be5
 8007bb4:	08007c05 	.word	0x08007c05
 8007bb8:	08007c05 	.word	0x08007c05
 8007bbc:	08007c05 	.word	0x08007c05
 8007bc0:	08007bf5 	.word	0x08007bf5
 8007bc4:	08007c05 	.word	0x08007c05
 8007bc8:	08007c05 	.word	0x08007c05
 8007bcc:	08007c05 	.word	0x08007c05
 8007bd0:	08007bed 	.word	0x08007bed
 8007bd4:	08007c05 	.word	0x08007c05
 8007bd8:	08007c05 	.word	0x08007c05
 8007bdc:	08007c05 	.word	0x08007c05
 8007be0:	08007bfd 	.word	0x08007bfd
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bea:	e0d8      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007bec:	2302      	movs	r3, #2
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bf2:	e0d4      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bfa:	e0d0      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c02:	e0cc      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007c04:	2310      	movs	r3, #16
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0a:	e0c8      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a5e      	ldr	r2, [pc, #376]	; (8007d8c <UART_SetConfig+0x2ec>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d125      	bne.n	8007c62 <UART_SetConfig+0x1c2>
 8007c16:	4b5b      	ldr	r3, [pc, #364]	; (8007d84 <UART_SetConfig+0x2e4>)
 8007c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c20:	2b30      	cmp	r3, #48	; 0x30
 8007c22:	d016      	beq.n	8007c52 <UART_SetConfig+0x1b2>
 8007c24:	2b30      	cmp	r3, #48	; 0x30
 8007c26:	d818      	bhi.n	8007c5a <UART_SetConfig+0x1ba>
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d00a      	beq.n	8007c42 <UART_SetConfig+0x1a2>
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d814      	bhi.n	8007c5a <UART_SetConfig+0x1ba>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <UART_SetConfig+0x19a>
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d008      	beq.n	8007c4a <UART_SetConfig+0x1aa>
 8007c38:	e00f      	b.n	8007c5a <UART_SetConfig+0x1ba>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c40:	e0ad      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007c42:	2302      	movs	r3, #2
 8007c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c48:	e0a9      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c50:	e0a5      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007c52:	2308      	movs	r3, #8
 8007c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c58:	e0a1      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007c5a:	2310      	movs	r3, #16
 8007c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c60:	e09d      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a4a      	ldr	r2, [pc, #296]	; (8007d90 <UART_SetConfig+0x2f0>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d125      	bne.n	8007cb8 <UART_SetConfig+0x218>
 8007c6c:	4b45      	ldr	r3, [pc, #276]	; (8007d84 <UART_SetConfig+0x2e4>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c76:	2bc0      	cmp	r3, #192	; 0xc0
 8007c78:	d016      	beq.n	8007ca8 <UART_SetConfig+0x208>
 8007c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c7c:	d818      	bhi.n	8007cb0 <UART_SetConfig+0x210>
 8007c7e:	2b80      	cmp	r3, #128	; 0x80
 8007c80:	d00a      	beq.n	8007c98 <UART_SetConfig+0x1f8>
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d814      	bhi.n	8007cb0 <UART_SetConfig+0x210>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <UART_SetConfig+0x1f0>
 8007c8a:	2b40      	cmp	r3, #64	; 0x40
 8007c8c:	d008      	beq.n	8007ca0 <UART_SetConfig+0x200>
 8007c8e:	e00f      	b.n	8007cb0 <UART_SetConfig+0x210>
 8007c90:	2300      	movs	r3, #0
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c96:	e082      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9e:	e07e      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca6:	e07a      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007ca8:	2308      	movs	r3, #8
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cae:	e076      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007cb0:	2310      	movs	r3, #16
 8007cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb6:	e072      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a35      	ldr	r2, [pc, #212]	; (8007d94 <UART_SetConfig+0x2f4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d12a      	bne.n	8007d18 <UART_SetConfig+0x278>
 8007cc2:	4b30      	ldr	r3, [pc, #192]	; (8007d84 <UART_SetConfig+0x2e4>)
 8007cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd0:	d01a      	beq.n	8007d08 <UART_SetConfig+0x268>
 8007cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd6:	d81b      	bhi.n	8007d10 <UART_SetConfig+0x270>
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cdc:	d00c      	beq.n	8007cf8 <UART_SetConfig+0x258>
 8007cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce2:	d815      	bhi.n	8007d10 <UART_SetConfig+0x270>
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <UART_SetConfig+0x250>
 8007ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cec:	d008      	beq.n	8007d00 <UART_SetConfig+0x260>
 8007cee:	e00f      	b.n	8007d10 <UART_SetConfig+0x270>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf6:	e052      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	e04e      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d00:	2304      	movs	r3, #4
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d06:	e04a      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d0e:	e046      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d10:	2310      	movs	r3, #16
 8007d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d16:	e042      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a17      	ldr	r2, [pc, #92]	; (8007d7c <UART_SetConfig+0x2dc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d13a      	bne.n	8007d98 <UART_SetConfig+0x2f8>
 8007d22:	4b18      	ldr	r3, [pc, #96]	; (8007d84 <UART_SetConfig+0x2e4>)
 8007d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d30:	d01a      	beq.n	8007d68 <UART_SetConfig+0x2c8>
 8007d32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d36:	d81b      	bhi.n	8007d70 <UART_SetConfig+0x2d0>
 8007d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d3c:	d00c      	beq.n	8007d58 <UART_SetConfig+0x2b8>
 8007d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d42:	d815      	bhi.n	8007d70 <UART_SetConfig+0x2d0>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <UART_SetConfig+0x2b0>
 8007d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d4c:	d008      	beq.n	8007d60 <UART_SetConfig+0x2c0>
 8007d4e:	e00f      	b.n	8007d70 <UART_SetConfig+0x2d0>
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e022      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e01e      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d60:	2304      	movs	r3, #4
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d66:	e01a      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6e:	e016      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e012      	b.n	8007d9e <UART_SetConfig+0x2fe>
 8007d78:	cfff69f3 	.word	0xcfff69f3
 8007d7c:	40008000 	.word	0x40008000
 8007d80:	40013800 	.word	0x40013800
 8007d84:	40021000 	.word	0x40021000
 8007d88:	40004400 	.word	0x40004400
 8007d8c:	40004800 	.word	0x40004800
 8007d90:	40004c00 	.word	0x40004c00
 8007d94:	40005000 	.word	0x40005000
 8007d98:	2310      	movs	r3, #16
 8007d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4aae      	ldr	r2, [pc, #696]	; (800805c <UART_SetConfig+0x5bc>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	f040 8097 	bne.w	8007ed8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	d823      	bhi.n	8007dfa <UART_SetConfig+0x35a>
 8007db2:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <UART_SetConfig+0x318>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007ddd 	.word	0x08007ddd
 8007dbc:	08007dfb 	.word	0x08007dfb
 8007dc0:	08007de5 	.word	0x08007de5
 8007dc4:	08007dfb 	.word	0x08007dfb
 8007dc8:	08007deb 	.word	0x08007deb
 8007dcc:	08007dfb 	.word	0x08007dfb
 8007dd0:	08007dfb 	.word	0x08007dfb
 8007dd4:	08007dfb 	.word	0x08007dfb
 8007dd8:	08007df3 	.word	0x08007df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ddc:	f7fd fbea 	bl	80055b4 <HAL_RCC_GetPCLK1Freq>
 8007de0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007de2:	e010      	b.n	8007e06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007de4:	4b9e      	ldr	r3, [pc, #632]	; (8008060 <UART_SetConfig+0x5c0>)
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007de8:	e00d      	b.n	8007e06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dea:	f7fd fb75 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8007dee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007df0:	e009      	b.n	8007e06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007df8:	e005      	b.n	8007e06 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8130 	beq.w	800806e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	4a94      	ldr	r2, [pc, #592]	; (8008064 <UART_SetConfig+0x5c4>)
 8007e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	4613      	mov	r3, r2
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	4413      	add	r3, r2
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d305      	bcc.n	8007e3e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d903      	bls.n	8007e46 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e44:	e113      	b.n	800806e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	2200      	movs	r2, #0
 8007e4a:	60bb      	str	r3, [r7, #8]
 8007e4c:	60fa      	str	r2, [r7, #12]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	4a84      	ldr	r2, [pc, #528]	; (8008064 <UART_SetConfig+0x5c4>)
 8007e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	603b      	str	r3, [r7, #0]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e68:	f7f8 fe3c 	bl	8000ae4 <__aeabi_uldivmod>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4610      	mov	r0, r2
 8007e72:	4619      	mov	r1, r3
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	020b      	lsls	r3, r1, #8
 8007e7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e82:	0202      	lsls	r2, r0, #8
 8007e84:	6979      	ldr	r1, [r7, #20]
 8007e86:	6849      	ldr	r1, [r1, #4]
 8007e88:	0849      	lsrs	r1, r1, #1
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	4605      	mov	r5, r0
 8007e90:	eb12 0804 	adds.w	r8, r2, r4
 8007e94:	eb43 0905 	adc.w	r9, r3, r5
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	469a      	mov	sl, r3
 8007ea0:	4693      	mov	fp, r2
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	465b      	mov	r3, fp
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	f7f8 fe1b 	bl	8000ae4 <__aeabi_uldivmod>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ebc:	d308      	bcc.n	8007ed0 <UART_SetConfig+0x430>
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ec4:	d204      	bcs.n	8007ed0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6a3a      	ldr	r2, [r7, #32]
 8007ecc:	60da      	str	r2, [r3, #12]
 8007ece:	e0ce      	b.n	800806e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ed6:	e0ca      	b.n	800806e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee0:	d166      	bne.n	8007fb0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007ee2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	d827      	bhi.n	8007f3a <UART_SetConfig+0x49a>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <UART_SetConfig+0x450>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f15 	.word	0x08007f15
 8007ef4:	08007f1d 	.word	0x08007f1d
 8007ef8:	08007f25 	.word	0x08007f25
 8007efc:	08007f3b 	.word	0x08007f3b
 8007f00:	08007f2b 	.word	0x08007f2b
 8007f04:	08007f3b 	.word	0x08007f3b
 8007f08:	08007f3b 	.word	0x08007f3b
 8007f0c:	08007f3b 	.word	0x08007f3b
 8007f10:	08007f33 	.word	0x08007f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f14:	f7fd fb4e 	bl	80055b4 <HAL_RCC_GetPCLK1Freq>
 8007f18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f1a:	e014      	b.n	8007f46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f1c:	f7fd fb60 	bl	80055e0 <HAL_RCC_GetPCLK2Freq>
 8007f20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f22:	e010      	b.n	8007f46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f24:	4b4e      	ldr	r3, [pc, #312]	; (8008060 <UART_SetConfig+0x5c0>)
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f28:	e00d      	b.n	8007f46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f2a:	f7fd fad5 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8007f2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f30:	e009      	b.n	8007f46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f38:	e005      	b.n	8007f46 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 8090 	beq.w	800806e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	4a44      	ldr	r2, [pc, #272]	; (8008064 <UART_SetConfig+0x5c4>)
 8007f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f60:	005a      	lsls	r2, r3, #1
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	441a      	add	r2, r3
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	2b0f      	cmp	r3, #15
 8007f78:	d916      	bls.n	8007fa8 <UART_SetConfig+0x508>
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f80:	d212      	bcs.n	8007fa8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f023 030f 	bic.w	r3, r3, #15
 8007f8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	8bfb      	ldrh	r3, [r7, #30]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	8bfa      	ldrh	r2, [r7, #30]
 8007fa4:	60da      	str	r2, [r3, #12]
 8007fa6:	e062      	b.n	800806e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007fae:	e05e      	b.n	800806e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d828      	bhi.n	800800a <UART_SetConfig+0x56a>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x520>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fed 	.word	0x08007fed
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	0800800b 	.word	0x0800800b
 8007fd0:	08007ffb 	.word	0x08007ffb
 8007fd4:	0800800b 	.word	0x0800800b
 8007fd8:	0800800b 	.word	0x0800800b
 8007fdc:	0800800b 	.word	0x0800800b
 8007fe0:	08008003 	.word	0x08008003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe4:	f7fd fae6 	bl	80055b4 <HAL_RCC_GetPCLK1Freq>
 8007fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fea:	e014      	b.n	8008016 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fec:	f7fd faf8 	bl	80055e0 <HAL_RCC_GetPCLK2Freq>
 8007ff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ff2:	e010      	b.n	8008016 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff4:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <UART_SetConfig+0x5c0>)
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ff8:	e00d      	b.n	8008016 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffa:	f7fd fa6d 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8007ffe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008000:	e009      	b.n	8008016 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008008:	e005      	b.n	8008016 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008014:	bf00      	nop
    }

    if (pclk != 0U)
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	2b00      	cmp	r3, #0
 800801a:	d028      	beq.n	800806e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	4a10      	ldr	r2, [pc, #64]	; (8008064 <UART_SetConfig+0x5c4>)
 8008022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008026:	461a      	mov	r2, r3
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	fbb3 f2f2 	udiv	r2, r3, r2
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	441a      	add	r2, r3
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	fbb2 f3f3 	udiv	r3, r2, r3
 800803e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	2b0f      	cmp	r3, #15
 8008044:	d910      	bls.n	8008068 <UART_SetConfig+0x5c8>
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804c:	d20c      	bcs.n	8008068 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	b29a      	uxth	r2, r3
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60da      	str	r2, [r3, #12]
 8008058:	e009      	b.n	800806e <UART_SetConfig+0x5ce>
 800805a:	bf00      	nop
 800805c:	40008000 	.word	0x40008000
 8008060:	00f42400 	.word	0x00f42400
 8008064:	08009510 	.word	0x08009510
      }
      else
      {
        ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2201      	movs	r2, #1
 8008072:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2201      	movs	r2, #1
 800807a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2200      	movs	r2, #0
 8008082:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2200      	movs	r2, #0
 8008088:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800808a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800808e:	4618      	mov	r0, r3
 8008090:	3730      	adds	r7, #48	; 0x30
 8008092:	46bd      	mov	sp, r7
 8008094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	f003 0308 	and.w	r3, r3, #8
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008174:	2b00      	cmp	r3, #0
 8008176:	d01a      	beq.n	80081ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008196:	d10a      	bne.n	80081ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	605a      	str	r2, [r3, #4]
  }
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b098      	sub	sp, #96	; 0x60
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081ec:	f7fa f9e0 	bl	80025b0 <HAL_GetTick>
 80081f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d12f      	bne.n	8008260 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008208:	2200      	movs	r2, #0
 800820a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f88e 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d022      	beq.n	8008260 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800822e:	653b      	str	r3, [r7, #80]	; 0x50
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	461a      	mov	r2, r3
 8008236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008238:	647b      	str	r3, [r7, #68]	; 0x44
 800823a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800823e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e6      	bne.n	800821a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e063      	b.n	8008328 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b04      	cmp	r3, #4
 800826c:	d149      	bne.n	8008302 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008276:	2200      	movs	r2, #0
 8008278:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f857 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d03c      	beq.n	8008302 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	623b      	str	r3, [r7, #32]
   return(result);
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800829c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a6:	633b      	str	r3, [r7, #48]	; 0x30
 80082a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e6      	bne.n	8008288 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f023 0301 	bic.w	r3, r3, #1
 80082d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082da:	61fa      	str	r2, [r7, #28]
 80082dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	69b9      	ldr	r1, [r7, #24]
 80082e0:	69fa      	ldr	r2, [r7, #28]
 80082e2:	e841 2300 	strex	r3, r2, [r1]
 80082e6:	617b      	str	r3, [r7, #20]
   return(result);
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e5      	bne.n	80082ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e012      	b.n	8008328 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3758      	adds	r7, #88	; 0x58
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4613      	mov	r3, r2
 800833e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008340:	e04f      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d04b      	beq.n	80083e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800834a:	f7fa f931 	bl	80025b0 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	429a      	cmp	r2, r3
 8008358:	d302      	bcc.n	8008360 <UART_WaitOnFlagUntilTimeout+0x30>
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e04e      	b.n	8008402 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0304 	and.w	r3, r3, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	d037      	beq.n	80083e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b80      	cmp	r3, #128	; 0x80
 8008376:	d034      	beq.n	80083e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d031      	beq.n	80083e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b08      	cmp	r3, #8
 800838a:	d110      	bne.n	80083ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2208      	movs	r2, #8
 8008392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 f95b 	bl	8008650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2208      	movs	r2, #8
 800839e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e029      	b.n	8008402 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083bc:	d111      	bne.n	80083e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f941 	bl	8008650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e00f      	b.n	8008402 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69da      	ldr	r2, [r3, #28]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4013      	ands	r3, r2
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	bf0c      	ite	eq
 80083f2:	2301      	moveq	r3, #1
 80083f4:	2300      	movne	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d0a0      	beq.n	8008342 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800840c:	b480      	push	{r7}
 800840e:	b0a3      	sub	sp, #140	; 0x8c
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843e:	d10e      	bne.n	800845e <UART_Start_Receive_IT+0x52>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <UART_Start_Receive_IT+0x48>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800844e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008452:	e02d      	b.n	80084b0 <UART_Start_Receive_IT+0xa4>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	22ff      	movs	r2, #255	; 0xff
 8008458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800845c:	e028      	b.n	80084b0 <UART_Start_Receive_IT+0xa4>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10d      	bne.n	8008482 <UART_Start_Receive_IT+0x76>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d104      	bne.n	8008478 <UART_Start_Receive_IT+0x6c>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	22ff      	movs	r2, #255	; 0xff
 8008472:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008476:	e01b      	b.n	80084b0 <UART_Start_Receive_IT+0xa4>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	227f      	movs	r2, #127	; 0x7f
 800847c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008480:	e016      	b.n	80084b0 <UART_Start_Receive_IT+0xa4>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800848a:	d10d      	bne.n	80084a8 <UART_Start_Receive_IT+0x9c>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <UART_Start_Receive_IT+0x92>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	227f      	movs	r2, #127	; 0x7f
 8008498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800849c:	e008      	b.n	80084b0 <UART_Start_Receive_IT+0xa4>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	223f      	movs	r2, #63	; 0x3f
 80084a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084a6:	e003      	b.n	80084b0 <UART_Start_Receive_IT+0xa4>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2222      	movs	r2, #34	; 0x22
 80084bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3308      	adds	r3, #8
 80084c6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80084d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084d2:	f043 0301 	orr.w	r3, r3, #1
 80084d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80084e4:	673a      	str	r2, [r7, #112]	; 0x70
 80084e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80084ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80084f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e3      	bne.n	80084c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008500:	d14f      	bne.n	80085a2 <UART_Start_Receive_IT+0x196>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008508:	88fa      	ldrh	r2, [r7, #6]
 800850a:	429a      	cmp	r2, r3
 800850c:	d349      	bcc.n	80085a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008516:	d107      	bne.n	8008528 <UART_Start_Receive_IT+0x11c>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d103      	bne.n	8008528 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4a47      	ldr	r2, [pc, #284]	; (8008640 <UART_Start_Receive_IT+0x234>)
 8008524:	675a      	str	r2, [r3, #116]	; 0x74
 8008526:	e002      	b.n	800852e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4a46      	ldr	r2, [pc, #280]	; (8008644 <UART_Start_Receive_IT+0x238>)
 800852c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d01a      	beq.n	800856c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800854a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008558:	65fb      	str	r3, [r7, #92]	; 0x5c
 800855a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800855e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e4      	bne.n	8008536 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3308      	adds	r3, #8
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008582:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800858c:	64ba      	str	r2, [r7, #72]	; 0x48
 800858e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800859a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e5      	bne.n	800856c <UART_Start_Receive_IT+0x160>
 80085a0:	e046      	b.n	8008630 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085aa:	d107      	bne.n	80085bc <UART_Start_Receive_IT+0x1b0>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d103      	bne.n	80085bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4a24      	ldr	r2, [pc, #144]	; (8008648 <UART_Start_Receive_IT+0x23c>)
 80085b8:	675a      	str	r2, [r3, #116]	; 0x74
 80085ba:	e002      	b.n	80085c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4a23      	ldr	r2, [pc, #140]	; (800864c <UART_Start_Receive_IT+0x240>)
 80085c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d019      	beq.n	80085fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80085de:	677b      	str	r3, [r7, #116]	; 0x74
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085e8:	637b      	str	r3, [r7, #52]	; 0x34
 80085ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e6      	bne.n	80085ca <UART_Start_Receive_IT+0x1be>
 80085fc:	e018      	b.n	8008630 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	613b      	str	r3, [r7, #16]
   return(result);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f043 0320 	orr.w	r3, r3, #32
 8008612:	67bb      	str	r3, [r7, #120]	; 0x78
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800861c:	623b      	str	r3, [r7, #32]
 800861e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	69f9      	ldr	r1, [r7, #28]
 8008622:	6a3a      	ldr	r2, [r7, #32]
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	61bb      	str	r3, [r7, #24]
   return(result);
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e6      	bne.n	80085fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	378c      	adds	r7, #140	; 0x8c
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	08008e71 	.word	0x08008e71
 8008644:	08008b11 	.word	0x08008b11
 8008648:	08008959 	.word	0x08008959
 800864c:	080087a1 	.word	0x080087a1

08008650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008650:	b480      	push	{r7}
 8008652:	b095      	sub	sp, #84	; 0x54
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800866c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008676:	643b      	str	r3, [r7, #64]	; 0x40
 8008678:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800867c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e6      	bne.n	8008658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	61fb      	str	r3, [r7, #28]
   return(result);
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086a0:	f023 0301 	bic.w	r3, r3, #1
 80086a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3308      	adds	r3, #8
 80086ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e3      	bne.n	800868a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d118      	bne.n	80086fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f023 0310 	bic.w	r3, r3, #16
 80086de:	647b      	str	r3, [r7, #68]	; 0x44
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e8:	61bb      	str	r3, [r7, #24]
 80086ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6979      	ldr	r1, [r7, #20]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	613b      	str	r3, [r7, #16]
   return(result);
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e6      	bne.n	80086ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008710:	bf00      	nop
 8008712:	3754      	adds	r7, #84	; 0x54
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f7ff f99a 	bl	8007a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	e853 3f00 	ldrex	r3, [r3]
 800875c:	60bb      	str	r3, [r7, #8]
   return(result);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008764:	61fb      	str	r3, [r7, #28]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	61bb      	str	r3, [r7, #24]
 8008770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6979      	ldr	r1, [r7, #20]
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	613b      	str	r3, [r7, #16]
   return(result);
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e6      	bne.n	8008750 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2220      	movs	r2, #32
 8008786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff f965 	bl	8007a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008796:	bf00      	nop
 8008798:	3720      	adds	r7, #32
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b09c      	sub	sp, #112	; 0x70
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b8:	2b22      	cmp	r3, #34	; 0x22
 80087ba:	f040 80be 	bne.w	800893a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087cc:	b2d9      	uxtb	r1, r3
 80087ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d8:	400a      	ands	r2, r1
 80087da:	b2d2      	uxtb	r2, r2
 80087dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	f040 80a1 	bne.w	800894a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800881c:	66bb      	str	r3, [r7, #104]	; 0x68
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008826:	65bb      	str	r3, [r7, #88]	; 0x58
 8008828:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800882c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e6      	bne.n	8008808 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884c:	f023 0301 	bic.w	r3, r3, #1
 8008850:	667b      	str	r3, [r7, #100]	; 0x64
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3308      	adds	r3, #8
 8008858:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800885a:	647a      	str	r2, [r7, #68]	; 0x44
 800885c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008860:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e5      	bne.n	800883a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a33      	ldr	r2, [pc, #204]	; (8008954 <UART_RxISR_8BIT+0x1b4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d01f      	beq.n	80088cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d018      	beq.n	80088cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	623b      	str	r3, [r7, #32]
   return(result);
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088ae:	663b      	str	r3, [r7, #96]	; 0x60
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
 80088b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088b8:	633b      	str	r3, [r7, #48]	; 0x30
 80088ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e6      	bne.n	800889a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d12e      	bne.n	8008932 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0310 	bic.w	r3, r3, #16
 80088ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088f8:	61fb      	str	r3, [r7, #28]
 80088fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	69b9      	ldr	r1, [r7, #24]
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	617b      	str	r3, [r7, #20]
   return(result);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e6      	bne.n	80088da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	f003 0310 	and.w	r3, r3, #16
 8008916:	2b10      	cmp	r3, #16
 8008918:	d103      	bne.n	8008922 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2210      	movs	r2, #16
 8008920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff f8ac 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008930:	e00b      	b.n	800894a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7f9 f97e 	bl	8001c34 <HAL_UART_RxCpltCallback>
}
 8008938:	e007      	b.n	800894a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f042 0208 	orr.w	r2, r2, #8
 8008948:	619a      	str	r2, [r3, #24]
}
 800894a:	bf00      	nop
 800894c:	3770      	adds	r7, #112	; 0x70
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	40008000 	.word	0x40008000

08008958 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b09c      	sub	sp, #112	; 0x70
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008966:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008970:	2b22      	cmp	r3, #34	; 0x22
 8008972:	f040 80be 	bne.w	8008af2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008984:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008986:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800898a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800898e:	4013      	ands	r3, r2
 8008990:	b29a      	uxth	r2, r3
 8008992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008994:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899a:	1c9a      	adds	r2, r3, #2
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f040 80a1 	bne.w	8008b02 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80089ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089d4:	667b      	str	r3, [r7, #100]	; 0x64
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089de:	657b      	str	r3, [r7, #84]	; 0x54
 80089e0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e6      	bne.n	80089c0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3308      	adds	r3, #8
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	663b      	str	r3, [r7, #96]	; 0x60
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a12:	643a      	str	r2, [r7, #64]	; 0x40
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e5      	bne.n	80089f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a33      	ldr	r2, [pc, #204]	; (8008b0c <UART_RxISR_16BIT+0x1b4>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d01f      	beq.n	8008a84 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d018      	beq.n	8008a84 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d12e      	bne.n	8008aea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f023 0310 	bic.w	r3, r3, #16
 8008aa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab0:	61bb      	str	r3, [r7, #24]
 8008ab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	6979      	ldr	r1, [r7, #20]
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	e841 2300 	strex	r3, r2, [r1]
 8008abc:	613b      	str	r3, [r7, #16]
   return(result);
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e6      	bne.n	8008a92 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	f003 0310 	and.w	r3, r3, #16
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d103      	bne.n	8008ada <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2210      	movs	r2, #16
 8008ad8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7fe ffd0 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ae8:	e00b      	b.n	8008b02 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7f9 f8a2 	bl	8001c34 <HAL_UART_RxCpltCallback>
}
 8008af0:	e007      	b.n	8008b02 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699a      	ldr	r2, [r3, #24]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f042 0208 	orr.w	r2, r2, #8
 8008b00:	619a      	str	r2, [r3, #24]
}
 8008b02:	bf00      	nop
 8008b04:	3770      	adds	r7, #112	; 0x70
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	40008000 	.word	0x40008000

08008b10 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b0ac      	sub	sp, #176	; 0xb0
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b46:	2b22      	cmp	r3, #34	; 0x22
 8008b48:	f040 8182 	bne.w	8008e50 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b52:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b56:	e125      	b.n	8008da4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b62:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008b66:	b2d9      	uxtb	r1, r3
 8008b68:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b72:	400a      	ands	r2, r1
 8008b74:	b2d2      	uxtb	r2, r2
 8008b76:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d053      	beq.n	8008c52 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d011      	beq.n	8008bda <UART_RxISR_8BIT_FIFOEN+0xca>
 8008bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd0:	f043 0201 	orr.w	r2, r3, #1
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d011      	beq.n	8008c0a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00b      	beq.n	8008c0a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c00:	f043 0204 	orr.w	r2, r3, #4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d011      	beq.n	8008c3a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2204      	movs	r2, #4
 8008c28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c30:	f043 0202 	orr.w	r2, r3, #2
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d006      	beq.n	8008c52 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fe ff15 	bl	8007a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f040 80a2 	bne.w	8008da4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c84:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008c88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e4      	bne.n	8008c60 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3308      	adds	r3, #8
 8008cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cbe:	66ba      	str	r2, [r7, #104]	; 0x68
 8008cc0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008cc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008cc6:	e841 2300 	strex	r3, r2, [r1]
 8008cca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1e1      	bne.n	8008c96 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a5f      	ldr	r2, [pc, #380]	; (8008e68 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d021      	beq.n	8008d34 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d01a      	beq.n	8008d34 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d20:	657b      	str	r3, [r7, #84]	; 0x54
 8008d22:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e4      	bne.n	8008cfe <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d130      	bne.n	8008d9e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4a:	e853 3f00 	ldrex	r3, [r3]
 8008d4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	f023 0310 	bic.w	r3, r3, #16
 8008d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d64:	643b      	str	r3, [r7, #64]	; 0x40
 8008d66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d6c:	e841 2300 	strex	r3, r2, [r1]
 8008d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e4      	bne.n	8008d42 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f003 0310 	and.w	r3, r3, #16
 8008d82:	2b10      	cmp	r3, #16
 8008d84:	d103      	bne.n	8008d8e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2210      	movs	r2, #16
 8008d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7fe fe76 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
 8008d9c:	e002      	b.n	8008da4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7f8 ff48 	bl	8001c34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008da4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d006      	beq.n	8008dba <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f47f aecf 	bne.w	8008b58 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dc0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008dc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d049      	beq.n	8008e60 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dd2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d242      	bcs.n	8008e60 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3308      	adds	r3, #8
 8008dfa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e06:	e841 2300 	strex	r3, r2, [r1]
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e3      	bne.n	8008dda <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a15      	ldr	r2, [pc, #84]	; (8008e6c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008e16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f043 0320 	orr.w	r3, r3, #32
 8008e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e3a:	61bb      	str	r3, [r7, #24]
 8008e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6979      	ldr	r1, [r7, #20]
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	613b      	str	r3, [r7, #16]
   return(result);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e4      	bne.n	8008e18 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e4e:	e007      	b.n	8008e60 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0208 	orr.w	r2, r2, #8
 8008e5e:	619a      	str	r2, [r3, #24]
}
 8008e60:	bf00      	nop
 8008e62:	37b0      	adds	r7, #176	; 0xb0
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	40008000 	.word	0x40008000
 8008e6c:	080087a1 	.word	0x080087a1

08008e70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b0ae      	sub	sp, #184	; 0xb8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e7e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea6:	2b22      	cmp	r3, #34	; 0x22
 8008ea8:	f040 8186 	bne.w	80091b8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008eb2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008eb6:	e129      	b.n	800910c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008eca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008ece:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008eda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee0:	1c9a      	adds	r2, r3, #2
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d053      	beq.n	8008fb6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d011      	beq.n	8008f3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00b      	beq.n	8008f3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f34:	f043 0201 	orr.w	r2, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d011      	beq.n	8008f6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008f4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00b      	beq.n	8008f6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f64:	f043 0204 	orr.w	r2, r3, #4
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d011      	beq.n	8008f9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008f7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2204      	movs	r2, #4
 8008f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f94:	f043 0202 	orr.w	r2, r3, #2
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d006      	beq.n	8008fb6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7fe fd63 	bl	8007a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f040 80a4 	bne.w	800910c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fea:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e2      	bne.n	8008fc4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800900e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009014:	f023 0301 	bic.w	r3, r3, #1
 8009018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009026:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009028:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800902c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800902e:	e841 2300 	strex	r3, r2, [r1]
 8009032:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1e1      	bne.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2220      	movs	r2, #32
 800903e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a5f      	ldr	r2, [pc, #380]	; (80091d0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d021      	beq.n	800909c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01a      	beq.n	800909c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009076:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800907a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009088:	65bb      	str	r3, [r7, #88]	; 0x58
 800908a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800908e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e4      	bne.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d130      	bne.n	8009106 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ba:	f023 0310 	bic.w	r3, r3, #16
 80090be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090cc:	647b      	str	r3, [r7, #68]	; 0x44
 80090ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e4      	bne.n	80090aa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f003 0310 	and.w	r3, r3, #16
 80090ea:	2b10      	cmp	r3, #16
 80090ec:	d103      	bne.n	80090f6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2210      	movs	r2, #16
 80090f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fe fcc2 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
 8009104:	e002      	b.n	800910c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7f8 fd94 	bl	8001c34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800910c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009110:	2b00      	cmp	r3, #0
 8009112:	d006      	beq.n	8009122 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b00      	cmp	r3, #0
 800911e:	f47f aecb 	bne.w	8008eb8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009128:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800912c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009130:	2b00      	cmp	r3, #0
 8009132:	d049      	beq.n	80091c8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800913a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800913e:	429a      	cmp	r2, r3
 8009140:	d242      	bcs.n	80091c8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	623b      	str	r3, [r7, #32]
   return(result);
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3308      	adds	r3, #8
 8009162:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009166:	633a      	str	r2, [r7, #48]	; 0x30
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800916c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e3      	bne.n	8009142 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a15      	ldr	r2, [pc, #84]	; (80091d4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800917e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	60fb      	str	r3, [r7, #12]
   return(result);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f043 0320 	orr.w	r3, r3, #32
 8009194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	69b9      	ldr	r1, [r7, #24]
 80091a8:	69fa      	ldr	r2, [r7, #28]
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	617b      	str	r3, [r7, #20]
   return(result);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e4      	bne.n	8009180 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091b6:	e007      	b.n	80091c8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	699a      	ldr	r2, [r3, #24]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0208 	orr.w	r2, r2, #8
 80091c6:	619a      	str	r2, [r3, #24]
}
 80091c8:	bf00      	nop
 80091ca:	37b8      	adds	r7, #184	; 0xb8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	40008000 	.word	0x40008000
 80091d4:	08008959 	.word	0x08008959

080091d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <HAL_UARTEx_DisableFifoMode+0x16>
 8009226:	2302      	movs	r3, #2
 8009228:	e027      	b.n	800927a <HAL_UARTEx_DisableFifoMode+0x66>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2224      	movs	r2, #36	; 0x24
 8009236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0201 	bic.w	r2, r2, #1
 8009250:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009258:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800929a:	2302      	movs	r3, #2
 800929c:	e02d      	b.n	80092fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2224      	movs	r2, #36	; 0x24
 80092aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f850 	bl	8009380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009316:	2302      	movs	r3, #2
 8009318:	e02d      	b.n	8009376 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2224      	movs	r2, #36	; 0x24
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f022 0201 	bic.w	r2, r2, #1
 8009340:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f812 	bl	8009380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938c:	2b00      	cmp	r3, #0
 800938e:	d108      	bne.n	80093a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093a0:	e031      	b.n	8009406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093a2:	2308      	movs	r3, #8
 80093a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093a6:	2308      	movs	r3, #8
 80093a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	0e5b      	lsrs	r3, r3, #25
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	0f5b      	lsrs	r3, r3, #29
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	7b3a      	ldrb	r2, [r7, #12]
 80093ce:	4911      	ldr	r1, [pc, #68]	; (8009414 <UARTEx_SetNbDataToProcess+0x94>)
 80093d0:	5c8a      	ldrb	r2, [r1, r2]
 80093d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093d6:	7b3a      	ldrb	r2, [r7, #12]
 80093d8:	490f      	ldr	r1, [pc, #60]	; (8009418 <UARTEx_SetNbDataToProcess+0x98>)
 80093da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	7b7a      	ldrb	r2, [r7, #13]
 80093ec:	4909      	ldr	r1, [pc, #36]	; (8009414 <UARTEx_SetNbDataToProcess+0x94>)
 80093ee:	5c8a      	ldrb	r2, [r1, r2]
 80093f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093f4:	7b7a      	ldrb	r2, [r7, #13]
 80093f6:	4908      	ldr	r1, [pc, #32]	; (8009418 <UARTEx_SetNbDataToProcess+0x98>)
 80093f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009406:	bf00      	nop
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	08009528 	.word	0x08009528
 8009418:	08009530 	.word	0x08009530

0800941c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	ed93 7a06 	vldr	s14, [r3, #24]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	edd3 7a07 	vldr	s15, [r3, #28]
 8009432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	edd3 7a08 	vldr	s15, [r3, #32]
 800943c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	edd3 7a06 	vldr	s15, [r3, #24]
 800944c:	eeb1 7a67 	vneg.f32	s14, s15
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	edd3 7a08 	vldr	s15, [r3, #32]
 8009456:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800945a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a1a      	ldr	r2, [r3, #32]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d006      	beq.n	8009480 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	330c      	adds	r3, #12
 8009476:	220c      	movs	r2, #12
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f804 	bl	8009488 <memset>
  }

}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <memset>:
 8009488:	4402      	add	r2, r0
 800948a:	4603      	mov	r3, r0
 800948c:	4293      	cmp	r3, r2
 800948e:	d100      	bne.n	8009492 <memset+0xa>
 8009490:	4770      	bx	lr
 8009492:	f803 1b01 	strb.w	r1, [r3], #1
 8009496:	e7f9      	b.n	800948c <memset+0x4>

08009498 <__libc_init_array>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	4d0d      	ldr	r5, [pc, #52]	; (80094d0 <__libc_init_array+0x38>)
 800949c:	4c0d      	ldr	r4, [pc, #52]	; (80094d4 <__libc_init_array+0x3c>)
 800949e:	1b64      	subs	r4, r4, r5
 80094a0:	10a4      	asrs	r4, r4, #2
 80094a2:	2600      	movs	r6, #0
 80094a4:	42a6      	cmp	r6, r4
 80094a6:	d109      	bne.n	80094bc <__libc_init_array+0x24>
 80094a8:	4d0b      	ldr	r5, [pc, #44]	; (80094d8 <__libc_init_array+0x40>)
 80094aa:	4c0c      	ldr	r4, [pc, #48]	; (80094dc <__libc_init_array+0x44>)
 80094ac:	f000 f818 	bl	80094e0 <_init>
 80094b0:	1b64      	subs	r4, r4, r5
 80094b2:	10a4      	asrs	r4, r4, #2
 80094b4:	2600      	movs	r6, #0
 80094b6:	42a6      	cmp	r6, r4
 80094b8:	d105      	bne.n	80094c6 <__libc_init_array+0x2e>
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c0:	4798      	blx	r3
 80094c2:	3601      	adds	r6, #1
 80094c4:	e7ee      	b.n	80094a4 <__libc_init_array+0xc>
 80094c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ca:	4798      	blx	r3
 80094cc:	3601      	adds	r6, #1
 80094ce:	e7f2      	b.n	80094b6 <__libc_init_array+0x1e>
 80094d0:	08009540 	.word	0x08009540
 80094d4:	08009540 	.word	0x08009540
 80094d8:	08009540 	.word	0x08009540
 80094dc:	08009544 	.word	0x08009544

080094e0 <_init>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	bf00      	nop
 80094e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e6:	bc08      	pop	{r3}
 80094e8:	469e      	mov	lr, r3
 80094ea:	4770      	bx	lr

080094ec <_fini>:
 80094ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ee:	bf00      	nop
 80094f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f2:	bc08      	pop	{r3}
 80094f4:	469e      	mov	lr, r3
 80094f6:	4770      	bx	lr
